
droneproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800a970  0800a970  0000b970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae8c  0800ae8c  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ae8c  0800ae8c  0000be8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae94  0800ae94  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae94  0800ae94  0000be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae98  0800ae98  0000be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ae9c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200001d8  0800b074  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800b074  0000c66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015acb  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003657  00000000  00000000  00021cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00025330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fae  00000000  00000000  00026750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1b4  00000000  00000000  000276fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b56e  00000000  00000000  000428b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a07be  00000000  00000000  0005de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe5de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a04  00000000  00000000  000fe624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00105028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a954 	.word	0x0800a954

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a954 	.word	0x0800a954

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <apInit>:


#include "ap.h"

void apInit()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    hwInit();
 8001054:	f000 f992 	bl	800137c <hwInit>

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <apMain>:
//센서 데이터 받기, CALI()

void apMain()
{
 800105c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001060:	b088      	sub	sp, #32
 8001062:	af06      	add	r7, sp, #24
	HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	4959      	ldr	r1, [pc, #356]	@ (80011cc <apMain+0x170>)
 8001068:	4859      	ldr	r0, [pc, #356]	@ (80011d0 <apMain+0x174>)
 800106a:	f004 f8d8 	bl	800521e <HAL_UART_Receive_IT>
   while(1)
   {
       // PIDDouble_Calc(&roll, target_roll, current_roll, current_roll_rate);//roll회전 PID연산 후 저장
       // PIDDouble_Calc(&pitch, target_pitch,current_pitch,current_pitch_rate);//pitch회전 PID연산 후 저장
        if (bt_rx_flag == 1) {
 800106e:	4b59      	ldr	r3, [pc, #356]	@ (80011d4 <apMain+0x178>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d1fb      	bne.n	800106e <apMain+0x12>
//                            HAL_UART_Transmit(&huart2, bluetooth_rx_buffer, strlen((char*)bluetooth_rx_buffer), 100);
//                            HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 100);
//                            break;
//                    }
//                    bt_rx_flag = 0;
        	if(bluetooth_rx_buffer[0] == 'B')
 8001076:	4b58      	ldr	r3, [pc, #352]	@ (80011d8 <apMain+0x17c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b42      	cmp	r3, #66	@ 0x42
 800107c:	f040 80a1 	bne.w	80011c2 <apMain+0x166>
        	{

        		set_print_uart(&huart2);
 8001080:	4856      	ldr	r0, [pc, #344]	@ (80011dc <apMain+0x180>)
 8001082:	f000 f8c3 	bl	800120c <set_print_uart>
        		printf(bluetooth_rx_buffer);//디버깅용 프린트
 8001086:	4854      	ldr	r0, [pc, #336]	@ (80011d8 <apMain+0x17c>)
 8001088:	f006 fd82 	bl	8007b90 <iprintf>
        		printf("\n");
 800108c:	200a      	movs	r0, #10
 800108e:	f006 fd91 	bl	8007bb4 <putchar>
//        		if(sscanf((char*)bluetooth_rx_buffer, "BLX:%.3f,LY:%.3f,RX:%.3f,RY:%.3f\n", &target_yaw, &target_altitude, &target_roll, &target_pitch)==4)
//        		{
//        			printf("SENT : LX:%.3f,LY:%.3f,RX:%.3f,RY:%.3f \r \n ", target_yaw, target_altitude, target_roll, target_pitch);
//        		}
        		char *token = strtok(bluetooth_rx_buffer, ":");
 8001092:	4953      	ldr	r1, [pc, #332]	@ (80011e0 <apMain+0x184>)
 8001094:	4850      	ldr	r0, [pc, #320]	@ (80011d8 <apMain+0x17c>)
 8001096:	f006 fe15 	bl	8007cc4 <strtok>
 800109a:	6078      	str	r0, [r7, #4]

        		    // 값 추출
				while (token != NULL) {
 800109c:	e067      	b.n	800116e <apMain+0x112>
					if (strcmp(token, "BLX") == 0) {
 800109e:	4951      	ldr	r1, [pc, #324]	@ (80011e4 <apMain+0x188>)
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff f89d 	bl	80001e0 <strcmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d111      	bne.n	80010d0 <apMain+0x74>
						token = strtok(NULL, ",");
 80010ac:	494e      	ldr	r1, [pc, #312]	@ (80011e8 <apMain+0x18c>)
 80010ae:	2000      	movs	r0, #0
 80010b0:	f006 fe08 	bl	8007cc4 <strtok>
 80010b4:	6078      	str	r0, [r7, #4]
						target_yaw = atof(token);  // 실수로 변환
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f005 f82c 	bl	8006114 <atof>
 80010bc:	ec53 2b10 	vmov	r2, r3, d0
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fda8 	bl	8000c18 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a48      	ldr	r2, [pc, #288]	@ (80011ec <apMain+0x190>)
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e049      	b.n	8001164 <apMain+0x108>
					}
					else if (strcmp(token, "LY") == 0) {
 80010d0:	4947      	ldr	r1, [pc, #284]	@ (80011f0 <apMain+0x194>)
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff f884 	bl	80001e0 <strcmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d111      	bne.n	8001102 <apMain+0xa6>
						token = strtok(NULL, ",");
 80010de:	4942      	ldr	r1, [pc, #264]	@ (80011e8 <apMain+0x18c>)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f006 fdef 	bl	8007cc4 <strtok>
 80010e6:	6078      	str	r0, [r7, #4]
						target_altitude = atof(token);  // 실수로 변환
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f005 f813 	bl	8006114 <atof>
 80010ee:	ec53 2b10 	vmov	r2, r3, d0
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fd8f 	bl	8000c18 <__aeabi_d2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a3d      	ldr	r2, [pc, #244]	@ (80011f4 <apMain+0x198>)
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e030      	b.n	8001164 <apMain+0x108>
					}
					else if (strcmp(token, "RX") == 0) {
 8001102:	493d      	ldr	r1, [pc, #244]	@ (80011f8 <apMain+0x19c>)
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff f86b 	bl	80001e0 <strcmp>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d111      	bne.n	8001134 <apMain+0xd8>
						token = strtok(NULL, ",");
 8001110:	4935      	ldr	r1, [pc, #212]	@ (80011e8 <apMain+0x18c>)
 8001112:	2000      	movs	r0, #0
 8001114:	f006 fdd6 	bl	8007cc4 <strtok>
 8001118:	6078      	str	r0, [r7, #4]
						target_roll = atof(token);  // 실수로 변환
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f004 fffa 	bl	8006114 <atof>
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd76 	bl	8000c18 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4a33      	ldr	r2, [pc, #204]	@ (80011fc <apMain+0x1a0>)
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e017      	b.n	8001164 <apMain+0x108>
					}
					else if (strcmp(token, "RY") == 0) {
 8001134:	4932      	ldr	r1, [pc, #200]	@ (8001200 <apMain+0x1a4>)
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f852 	bl	80001e0 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d110      	bne.n	8001164 <apMain+0x108>
						token = strtok(NULL, ",");
 8001142:	4929      	ldr	r1, [pc, #164]	@ (80011e8 <apMain+0x18c>)
 8001144:	2000      	movs	r0, #0
 8001146:	f006 fdbd 	bl	8007cc4 <strtok>
 800114a:	6078      	str	r0, [r7, #4]
						target_pitch = atof(token);  // 실수로 변환
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f004 ffe1 	bl	8006114 <atof>
 8001152:	ec53 2b10 	vmov	r2, r3, d0
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd5d 	bl	8000c18 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <apMain+0x1a8>)
 8001162:	6013      	str	r3, [r2, #0]
					}

					// 다음 토큰으로 이동
					token = strtok(NULL, ":");
 8001164:	491e      	ldr	r1, [pc, #120]	@ (80011e0 <apMain+0x184>)
 8001166:	2000      	movs	r0, #0
 8001168:	f006 fdac 	bl	8007cc4 <strtok>
 800116c:	6078      	str	r0, [r7, #4]
				while (token != NULL) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d194      	bne.n	800109e <apMain+0x42>
				}
				 printf("SENT : LX:%.3f,LY:%.3f,RX:%.3f,RY:%.3f \r \n ", target_yaw, target_altitude, target_roll, target_pitch);
 8001174:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <apMain+0x190>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9fd 	bl	8000578 <__aeabi_f2d>
 800117e:	4682      	mov	sl, r0
 8001180:	468b      	mov	fp, r1
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <apMain+0x198>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9f6 	bl	8000578 <__aeabi_f2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <apMain+0x1a0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9ef 	bl	8000578 <__aeabi_f2d>
 800119a:	4680      	mov	r8, r0
 800119c:	4689      	mov	r9, r1
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <apMain+0x1a8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9e8 	bl	8000578 <__aeabi_f2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011b4:	e9cd 4500 	strd	r4, r5, [sp]
 80011b8:	4652      	mov	r2, sl
 80011ba:	465b      	mov	r3, fp
 80011bc:	4812      	ldr	r0, [pc, #72]	@ (8001208 <apMain+0x1ac>)
 80011be:	f006 fce7 	bl	8007b90 <iprintf>
        	}
        	bt_rx_flag=0;
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <apMain+0x178>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
        if (bt_rx_flag == 1) {
 80011c8:	e751      	b.n	800106e <apMain+0x12>
 80011ca:	bf00      	nop
 80011cc:	200001f6 	.word	0x200001f6
 80011d0:	200004d4 	.word	0x200004d4
 80011d4:	200001f4 	.word	0x200001f4
 80011d8:	2000020c 	.word	0x2000020c
 80011dc:	2000048c 	.word	0x2000048c
 80011e0:	0800a970 	.word	0x0800a970
 80011e4:	0800a974 	.word	0x0800a974
 80011e8:	0800a978 	.word	0x0800a978
 80011ec:	20000200 	.word	0x20000200
 80011f0:	0800a97c 	.word	0x0800a97c
 80011f4:	20000204 	.word	0x20000204
 80011f8:	0800a980 	.word	0x0800a980
 80011fc:	200001f8 	.word	0x200001f8
 8001200:	0800a984 	.word	0x0800a984
 8001204:	200001fc 	.word	0x200001fc
 8001208:	0800a988 	.word	0x0800a988

0800120c <set_print_uart>:
  PIDSingle altitude;

  UART_HandleTypeDef *active_huart=&huart2;

  void set_print_uart(UART_HandleTypeDef *huart)
  {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	  active_huart=huart;
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <set_print_uart+0x1c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  }
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000000 	.word	0x20000000

0800122c <__io_putchar>:

  int __io_putchar(int ch){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  	HAL_UART_Transmit(active_huart, &ch, 1, 1000);
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <__io_putchar+0x24>)
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	1d39      	adds	r1, r7, #4
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	2201      	movs	r2, #1
 8001240:	f003 ff62 	bl	8005108 <HAL_UART_Transmit>
    return ch;
 8001244:	687b      	ldr	r3, [r7, #4]
  }
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000000 	.word	0x20000000

08001254 <bluetooth_init>:

#include "CONTROLLER.h"


void bluetooth_init()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

	is_controller_Ready=false;
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <bluetooth_init+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	bt_rx_flag=0;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <bluetooth_init+0x44>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
	bt_rx_data=0;
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <bluetooth_init+0x48>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
	rb_rx_data=0;
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <bluetooth_init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
	rb_rx_flag=0;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <bluetooth_init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
	memset(bluetooth_rx_buffer, 0, bluetooth_rx_buffer_size); // 배열을 0으로 초기화
 8001276:	2232      	movs	r2, #50	@ 0x32
 8001278:	2100      	movs	r1, #0
 800127a:	480b      	ldr	r0, [pc, #44]	@ (80012a8 <bluetooth_init+0x54>)
 800127c:	f006 fd07 	bl	8007c8e <memset>
	memset(bluetooth_tx_buffer, 0, bluetooth_tx_buffer_size); // 배열을 0으로 초기화
 8001280:	2232      	movs	r2, #50	@ 0x32
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	@ (80012ac <bluetooth_init+0x58>)
 8001286:	f006 fd02 	bl	8007c8e <memset>
	print_usart6_status();
 800128a:	f000 f853 	bl	8001334 <print_usart6_status>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000208 	.word	0x20000208
 8001298:	200001f4 	.word	0x200001f4
 800129c:	200001f6 	.word	0x200001f6
 80012a0:	200001f7 	.word	0x200001f7
 80012a4:	200001f5 	.word	0x200001f5
 80012a8:	2000020c 	.word	0x2000020c
 80012ac:	20000240 	.word	0x20000240

080012b0 <HAL_UART_RxCpltCallback>:

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
////		static uint8_t rx1Head = 0;
////
////		HAL_UART_Receive_IT(&huart2, &rx1Data, 1);
////	}
//	//블루트스용
	if(huart->Instance == USART6)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a17      	ldr	r2, [pc, #92]	@ (800131c <HAL_UART_RxCpltCallback+0x6c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d128      	bne.n	8001314 <HAL_UART_RxCpltCallback+0x64>
//			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//			toggle_counter = 0;
//		}
		//HEADER
		static uint8_t bt_rx_head = 0;
		if(bt_rx_data == '\n' || bt_rx_data == '\r' || bt_rx_data == '\0')
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <HAL_UART_RxCpltCallback+0x70>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d007      	beq.n	80012da <HAL_UART_RxCpltCallback+0x2a>
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_UART_RxCpltCallback+0x70>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b0d      	cmp	r3, #13
 80012d0:	d003      	beq.n	80012da <HAL_UART_RxCpltCallback+0x2a>
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <HAL_UART_RxCpltCallback+0x70>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10c      	bne.n	80012f4 <HAL_UART_RxCpltCallback+0x44>
		{
			bluetooth_rx_buffer[bt_rx_head] = '\0';
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_UART_RxCpltCallback+0x74>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_UART_RxCpltCallback+0x78>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	5499      	strb	r1, [r3, r2]
			bt_rx_head = 0;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_UART_RxCpltCallback+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
            bt_rx_flag = 1;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_UART_RxCpltCallback+0x7c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e00a      	b.n	800130a <HAL_UART_RxCpltCallback+0x5a>
		}
		else
		{
			bluetooth_rx_buffer[bt_rx_head++] = bt_rx_data;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_UART_RxCpltCallback+0x74>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	b2d1      	uxtb	r1, r2
 80012fc:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_UART_RxCpltCallback+0x74>)
 80012fe:	7011      	strb	r1, [r2, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <HAL_UART_RxCpltCallback+0x70>)
 8001304:	7819      	ldrb	r1, [r3, #0]
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <HAL_UART_RxCpltCallback+0x78>)
 8001308:	5499      	strb	r1, [r3, r2]
		}
     	HAL_UART_Receive_IT(&huart6,  &bt_rx_data, 1);
 800130a:	2201      	movs	r2, #1
 800130c:	4904      	ldr	r1, [pc, #16]	@ (8001320 <HAL_UART_RxCpltCallback+0x70>)
 800130e:	4808      	ldr	r0, [pc, #32]	@ (8001330 <HAL_UART_RxCpltCallback+0x80>)
 8001310:	f003 ff85 	bl	800521e <HAL_UART_Receive_IT>
	}
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40011400 	.word	0x40011400
 8001320:	200001f6 	.word	0x200001f6
 8001324:	20000272 	.word	0x20000272
 8001328:	2000020c 	.word	0x2000020c
 800132c:	200001f4 	.word	0x200001f4
 8001330:	200004d4 	.word	0x200004d4

08001334 <print_usart6_status>:
void print_usart6_status()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	@ 0x40
 8001338:	af00      	add	r7, sp, #0
    uint32_t cr1 = USART6->CR1;
 800133a:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <print_usart6_status+0x3c>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t sr = USART6->SR;
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <print_usart6_status+0x3c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t buffer[50];
    sprintf(buffer, "CR1: 0x%08X, SR: 0x%08X", cr1, sr);
 8001346:	1d38      	adds	r0, r7, #4
 8001348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800134a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800134c:	4909      	ldr	r1, [pc, #36]	@ (8001374 <print_usart6_status+0x40>)
 800134e:	f006 fc39 	bl	8007bc4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ffa3 	bl	80002a0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	1d39      	adds	r1, r7, #4
 8001360:	2364      	movs	r3, #100	@ 0x64
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <print_usart6_status+0x44>)
 8001364:	f003 fed0 	bl	8005108 <HAL_UART_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3740      	adds	r7, #64	@ 0x40
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40011400 	.word	0x40011400
 8001374:	0800a9d8 	.word	0x0800a9d8
 8001378:	2000048c 	.word	0x2000048c

0800137c <hwInit>:

#include "hw.h"


void hwInit()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  MX_USART2_UART_Init();
 8001380:	f000 fef6 	bl	8002170 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001384:	f000 ff1e 	bl	80021c4 <MX_USART6_UART_Init>
  //초기화 필요한 애들은 다 여기에
  bluetooth_init();
 8001388:	f7ff ff64 	bl	8001254 <bluetooth_init>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	@ (800142c <MX_ADC1_Init+0x9c>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <MX_ADC1_Init+0xa0>)
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013de:	2201      	movs	r2, #1
 80013e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013f2:	f001 f887 	bl	8002504 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 f9e0 	bl	80017c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001400:	2304      	movs	r3, #4
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_ADC1_Init+0x98>)
 8001412:	f001 f8bb 	bl	800258c <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800141c:	f000 f9d0 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000274 	.word	0x20000274
 800142c:	40012000 	.word	0x40012000
 8001430:	0f000001 	.word	0x0f000001

08001434 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a17      	ldr	r2, [pc, #92]	@ (80014b0 <HAL_ADC_MspInit+0x7c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d127      	bne.n	80014a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_ADC_MspInit+0x80>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a15      	ldr	r2, [pc, #84]	@ (80014b4 <HAL_ADC_MspInit+0x80>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <HAL_ADC_MspInit+0x80>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_ADC_MspInit+0x80>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a0e      	ldr	r2, [pc, #56]	@ (80014b4 <HAL_ADC_MspInit+0x80>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_ADC_MspInit+0x80>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800148e:	2310      	movs	r3, #16
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001492:	2303      	movs	r3, #3
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <HAL_ADC_MspInit+0x84>)
 80014a2:	f001 fc45 	bl	8002d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	@ 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40012000 	.word	0x40012000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a37      	ldr	r2, [pc, #220]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a30      	ldr	r2, [pc, #192]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a22      	ldr	r2, [pc, #136]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <MX_GPIO_Init+0xfc>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2120      	movs	r1, #32
 8001546:	481d      	ldr	r0, [pc, #116]	@ (80015bc <MX_GPIO_Init+0x100>)
 8001548:	f001 fd76 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001552:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <MX_GPIO_Init+0x104>)
 8001554:	f001 fd70 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4814      	ldr	r0, [pc, #80]	@ (80015c0 <MX_GPIO_Init+0x104>)
 8001570:	f001 fbde 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001574:	2320      	movs	r3, #32
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_GPIO_Init+0x100>)
 800158c:	f001 fbd0 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_GPIO_Init+0x104>)
 80015aa:	f001 fbc1 	bl	8002d30 <HAL_GPIO_Init>

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	@ 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020800 	.word	0x40020800

080015c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <MX_I2C1_Init+0x54>)
 80015cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <MX_I2C1_Init+0x58>)
 80015d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_I2C1_Init+0x50>)
 8001602:	f001 fd33 	bl	800306c <HAL_I2C_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800160c:	f000 f8d8 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200002bc 	.word	0x200002bc
 8001618:	40005400 	.word	0x40005400
 800161c:	000186a0 	.word	0x000186a0

08001620 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <HAL_I2C_MspInit+0x84>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12b      	bne.n	800169a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_I2C_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <HAL_I2C_MspInit+0x88>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_I2C_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23c0      	movs	r3, #192	@ 0xc0
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166e:	2304      	movs	r3, #4
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <HAL_I2C_MspInit+0x8c>)
 800167a:	f001 fb59 	bl	8002d30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <HAL_I2C_MspInit+0x88>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <HAL_I2C_MspInit+0x88>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_I2C_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	@ 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40005400 	.word	0x40005400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020400 	.word	0x40020400

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b4:	f000 feb4 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b8:	f000 f81a 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016bc:	f7ff fefe 	bl	80014bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016c0:	f000 fd56 	bl	8002170 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016c4:	f000 fb28 	bl	8001d18 <MX_TIM2_Init>
  MX_TIM5_Init();
 80016c8:	f000 fb96 	bl	8001df8 <MX_TIM5_Init>
  MX_I2C1_Init();
 80016cc:	f7ff ff7a 	bl	80015c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80016d0:	f000 fa52 	bl	8001b78 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80016d4:	f000 fd22 	bl	800211c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80016d8:	f000 fd74 	bl	80021c4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80016dc:	f7ff fe58 	bl	8001390 <MX_ADC1_Init>
  MX_SPI2_Init();
 80016e0:	f000 f874 	bl	80017cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 80016e4:	f7ff fcb4 	bl	8001050 <apInit>
  apMain();
 80016e8:	f7ff fcb8 	bl	800105c <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <main+0x3c>

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	@ 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	2230      	movs	r2, #48	@ 0x30
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 fac5 	bl	8007c8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <SystemClock_Config+0xc8>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	4a26      	ldr	r2, [pc, #152]	@ (80017b8 <SystemClock_Config+0xc8>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001722:	6413      	str	r3, [r2, #64]	@ 0x40
 8001724:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <SystemClock_Config+0xc8>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <SystemClock_Config+0xcc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a20      	ldr	r2, [pc, #128]	@ (80017bc <SystemClock_Config+0xcc>)
 800173a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <SystemClock_Config+0xcc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001760:	2304      	movs	r3, #4
 8001762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001764:	2364      	movs	r3, #100	@ 0x64
 8001766:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001768:	2302      	movs	r3, #2
 800176a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800176c:	2304      	movs	r3, #4
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fdbd 	bl	80032f4 <HAL_RCC_OscConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001780:	f000 f81e 	bl	80017c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001784:	230f      	movs	r3, #15
 8001786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	2302      	movs	r3, #2
 800178a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2103      	movs	r1, #3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 f81f 	bl	80037e4 <HAL_RCC_ClockConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017ac:	f000 f808 	bl	80017c0 <Error_Handler>
  }
}
 80017b0:	bf00      	nop
 80017b2:	3750      	adds	r7, #80	@ 0x50
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <Error_Handler+0x8>

080017cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017d2:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <MX_SPI2_Init+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_SPI2_Init+0x64>)
 80017f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_SPI2_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_SPI2_Init+0x64>)
 8001818:	220a      	movs	r2, #10
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_SPI2_Init+0x64>)
 800181e:	f002 fa01 	bl	8003c24 <HAL_SPI_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001828:	f7ff ffca 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000310 	.word	0x20000310
 8001834:	40003800 	.word	0x40003800

08001838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <HAL_SPI_MspInit+0x84>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d12c      	bne.n	80018b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_SPI_MspInit+0x88>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a17      	ldr	r2, [pc, #92]	@ (80018c0 <HAL_SPI_MspInit+0x88>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_SPI_MspInit+0x88>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_SPI_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_SPI_MspInit+0x88>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_SPI_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001892:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a4:	2305      	movs	r3, #5
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <HAL_SPI_MspInit+0x8c>)
 80018b0:	f001 fa3e 	bl	8002d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	@ 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40003800 	.word	0x40003800
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020400 	.word	0x40020400

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <HAL_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001914 <HAL_MspInit+0x4c>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018de:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_MspInit+0x4c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <HAL_MspInit+0x4c>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001906:	2007      	movs	r0, #7
 8001908:	f001 f93e 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <NMI_Handler+0x4>

08001920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <MemManage_Handler+0x4>

08001930 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <UsageFault_Handler+0x4>

08001940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196e:	f000 fda9 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <TIM1_CC_IRQHandler+0x10>)
 800197e:	f002 fb2a 	bl	8003fd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000036c 	.word	0x2000036c

0800198c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <USART1_IRQHandler+0x10>)
 8001992:	f003 fc69 	bl	8005268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000444 	.word	0x20000444

080019a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <USART2_IRQHandler+0x10>)
 80019a6:	f003 fc5f 	bl	8005268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000048c 	.word	0x2000048c

080019b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <USART6_IRQHandler+0x10>)
 80019ba:	f003 fc55 	bl	8005268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200004d4 	.word	0x200004d4

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e2:	f006 fa15 	bl	8007e10 <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
  return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0a:	bf00      	nop
 8001a0c:	e7fd      	b.n	8001a0a <_exit+0x12>

08001a0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e00a      	b.n	8001a36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a20:	f3af 8000 	nop.w
 8001a24:	4601      	mov	r1, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	60ba      	str	r2, [r7, #8]
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbf0      	blt.n	8001a20 <_read+0x12>
  }

  return len;
 8001a3e:	687b      	ldr	r3, [r7, #4]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e009      	b.n	8001a6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	60ba      	str	r2, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fbe2 	bl	800122c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbf1      	blt.n	8001a5a <_write+0x12>
  }
  return len;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_close>:

int _close(int file)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_isatty>:

int _isatty(int file)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f006 f97a 	bl	8007e10 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20020000 	.word	0x20020000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	20000368 	.word	0x20000368
 8001b50:	20000670 	.word	0x20000670

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b09a      	sub	sp, #104	@ 0x68
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2220      	movs	r2, #32
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f006 f865 	bl	8007c8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bc4:	4b52      	ldr	r3, [pc, #328]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001bc6:	4a53      	ldr	r2, [pc, #332]	@ (8001d14 <MX_TIM1_Init+0x19c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bca:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b4c      	ldr	r3, [pc, #304]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001be4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bf0:	4847      	ldr	r0, [pc, #284]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001bf2:	f002 f8a0 	bl	8003d36 <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001bfc:	f7ff fde0 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c04:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4840      	ldr	r0, [pc, #256]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001c0e:	f002 fc8d 	bl	800452c <HAL_TIM_ConfigClockSource>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c18:	f7ff fdd2 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c1c:	483c      	ldr	r0, [pc, #240]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001c1e:	f002 f981 	bl	8003f24 <HAL_TIM_IC_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001c28:	f7ff fdca 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001c2c:	4838      	ldr	r0, [pc, #224]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001c2e:	f002 f8d1 	bl	8003dd4 <HAL_TIM_OC_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c38:	f7ff fdc2 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c44:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4831      	ldr	r0, [pc, #196]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001c4c:	f003 f938 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001c56:	f7ff fdb3 	bl	80017c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigIC.ICFilter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	4827      	ldr	r0, [pc, #156]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001c74:	f002 fafc 	bl	8004270 <HAL_TIM_IC_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001c7e:	f7ff fd9f 	bl	80017c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c82:	2302      	movs	r3, #2
 8001c84:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c86:	2302      	movs	r3, #2
 8001c88:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	481f      	ldr	r0, [pc, #124]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001c94:	f002 faec 	bl	8004270 <HAL_TIM_IC_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c9e:	f7ff fd8f 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4812      	ldr	r0, [pc, #72]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001cc8:	f002 fa76 	bl	80041b8 <HAL_TIM_OC_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001cd2:	f7ff fd75 	bl	80017c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_TIM1_Init+0x198>)
 8001cfa:	f003 f94f 	bl	8004f9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001d04:	f7ff fd5c 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3768      	adds	r7, #104	@ 0x68
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000036c 	.word	0x2000036c
 8001d14:	40010000 	.word	0x40010000

08001d18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8001d42:	4b2b      	ldr	r3, [pc, #172]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d44:	2209      	movs	r2, #9
 8001d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000;
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d50:	4a28      	ldr	r2, [pc, #160]	@ (8001df4 <MX_TIM2_Init+0xdc>)
 8001d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d60:	4823      	ldr	r0, [pc, #140]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d62:	f002 f890 	bl	8003e86 <HAL_TIM_PWM_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001d6c:	f7ff fd28 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	481c      	ldr	r0, [pc, #112]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001d80:	f003 f89e 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001d8a:	f7ff fd19 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8e:	2360      	movs	r3, #96	@ 0x60
 8001d90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	4619      	mov	r1, r3
 8001da4:	4812      	ldr	r0, [pc, #72]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001da6:	f002 faff 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001db0:	f7ff fd06 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2204      	movs	r2, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001dbc:	f002 faf4 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001dc6:	f7ff fcfb 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2208      	movs	r2, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001dd2:	f002 fae9 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001ddc:	f7ff fcf0 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <MX_TIM2_Init+0xd8>)
 8001de2:	f000 f91b 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	@ 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200003b4 	.word	0x200003b4
 8001df4:	00030d40 	.word	0x00030d40

08001df8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	@ 0x38
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	f107 0320 	add.w	r3, r7, #32
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e28:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e2a:	4a38      	ldr	r2, [pc, #224]	@ (8001f0c <MX_TIM5_Init+0x114>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10-1;
 8001e2e:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e30:	2209      	movs	r2, #9
 8001e32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e3a:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b2f      	ldr	r3, [pc, #188]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e4e:	482e      	ldr	r0, [pc, #184]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e50:	f001 ff71 	bl	8003d36 <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001e5a:	f7ff fcb1 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4827      	ldr	r0, [pc, #156]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e6c:	f002 fb5e 	bl	800452c <HAL_TIM_ConfigClockSource>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001e76:	f7ff fca3 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e7a:	4823      	ldr	r0, [pc, #140]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e7c:	f002 f803 	bl	8003e86 <HAL_TIM_PWM_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001e86:	f7ff fc9b 	bl	80017c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001e8a:	481f      	ldr	r0, [pc, #124]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001e8c:	f001 ffa2 	bl	8003dd4 <HAL_TIM_OC_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8001e96:	f7ff fc93 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4817      	ldr	r0, [pc, #92]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001eaa:	f003 f809 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8001eb4:	f7ff fc84 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb8:	2360      	movs	r3, #96	@ 0x60
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480e      	ldr	r0, [pc, #56]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001ed0:	f002 fa6a 	bl	80043a8 <HAL_TIM_PWM_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM5_Init+0xe6>
  {
    Error_Handler();
 8001eda:	f7ff fc71 	bl	80017c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	220c      	movs	r2, #12
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4807      	ldr	r0, [pc, #28]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001eea:	f002 f965 	bl	80041b8 <HAL_TIM_OC_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM5_Init+0x100>
  {
    Error_Handler();
 8001ef4:	f7ff fc64 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ef8:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <MX_TIM5_Init+0x110>)
 8001efa:	f000 f88f 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001efe:	bf00      	nop
 8001f00:	3738      	adds	r7, #56	@ 0x38
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200003fc 	.word	0x200003fc
 8001f0c:	40000c00 	.word	0x40000c00

08001f10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a27      	ldr	r2, [pc, #156]	@ (8001fcc <HAL_TIM_Base_MspInit+0xbc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d135      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	4a25      	ldr	r2, [pc, #148]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f42:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4813      	ldr	r0, [pc, #76]	@ (8001fd4 <HAL_TIM_Base_MspInit+0xc4>)
 8001f88:	f000 fed2 	bl	8002d30 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	201b      	movs	r0, #27
 8001f92:	f000 fe04 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f96:	201b      	movs	r0, #27
 8001f98:	f000 fe1d 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f9c:	e012      	b.n	8001fc4 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM5)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xc8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	@ 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40000c00 	.word	0x40000c00

08001fdc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fec:	d10d      	bne.n	800200a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_TIM_PWM_MspInit+0x3c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203c:	d13e      	bne.n	80020bc <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b32      	ldr	r3, [pc, #200]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a31      	ldr	r2, [pc, #196]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b2f      	ldr	r3, [pc, #188]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a2a      	ldr	r2, [pc, #168]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b28      	ldr	r3, [pc, #160]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002076:	f248 0302 	movw	r3, #32770	@ 0x8002
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002088:	2301      	movs	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	481f      	ldr	r0, [pc, #124]	@ (8002110 <HAL_TIM_MspPostInit+0xf4>)
 8002094:	f000 fe4c 	bl	8002d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020aa:	2301      	movs	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4817      	ldr	r0, [pc, #92]	@ (8002114 <HAL_TIM_MspPostInit+0xf8>)
 80020b6:	f000 fe3b 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020ba:	e022      	b.n	8002102 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM5)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <HAL_TIM_MspPostInit+0xfc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d11d      	bne.n	8002102 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a0f      	ldr	r2, [pc, #60]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_TIM_MspPostInit+0xf0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e2:	2301      	movs	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020f2:	2302      	movs	r3, #2
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <HAL_TIM_MspPostInit+0xf4>)
 80020fe:	f000 fe17 	bl	8002d30 <HAL_GPIO_Init>
}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	@ 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40000c00 	.word	0x40000c00

0800211c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <MX_USART1_UART_Init+0x50>)
 8002124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 8002128:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800212c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	@ (8002168 <MX_USART1_UART_Init+0x4c>)
 8002154:	f002 ff88 	bl	8005068 <HAL_UART_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800215e:	f7ff fb2f 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000444 	.word	0x20000444
 800216c:	40011000 	.word	0x40011000

08002170 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <MX_USART2_UART_Init+0x50>)
 8002178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 800217c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800218e:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 8002196:	220c      	movs	r2, #12
 8002198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	@ (80021bc <MX_USART2_UART_Init+0x4c>)
 80021a8:	f002 ff5e 	bl	8005068 <HAL_UART_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021b2:	f7ff fb05 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000048c 	.word	0x2000048c
 80021c0:	40004400 	.word	0x40004400

080021c4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002234 <MX_USART6_UART_Init+0x70>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b13      	ldr	r3, [pc, #76]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021fa:	480d      	ldr	r0, [pc, #52]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 80021fc:	f002 ff34 	bl	8005068 <HAL_UART_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002206:	f7ff fadb 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  huart6.Instance->CR1 |= USART_CR1_RXNEIE;
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	60da      	str	r2, [r3, #12]
  huart6.Instance->SR  |= USART_SR_RXNE;
 800221a:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <MX_USART6_UART_Init+0x6c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200004d4 	.word	0x200004d4
 8002234:	40011400 	.word	0x40011400

08002238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	@ 0x38
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a57      	ldr	r2, [pc, #348]	@ (80023b4 <HAL_UART_MspInit+0x17c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d135      	bne.n	80022c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
 800225e:	4b56      	ldr	r3, [pc, #344]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	4a55      	ldr	r2, [pc, #340]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6453      	str	r3, [r2, #68]	@ 0x44
 800226a:	4b53      	ldr	r3, [pc, #332]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	4b4f      	ldr	r3, [pc, #316]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a4e      	ldr	r2, [pc, #312]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b4c      	ldr	r3, [pc, #304]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002292:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a4:	2307      	movs	r3, #7
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	4843      	ldr	r0, [pc, #268]	@ (80023bc <HAL_UART_MspInit+0x184>)
 80022b0:	f000 fd3e 	bl	8002d30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2025      	movs	r0, #37	@ 0x25
 80022ba:	f000 fc70 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022be:	2025      	movs	r0, #37	@ 0x25
 80022c0:	f000 fc89 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80022c4:	e072      	b.n	80023ac <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a3d      	ldr	r2, [pc, #244]	@ (80023c0 <HAL_UART_MspInit+0x188>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d134      	bne.n	800233a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	4b38      	ldr	r3, [pc, #224]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	4a37      	ldr	r2, [pc, #220]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 80022da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022de:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e0:	4b35      	ldr	r3, [pc, #212]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	4a30      	ldr	r2, [pc, #192]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fc:	4b2e      	ldr	r3, [pc, #184]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002308:	230c      	movs	r3, #12
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002318:	2307      	movs	r3, #7
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002320:	4619      	mov	r1, r3
 8002322:	4826      	ldr	r0, [pc, #152]	@ (80023bc <HAL_UART_MspInit+0x184>)
 8002324:	f000 fd04 	bl	8002d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2026      	movs	r0, #38	@ 0x26
 800232e:	f000 fc36 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002332:	2026      	movs	r0, #38	@ 0x26
 8002334:	f000 fc4f 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
}
 8002338:	e038      	b.n	80023ac <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART6)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <HAL_UART_MspInit+0x18c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d133      	bne.n	80023ac <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 800234a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234c:	4a1a      	ldr	r2, [pc, #104]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	6453      	str	r3, [r2, #68]	@ 0x44
 8002354:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 8002356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_UART_MspInit+0x180>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800237c:	23c0      	movs	r3, #192	@ 0xc0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800238c:	2308      	movs	r3, #8
 800238e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002394:	4619      	mov	r1, r3
 8002396:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <HAL_UART_MspInit+0x190>)
 8002398:	f000 fcca 	bl	8002d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2047      	movs	r0, #71	@ 0x47
 80023a2:	f000 fbfc 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023a6:	2047      	movs	r0, #71	@ 0x47
 80023a8:	f000 fc15 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
}
 80023ac:	bf00      	nop
 80023ae:	3738      	adds	r7, #56	@ 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40004400 	.word	0x40004400
 80023c4:	40011400 	.word	0x40011400
 80023c8:	40020800 	.word	0x40020800

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023d0:	f7ff fbc0 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	@ (8002408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fa:	f005 fd0f 	bl	8007e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff f957 	bl	80016b0 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002410:	0800ae9c 	.word	0x0800ae9c
  ldr r2, =_sbss
 8002414:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002418:	2000066c 	.word	0x2000066c

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002424:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	@ (8002460 <HAL_Init+0x40>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800242e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_Init+0x40>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800243a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	@ (8002460 <HAL_Init+0x40>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 fb9d 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	2000      	movs	r0, #0
 8002450:	f000 f808 	bl	8002464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002454:	f7ff fa38 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_InitTick+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_InitTick+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fbb5 	bl	8002bf2 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00e      	b.n	80024b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d80a      	bhi.n	80024ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f000 fb7d 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a4:	4a06      	ldr	r2, [pc, #24]	@ (80024c0 <HAL_InitTick+0x5c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000004 	.word	0x20000004
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	20000008 	.word	0x20000008

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	2000000c 	.word	0x2000000c
 80024e8:	2000051c 	.word	0x2000051c

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000051c 	.word	0x2000051c

08002504 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e033      	b.n	8002582 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe ff86 	bl	8001434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800254a:	f023 0302 	bic.w	r3, r3, #2
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f94a 	bl	80027f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
 8002572:	e001      	b.n	8002578 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e113      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x244>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d925      	bls.n	8002604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	3b1e      	subs	r3, #30
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43da      	mvns	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	400a      	ands	r2, r1
 80025dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68d9      	ldr	r1, [r3, #12]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4403      	add	r3, r0
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	409a      	lsls	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e022      	b.n	800264a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	2207      	movs	r2, #7
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43da      	mvns	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	400a      	ands	r2, r1
 8002626:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	4603      	mov	r3, r0
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4403      	add	r3, r0
 8002640:	409a      	lsls	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d824      	bhi.n	800269c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b05      	subs	r3, #5
 8002664:	221f      	movs	r2, #31
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	400a      	ands	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	3b05      	subs	r3, #5
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	635a      	str	r2, [r3, #52]	@ 0x34
 800269a:	e04c      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b23      	subs	r3, #35	@ 0x23
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b23      	subs	r3, #35	@ 0x23
 80026e0:	fa00 f203 	lsl.w	r2, r0, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ec:	e023      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b41      	subs	r3, #65	@ 0x41
 8002700:	221f      	movs	r2, #31
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	400a      	ands	r2, r1
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b41      	subs	r3, #65	@ 0x41
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002736:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <HAL_ADC_ConfigChannel+0x250>)
 8002738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a28      	ldr	r2, [pc, #160]	@ (80027e0 <HAL_ADC_ConfigChannel+0x254>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10f      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1d8>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b12      	cmp	r3, #18
 800274a:	d10b      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1d      	ldr	r2, [pc, #116]	@ (80027e0 <HAL_ADC_ConfigChannel+0x254>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12b      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x23a>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1c      	ldr	r2, [pc, #112]	@ (80027e4 <HAL_ADC_ConfigChannel+0x258>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <HAL_ADC_ConfigChannel+0x1f4>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b11      	cmp	r3, #17
 800277e:	d122      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a11      	ldr	r2, [pc, #68]	@ (80027e4 <HAL_ADC_ConfigChannel+0x258>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d111      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_ADC_ConfigChannel+0x25c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <HAL_ADC_ConfigChannel+0x260>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	0c9a      	lsrs	r2, r3, #18
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f9      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012300 	.word	0x40012300
 80027e0:	40012000 	.word	0x40012000
 80027e4:	10000012 	.word	0x10000012
 80027e8:	20000004 	.word	0x20000004
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f8:	4b79      	ldr	r3, [pc, #484]	@ (80029e0 <ADC_Init+0x1f0>)
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	431a      	orrs	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	021a      	lsls	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800286a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002882:	4a58      	ldr	r2, [pc, #352]	@ (80029e4 <ADC_Init+0x1f4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6899      	ldr	r1, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e00f      	b.n	80028ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0202 	bic.w	r2, r2, #2
 80028fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7e1b      	ldrb	r3, [r3, #24]
 8002908:	005a      	lsls	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800292a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800293a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	3b01      	subs	r3, #1
 8002948:	035a      	lsls	r2, r3, #13
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	e007      	b.n	8002964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002962:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	3b01      	subs	r3, #1
 8002980:	051a      	lsls	r2, r3, #20
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029a6:	025a      	lsls	r2, r3, #9
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6899      	ldr	r1, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	029a      	lsls	r2, r3, #10
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40012300 	.word	0x40012300
 80029e4:	0f000001 	.word	0x0f000001

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	@ (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	@ (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	@ (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	@ 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	@ 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff fc68 	bl	80024ec <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d008      	beq.n	8002c3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e052      	b.n	8002ce2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0216 	bic.w	r2, r2, #22
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <HAL_DMA_Abort+0x62>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0208 	bic.w	r2, r2, #8
 8002c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8c:	e013      	b.n	8002cb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c8e:	f7ff fc2d 	bl	80024ec <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d90c      	bls.n	8002cb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e015      	b.n	8002ce2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e4      	bne.n	8002c8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	223f      	movs	r2, #63	@ 0x3f
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e00c      	b.n	8002d22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e159      	b.n	8003000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8148 	bne.w	8002ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a2 	beq.w	8002ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	4a56      	ldr	r2, [pc, #344]	@ (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec6:	4b54      	ldr	r3, [pc, #336]	@ (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a52      	ldr	r2, [pc, #328]	@ (800301c <HAL_GPIO_Init+0x2ec>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a49      	ldr	r2, [pc, #292]	@ (8003020 <HAL_GPIO_Init+0x2f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x202>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a48      	ldr	r2, [pc, #288]	@ (8003024 <HAL_GPIO_Init+0x2f4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x1fe>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a47      	ldr	r2, [pc, #284]	@ (8003028 <HAL_GPIO_Init+0x2f8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x1fa>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a46      	ldr	r2, [pc, #280]	@ (800302c <HAL_GPIO_Init+0x2fc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x1f6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a45      	ldr	r2, [pc, #276]	@ (8003030 <HAL_GPIO_Init+0x300>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x1f2>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	@ (800301c <HAL_GPIO_Init+0x2ec>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a2f      	ldr	r2, [pc, #188]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a24      	ldr	r2, [pc, #144]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1a      	ldr	r2, [pc, #104]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f aea2 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003054:	e003      	b.n	800305e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	041a      	lsls	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	619a      	str	r2, [r3, #24]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e12b      	b.n	80032d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fac4 	bl	8001620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	@ 0x24
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030d0:	f000 fd80 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 80030d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	4a81      	ldr	r2, [pc, #516]	@ (80032e0 <HAL_I2C_Init+0x274>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d807      	bhi.n	80030f0 <HAL_I2C_Init+0x84>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a80      	ldr	r2, [pc, #512]	@ (80032e4 <HAL_I2C_Init+0x278>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bf94      	ite	ls
 80030e8:	2301      	movls	r3, #1
 80030ea:	2300      	movhi	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e006      	b.n	80030fe <HAL_I2C_Init+0x92>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a7d      	ldr	r2, [pc, #500]	@ (80032e8 <HAL_I2C_Init+0x27c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bf94      	ite	ls
 80030f8:	2301      	movls	r3, #1
 80030fa:	2300      	movhi	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0e7      	b.n	80032d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a78      	ldr	r2, [pc, #480]	@ (80032ec <HAL_I2C_Init+0x280>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a6a      	ldr	r2, [pc, #424]	@ (80032e0 <HAL_I2C_Init+0x274>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d802      	bhi.n	8003140 <HAL_I2C_Init+0xd4>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3301      	adds	r3, #1
 800313e:	e009      	b.n	8003154 <HAL_I2C_Init+0xe8>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	4a69      	ldr	r2, [pc, #420]	@ (80032f0 <HAL_I2C_Init+0x284>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	3301      	adds	r3, #1
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	430b      	orrs	r3, r1
 800315a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003166:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	495c      	ldr	r1, [pc, #368]	@ (80032e0 <HAL_I2C_Init+0x274>)
 8003170:	428b      	cmp	r3, r1
 8003172:	d819      	bhi.n	80031a8 <HAL_I2C_Init+0x13c>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e59      	subs	r1, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003188:	400b      	ands	r3, r1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_I2C_Init+0x138>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e59      	subs	r1, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fbb1 f3f3 	udiv	r3, r1, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	e051      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 80031a4:	2304      	movs	r3, #4
 80031a6:	e04f      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d111      	bne.n	80031d4 <HAL_I2C_Init+0x168>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e58      	subs	r0, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e012      	b.n	80031fa <HAL_I2C_Init+0x18e>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e58      	subs	r0, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	0099      	lsls	r1, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Init+0x196>
 80031fe:	2301      	movs	r3, #1
 8003200:	e022      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10e      	bne.n	8003228 <HAL_I2C_Init+0x1bc>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1e58      	subs	r0, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	440b      	add	r3, r1
 8003218:	fbb0 f3f3 	udiv	r3, r0, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003226:	e00f      	b.n	8003248 <HAL_I2C_Init+0x1dc>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	0099      	lsls	r1, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	6809      	ldr	r1, [r1, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003276:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6911      	ldr	r1, [r2, #16]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68d2      	ldr	r2, [r2, #12]
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	000186a0 	.word	0x000186a0
 80032e4:	001e847f 	.word	0x001e847f
 80032e8:	003d08ff 	.word	0x003d08ff
 80032ec:	431bde83 	.word	0x431bde83
 80032f0:	10624dd3 	.word	0x10624dd3

080032f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e267      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d075      	beq.n	80033fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003312:	4b88      	ldr	r3, [pc, #544]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b04      	cmp	r3, #4
 800331c:	d00c      	beq.n	8003338 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b85      	ldr	r3, [pc, #532]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003326:	2b08      	cmp	r3, #8
 8003328:	d112      	bne.n	8003350 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332a:	4b82      	ldr	r3, [pc, #520]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003336:	d10b      	bne.n	8003350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	4b7e      	ldr	r3, [pc, #504]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d05b      	beq.n	80033fc <HAL_RCC_OscConfig+0x108>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d157      	bne.n	80033fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e242      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d106      	bne.n	8003368 <HAL_RCC_OscConfig+0x74>
 800335a:	4b76      	ldr	r3, [pc, #472]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a75      	ldr	r2, [pc, #468]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xb0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x98>
 8003372:	4b70      	ldr	r3, [pc, #448]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6f      	ldr	r2, [pc, #444]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6d      	ldr	r3, [pc, #436]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6c      	ldr	r2, [pc, #432]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xb0>
 800338c:	4b69      	ldr	r3, [pc, #420]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a68      	ldr	r2, [pc, #416]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b66      	ldr	r3, [pc, #408]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a65      	ldr	r2, [pc, #404]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7ff f89e 	bl	80024ec <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7ff f89a 	bl	80024ec <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e207      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xc0>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff f88a 	bl	80024ec <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7ff f886 	bl	80024ec <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1f3      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b51      	ldr	r3, [pc, #324]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0xe8>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d063      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800340a:	4b4a      	ldr	r3, [pc, #296]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003416:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b44      	ldr	r3, [pc, #272]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b41      	ldr	r3, [pc, #260]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x152>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c7      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4937      	ldr	r1, [pc, #220]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7ff f83f 	bl	80024ec <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7ff f83b 	bl	80024ec <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1a8      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4925      	ldr	r1, [pc, #148]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_RCC_OscConfig+0x244>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7ff f81e 	bl	80024ec <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7ff f81a 	bl	80024ec <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e187      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d036      	beq.n	800354c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b15      	ldr	r3, [pc, #84]	@ (800353c <HAL_RCC_OscConfig+0x248>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe fffe 	bl	80024ec <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe fffa 	bl	80024ec <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e167      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_RCC_OscConfig+0x240>)
 8003508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x200>
 8003512:	e01b      	b.n	800354c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003514:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_RCC_OscConfig+0x248>)
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fe ffe7 	bl	80024ec <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	e00e      	b.n	8003540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003522:	f7fe ffe3 	bl	80024ec <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d907      	bls.n	8003540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e150      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
 8003534:	40023800 	.word	0x40023800
 8003538:	42470000 	.word	0x42470000
 800353c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b88      	ldr	r3, [pc, #544]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ea      	bne.n	8003522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8097 	beq.w	8003688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b81      	ldr	r3, [pc, #516]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	4b7d      	ldr	r3, [pc, #500]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	4a7c      	ldr	r2, [pc, #496]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003578:	6413      	str	r3, [r2, #64]	@ 0x40
 800357a:	4b7a      	ldr	r3, [pc, #488]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003586:	2301      	movs	r3, #1
 8003588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358a:	4b77      	ldr	r3, [pc, #476]	@ (8003768 <HAL_RCC_OscConfig+0x474>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d118      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003596:	4b74      	ldr	r3, [pc, #464]	@ (8003768 <HAL_RCC_OscConfig+0x474>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a73      	ldr	r2, [pc, #460]	@ (8003768 <HAL_RCC_OscConfig+0x474>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7fe ffa3 	bl	80024ec <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035aa:	f7fe ff9f 	bl	80024ec <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e10c      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003768 <HAL_RCC_OscConfig+0x474>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x2ea>
 80035d0:	4b64      	ldr	r3, [pc, #400]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	4a63      	ldr	r2, [pc, #396]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	@ 0x70
 80035dc:	e01c      	b.n	8003618 <HAL_RCC_OscConfig+0x324>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x30c>
 80035e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0x324>
 8003600:	4b58      	ldr	r3, [pc, #352]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003604:	4a57      	ldr	r2, [pc, #348]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	6713      	str	r3, [r2, #112]	@ 0x70
 800360c:	4b55      	ldr	r3, [pc, #340]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	4a54      	ldr	r2, [pc, #336]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003612:	f023 0304 	bic.w	r3, r3, #4
 8003616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d015      	beq.n	800364c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fe ff64 	bl	80024ec <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fe ff60 	bl	80024ec <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e0cb      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	4b49      	ldr	r3, [pc, #292]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ee      	beq.n	8003628 <HAL_RCC_OscConfig+0x334>
 800364a:	e014      	b.n	8003676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364c:	f7fe ff4e 	bl	80024ec <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	e00a      	b.n	800366a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fe ff4a 	bl	80024ec <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0b5      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	4b3e      	ldr	r3, [pc, #248]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ee      	bne.n	8003654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4b39      	ldr	r3, [pc, #228]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	4a38      	ldr	r2, [pc, #224]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a1 	beq.w	80037d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003692:	4b34      	ldr	r3, [pc, #208]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d05c      	beq.n	8003758 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d141      	bne.n	800372a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b31      	ldr	r3, [pc, #196]	@ (800376c <HAL_RCC_OscConfig+0x478>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe ff1e 	bl	80024ec <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fe ff1a 	bl	80024ec <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e087      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	491b      	ldr	r1, [pc, #108]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x478>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fe fef3 	bl	80024ec <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe feef 	bl	80024ec <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e05c      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x416>
 8003728:	e054      	b.n	80037d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b10      	ldr	r3, [pc, #64]	@ (800376c <HAL_RCC_OscConfig+0x478>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fedc 	bl	80024ec <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fed8 	bl	80024ec <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e045      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_RCC_OscConfig+0x470>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x444>
 8003756:	e03d      	b.n	80037d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d107      	bne.n	8003770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e038      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
 8003764:	40023800 	.word	0x40023800
 8003768:	40007000 	.word	0x40007000
 800376c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003770:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x4ec>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d028      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d121      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d11a      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037a0:	4013      	ands	r3, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d111      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	3b01      	subs	r3, #1
 80037ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800

080037e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0cc      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b68      	ldr	r3, [pc, #416]	@ (800399c <HAL_RCC_ClockConfig+0x1b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d90c      	bls.n	8003820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b65      	ldr	r3, [pc, #404]	@ (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b63      	ldr	r3, [pc, #396]	@ (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0b8      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003838:	4b59      	ldr	r3, [pc, #356]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a58      	ldr	r2, [pc, #352]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003850:	4b53      	ldr	r3, [pc, #332]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a52      	ldr	r2, [pc, #328]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800385a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	494d      	ldr	r1, [pc, #308]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d044      	beq.n	8003904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b47      	ldr	r3, [pc, #284]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d119      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e07f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	4b3f      	ldr	r3, [pc, #252]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e067      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c2:	4b37      	ldr	r3, [pc, #220]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4934      	ldr	r1, [pc, #208]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d4:	f7fe fe0a 	bl	80024ec <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	e00a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038dc:	f7fe fe06 	bl	80024ec <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e04f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 020c 	and.w	r2, r3, #12
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	429a      	cmp	r2, r3
 8003902:	d1eb      	bne.n	80038dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003904:	4b25      	ldr	r3, [pc, #148]	@ (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d20c      	bcs.n	800392c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b22      	ldr	r3, [pc, #136]	@ (800399c <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e032      	b.n	8003992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b19      	ldr	r3, [pc, #100]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4916      	ldr	r1, [pc, #88]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003956:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	490e      	ldr	r1, [pc, #56]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800396a:	f000 f821 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	490a      	ldr	r1, [pc, #40]	@ (80039a4 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fd6a 	bl	8002464 <HAL_InitTick>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023c00 	.word	0x40023c00
 80039a0:	40023800 	.word	0x40023800
 80039a4:	0800a9f0 	.word	0x0800a9f0
 80039a8:	20000004 	.word	0x20000004
 80039ac:	20000008 	.word	0x20000008

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b4:	b094      	sub	sp, #80	@ 0x50
 80039b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c8:	4b79      	ldr	r3, [pc, #484]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d00d      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x40>
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	f200 80e1 	bhi.w	8003b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x34>
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x3a>
 80039e2:	e0db      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b73      	ldr	r3, [pc, #460]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e8:	e0db      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ea:	4b73      	ldr	r3, [pc, #460]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ee:	e0d8      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f0:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fa:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d063      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a22:	4622      	mov	r2, r4
 8003a24:	462b      	mov	r3, r5
 8003a26:	f04f 0000 	mov.w	r0, #0
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	0159      	lsls	r1, r3, #5
 8003a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a34:	0150      	lsls	r0, r2, #5
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	1a51      	subs	r1, r2, r1
 8003a3e:	6139      	str	r1, [r7, #16]
 8003a40:	4629      	mov	r1, r5
 8003a42:	eb63 0301 	sbc.w	r3, r3, r1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a54:	4659      	mov	r1, fp
 8003a56:	018b      	lsls	r3, r1, #6
 8003a58:	4651      	mov	r1, sl
 8003a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a5e:	4651      	mov	r1, sl
 8003a60:	018a      	lsls	r2, r1, #6
 8003a62:	4651      	mov	r1, sl
 8003a64:	ebb2 0801 	subs.w	r8, r2, r1
 8003a68:	4659      	mov	r1, fp
 8003a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a82:	4690      	mov	r8, r2
 8003a84:	4699      	mov	r9, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	eb18 0303 	adds.w	r3, r8, r3
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	462b      	mov	r3, r5
 8003a90:	eb49 0303 	adc.w	r3, r9, r3
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	024b      	lsls	r3, r1, #9
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aac:	4621      	mov	r1, r4
 8003aae:	024a      	lsls	r2, r1, #9
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ac0:	f7fd f8fa 	bl	8000cb8 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4613      	mov	r3, r2
 8003aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003acc:	e058      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ace:	4b38      	ldr	r3, [pc, #224]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	099b      	lsrs	r3, r3, #6
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4611      	mov	r1, r2
 8003ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	f04f 0000 	mov.w	r0, #0
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	0159      	lsls	r1, r3, #5
 8003af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afa:	0150      	lsls	r0, r2, #5
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4641      	mov	r1, r8
 8003b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b06:	4649      	mov	r1, r9
 8003b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b20:	ebb2 040a 	subs.w	r4, r2, sl
 8003b24:	eb63 050b 	sbc.w	r5, r3, fp
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	00eb      	lsls	r3, r5, #3
 8003b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b36:	00e2      	lsls	r2, r4, #3
 8003b38:	4614      	mov	r4, r2
 8003b3a:	461d      	mov	r5, r3
 8003b3c:	4643      	mov	r3, r8
 8003b3e:	18e3      	adds	r3, r4, r3
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	464b      	mov	r3, r9
 8003b44:	eb45 0303 	adc.w	r3, r5, r3
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b56:	4629      	mov	r1, r5
 8003b58:	028b      	lsls	r3, r1, #10
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b60:	4621      	mov	r1, r4
 8003b62:	028a      	lsls	r2, r1, #10
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	61fa      	str	r2, [r7, #28]
 8003b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b74:	f7fd f8a0 	bl	8000cb8 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3750      	adds	r7, #80	@ 0x50
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	00f42400 	.word	0x00f42400
 8003bb8:	007a1200 	.word	0x007a1200

08003bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd8:	f7ff fff0 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	0a9b      	lsrs	r3, r3, #10
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4903      	ldr	r1, [pc, #12]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	0800aa00 	.word	0x0800aa00

08003bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c00:	f7ff ffdc 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0b5b      	lsrs	r3, r3, #13
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4903      	ldr	r1, [pc, #12]	@ (8003c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	0800aa00 	.word	0x0800aa00

08003c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07b      	b.n	8003d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c46:	d009      	beq.n	8003c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61da      	str	r2, [r3, #28]
 8003c4e:	e005      	b.n	8003c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fdde 	bl	8001838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce0:	ea42 0103 	orr.w	r1, r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0104 	and.w	r1, r3, #4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	f003 0210 	and.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e041      	b.n	8003dcc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7fe f8d7 	bl	8001f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f000 fcd3 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e041      	b.n	8003e6a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f839 	bl	8003e72 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 fc84 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e041      	b.n	8003f1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fe f895 	bl	8001fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f000 fc2b 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e041      	b.n	8003fba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f839 	bl	8003fc2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 fbdc 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01b      	beq.n	800403a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0202 	mvn.w	r2, #2
 800400a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fb5e 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 8004026:	e005      	b.n	8004034 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fb50 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fb61 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01b      	beq.n	8004086 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0204 	mvn.w	r2, #4
 8004056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fb38 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 8004072:	e005      	b.n	8004080 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb2a 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fb3b 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d020      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01b      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0208 	mvn.w	r2, #8
 80040a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2204      	movs	r2, #4
 80040a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fb12 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 80040be:	e005      	b.n	80040cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fb04 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fb15 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01b      	beq.n	800411e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0210 	mvn.w	r2, #16
 80040ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2208      	movs	r2, #8
 80040f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 faec 	bl	80046e2 <HAL_TIM_IC_CaptureCallback>
 800410a:	e005      	b.n	8004118 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fade 	bl	80046ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 faef 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00c      	beq.n	8004142 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0201 	mvn.w	r2, #1
 800413a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fabc 	bl	80046ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800415e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 ff77 	bl	8005054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00c      	beq.n	800418a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fac0 	bl	800470a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00c      	beq.n	80041ae <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0220 	mvn.w	r2, #32
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 ff49 	bl	8005040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e048      	b.n	8004268 <HAL_TIM_OC_ConfigChannel+0xb0>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d839      	bhi.n	8004258 <HAL_TIM_OC_ConfigChannel+0xa0>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	08004221 	.word	0x08004221
 80041f0:	08004259 	.word	0x08004259
 80041f4:	08004259 	.word	0x08004259
 80041f8:	08004259 	.word	0x08004259
 80041fc:	0800422f 	.word	0x0800422f
 8004200:	08004259 	.word	0x08004259
 8004204:	08004259 	.word	0x08004259
 8004208:	08004259 	.word	0x08004259
 800420c:	0800423d 	.word	0x0800423d
 8004210:	08004259 	.word	0x08004259
 8004214:	08004259 	.word	0x08004259
 8004218:	08004259 	.word	0x08004259
 800421c:	0800424b 	.word	0x0800424b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fb06 	bl	8004838 <TIM_OC1_SetConfig>
      break;
 800422c:	e017      	b.n	800425e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fb65 	bl	8004904 <TIM_OC2_SetConfig>
      break;
 800423a:	e010      	b.n	800425e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fbca 	bl	80049dc <TIM_OC3_SetConfig>
      break;
 8004248:	e009      	b.n	800425e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fc2d 	bl	8004ab0 <TIM_OC4_SetConfig>
      break;
 8004256:	e002      	b.n	800425e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_TIM_IC_ConfigChannel+0x1e>
 800428a:	2302      	movs	r3, #2
 800428c:	e088      	b.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11b      	bne.n	80042d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80042ac:	f000 fc50 	bl	8004b50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 020c 	bic.w	r2, r2, #12
 80042be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6999      	ldr	r1, [r3, #24]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	619a      	str	r2, [r3, #24]
 80042d2:	e060      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d11c      	bne.n	8004314 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80042ea:	f000 fcc8 	bl	8004c7e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6999      	ldr	r1, [r3, #24]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	021a      	lsls	r2, r3, #8
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	619a      	str	r2, [r3, #24]
 8004312:	e040      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d11b      	bne.n	8004352 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800432a:	f000 fd15 	bl	8004d58 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 020c 	bic.w	r2, r2, #12
 800433c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	61da      	str	r2, [r3, #28]
 8004350:	e021      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d11c      	bne.n	8004392 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004368:	f000 fd32 	bl	8004dd0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800437a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69d9      	ldr	r1, [r3, #28]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	61da      	str	r2, [r3, #28]
 8004390:	e001      	b.n	8004396 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800439e:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0ae      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	f200 809f 	bhi.w	8004514 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043d6:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004515 	.word	0x08004515
 80043e4:	08004515 	.word	0x08004515
 80043e8:	08004515 	.word	0x08004515
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004515 	.word	0x08004515
 80043f4:	08004515 	.word	0x08004515
 80043f8:	08004515 	.word	0x08004515
 80043fc:	08004493 	.word	0x08004493
 8004400:	08004515 	.word	0x08004515
 8004404:	08004515 	.word	0x08004515
 8004408:	08004515 	.word	0x08004515
 800440c:	080044d3 	.word	0x080044d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fa0e 	bl	8004838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0208 	orr.w	r2, r2, #8
 800442a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6999      	ldr	r1, [r3, #24]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]
      break;
 800444e:	e064      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fa54 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800446a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6999      	ldr	r1, [r3, #24]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	619a      	str	r2, [r3, #24]
      break;
 8004490:	e043      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fa9f 	bl	80049dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0208 	orr.w	r2, r2, #8
 80044ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0204 	bic.w	r2, r2, #4
 80044bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69d9      	ldr	r1, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	61da      	str	r2, [r3, #28]
      break;
 80044d0:	e023      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fae9 	bl	8004ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	021a      	lsls	r2, r3, #8
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	61da      	str	r2, [r3, #28]
      break;
 8004512:	e002      	b.n	800451a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIM_ConfigClockSource+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e0b4      	b.n	80046b2 <HAL_TIM_ConfigClockSource+0x186>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800456e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004580:	d03e      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0xd4>
 8004582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004586:	f200 8087 	bhi.w	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458e:	f000 8086 	beq.w	800469e <HAL_TIM_ConfigClockSource+0x172>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004596:	d87f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b70      	cmp	r3, #112	@ 0x70
 800459a:	d01a      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0xa6>
 800459c:	2b70      	cmp	r3, #112	@ 0x70
 800459e:	d87b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b60      	cmp	r3, #96	@ 0x60
 80045a2:	d050      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x11a>
 80045a4:	2b60      	cmp	r3, #96	@ 0x60
 80045a6:	d877      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b50      	cmp	r3, #80	@ 0x50
 80045aa:	d03c      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xfa>
 80045ac:	2b50      	cmp	r3, #80	@ 0x50
 80045ae:	d873      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b40      	cmp	r3, #64	@ 0x40
 80045b2:	d058      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x13a>
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	d86f      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b30      	cmp	r3, #48	@ 0x30
 80045ba:	d064      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b30      	cmp	r3, #48	@ 0x30
 80045be:	d86b      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d060      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d867      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d05c      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d05a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	e062      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	f000 fc4d 	bl	8004e80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	609a      	str	r2, [r3, #8]
      break;
 80045fe:	e04f      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	f000 fc36 	bl	8004e80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004622:	609a      	str	r2, [r3, #8]
      break;
 8004624:	e03c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 faf4 	bl	8004c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2150      	movs	r1, #80	@ 0x50
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fc03 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004644:	e02c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004652:	461a      	mov	r2, r3
 8004654:	f000 fb50 	bl	8004cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2160      	movs	r1, #96	@ 0x60
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fbf3 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004664:	e01c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	461a      	mov	r2, r3
 8004674:	f000 fad4 	bl	8004c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2140      	movs	r1, #64	@ 0x40
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fbe3 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004684:	e00c      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f000 fbda 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004696:	e003      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e000      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800469e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3a      	ldr	r2, [pc, #232]	@ (800481c <TIM_Base_SetConfig+0xfc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00f      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a37      	ldr	r2, [pc, #220]	@ (8004820 <TIM_Base_SetConfig+0x100>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a36      	ldr	r2, [pc, #216]	@ (8004824 <TIM_Base_SetConfig+0x104>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0x38>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a35      	ldr	r2, [pc, #212]	@ (8004828 <TIM_Base_SetConfig+0x108>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2b      	ldr	r2, [pc, #172]	@ (800481c <TIM_Base_SetConfig+0xfc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a28      	ldr	r2, [pc, #160]	@ (8004820 <TIM_Base_SetConfig+0x100>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <TIM_Base_SetConfig+0x104>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a26      	ldr	r2, [pc, #152]	@ (8004828 <TIM_Base_SetConfig+0x108>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a25      	ldr	r2, [pc, #148]	@ (800482c <TIM_Base_SetConfig+0x10c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a24      	ldr	r2, [pc, #144]	@ (8004830 <TIM_Base_SetConfig+0x110>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a23      	ldr	r2, [pc, #140]	@ (8004834 <TIM_Base_SetConfig+0x114>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a0e      	ldr	r2, [pc, #56]	@ (800481c <TIM_Base_SetConfig+0xfc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d103      	bne.n	80047f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]
  }
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800

08004838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f023 0201 	bic.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 0302 	bic.w	r3, r3, #2
 8004880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1c      	ldr	r2, [pc, #112]	@ (8004900 <TIM_OC1_SetConfig+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10c      	bne.n	80048ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0308 	bic.w	r3, r3, #8
 800489a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <TIM_OC1_SetConfig+0xc8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40010000 	.word	0x40010000

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0210 	bic.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a1e      	ldr	r2, [pc, #120]	@ (80049d8 <TIM_OC2_SetConfig+0xd4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10d      	bne.n	8004980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a15      	ldr	r2, [pc, #84]	@ (80049d8 <TIM_OC2_SetConfig+0xd4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d113      	bne.n	80049b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800498e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000

080049dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <TIM_OC3_SetConfig+0xd0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10d      	bne.n	8004a56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a14      	ldr	r2, [pc, #80]	@ (8004aac <TIM_OC3_SetConfig+0xd0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d113      	bne.n	8004a86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40010000 	.word	0x40010000

08004ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a10      	ldr	r2, [pc, #64]	@ (8004b4c <TIM_OC4_SetConfig+0x9c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d109      	bne.n	8004b24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	019b      	lsls	r3, r3, #6
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	621a      	str	r2, [r3, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000

08004b50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f023 0201 	bic.w	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a24      	ldr	r2, [pc, #144]	@ (8004c0c <TIM_TI1_SetConfig+0xbc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b84:	d00f      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a21      	ldr	r2, [pc, #132]	@ (8004c10 <TIM_TI1_SetConfig+0xc0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a20      	ldr	r2, [pc, #128]	@ (8004c14 <TIM_TI1_SetConfig+0xc4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <TIM_TI1_SetConfig+0xc8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <TIM_TI1_SetConfig+0xcc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <TIM_TI1_SetConfig+0x5a>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <TIM_TI1_SetConfig+0x5c>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e003      	b.n	8004bca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f023 030a 	bic.w	r3, r3, #10
 8004be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f003 030a 	and.w	r3, r3, #10
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40014000 	.word	0x40014000

08004c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 030a 	bic.w	r3, r3, #10
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b087      	sub	sp, #28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0210 	bic.w	r2, r3, #16
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	621a      	str	r2, [r3, #32]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0210 	bic.w	r2, r3, #16
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	031b      	lsls	r3, r3, #12
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f023 0303 	bic.w	r3, r3, #3
 8004d84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004da8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	031b      	lsls	r3, r3, #12
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	031b      	lsls	r3, r3, #12
 8004e28:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e050      	b.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	@ (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f24:	d013      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a16      	ldr	r2, [pc, #88]	@ (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	@ (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a13      	ldr	r2, [pc, #76]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10c      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40014000 	.word	0x40014000

08004f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e03d      	b.n	8005034 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e042      	b.n	8005100 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd f8d2 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fdbd 	bl	8005c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	@ 0x28
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	d175      	bne.n	8005214 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_UART_Transmit+0x2c>
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e06e      	b.n	8005216 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2221      	movs	r2, #33	@ 0x21
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005146:	f7fd f9d1 	bl	80024ec <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005160:	d108      	bne.n	8005174 <HAL_UART_Transmit+0x6c>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e003      	b.n	800517c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800517c:	e02e      	b.n	80051dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fb1f 	bl	80057cc <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e03a      	b.n	8005216 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3302      	adds	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e007      	b.n	80051ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1cb      	bne.n	800517e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2140      	movs	r1, #64	@ 0x40
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 faeb 	bl	80057cc <UART_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e006      	b.n	8005216 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b20      	cmp	r3, #32
 8005236:	d112      	bne.n	800525e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Receive_IT+0x26>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e00b      	b.n	8005260 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	461a      	mov	r2, r3
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fb12 	bl	800587e <UART_Start_Receive_IT>
 800525a:	4603      	mov	r3, r0
 800525c:	e000      	b.n	8005260 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b0ba      	sub	sp, #232	@ 0xe8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005294:	2300      	movs	r3, #0
 8005296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800529a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <HAL_UART_IRQHandler+0x66>
 80052ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fbf2 	bl	8005ab0 <UART_Receive_IT>
      return;
 80052cc:	e25b      	b.n	8005786 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80de 	beq.w	8005494 <HAL_UART_IRQHandler+0x22c>
 80052d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80d1 	beq.w	8005494 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_UART_IRQHandler+0xae>
 80052fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530e:	f043 0201 	orr.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <HAL_UART_IRQHandler+0xd2>
 8005322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005332:	f043 0202 	orr.w	r2, r3, #2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <HAL_UART_IRQHandler+0xf6>
 8005346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005356:	f043 0204 	orr.w	r2, r3, #4
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d011      	beq.n	800538e <HAL_UART_IRQHandler+0x126>
 800536a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d105      	bne.n	8005382 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f043 0208 	orr.w	r2, r3, #8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 81f2 	beq.w	800577c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_UART_IRQHandler+0x14e>
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fb7d 	bl	8005ab0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <HAL_UART_IRQHandler+0x17a>
 80053da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d04f      	beq.n	8005482 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa85 	bl	80058f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f2:	2b40      	cmp	r3, #64	@ 0x40
 80053f4:	d141      	bne.n	800547a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3314      	adds	r3, #20
 80053fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800540c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3314      	adds	r3, #20
 800541e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005422:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800542e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800543a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1d9      	bne.n	80053f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d013      	beq.n	8005472 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	4a7e      	ldr	r2, [pc, #504]	@ (8005648 <HAL_UART_IRQHandler+0x3e0>)
 8005450:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd fc47 	bl	8002cea <HAL_DMA_Abort_IT>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800546c:	4610      	mov	r0, r2
 800546e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	e00e      	b.n	8005490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f994 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005478:	e00a      	b.n	8005490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f990 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	e006      	b.n	8005490 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f98c 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800548e:	e175      	b.n	800577c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	bf00      	nop
    return;
 8005492:	e173      	b.n	800577c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 814f 	bne.w	800573c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 8148 	beq.w	800573c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8141 	beq.w	800573c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054da:	2b40      	cmp	r3, #64	@ 0x40
 80054dc:	f040 80b6 	bne.w	800564c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8145 	beq.w	8005780 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054fe:	429a      	cmp	r2, r3
 8005500:	f080 813e 	bcs.w	8005780 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800550a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005516:	f000 8088 	beq.w	800562a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	330c      	adds	r3, #12
 8005520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005530:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005546:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800554a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005552:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800555e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1d9      	bne.n	800551a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3314      	adds	r3, #20
 8005586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800558a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800558e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005592:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800559c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e1      	bne.n	8005566 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e3      	bne.n	80055a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800560c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800560e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005612:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800561a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e3      	bne.n	80055e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	4618      	mov	r0, r3
 8005626:	f7fd faf0 	bl	8002c0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	b29b      	uxth	r3, r3
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8b7 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005646:	e09b      	b.n	8005780 <HAL_UART_IRQHandler+0x518>
 8005648:	080059b9 	.word	0x080059b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005654:	b29b      	uxth	r3, r3
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 808e 	beq.w	8005784 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8089 	beq.w	8005784 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005696:	647a      	str	r2, [r7, #68]	@ 0x44
 8005698:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800569c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e3      	bne.n	8005672 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e3      	bne.n	80056aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005714:	61fa      	str	r2, [r7, #28]
 8005716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	617b      	str	r3, [r7, #20]
   return(result);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e3      	bne.n	80056f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800572e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f83d 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800573a:	e023      	b.n	8005784 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	2b00      	cmp	r3, #0
 8005746:	d009      	beq.n	800575c <HAL_UART_IRQHandler+0x4f4>
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800574c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f943 	bl	80059e0 <UART_Transmit_IT>
    return;
 800575a:	e014      	b.n	8005786 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00e      	beq.n	8005786 <HAL_UART_IRQHandler+0x51e>
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800576c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f983 	bl	8005a80 <UART_EndTransmit_IT>
    return;
 800577a:	e004      	b.n	8005786 <HAL_UART_IRQHandler+0x51e>
    return;
 800577c:	bf00      	nop
 800577e:	e002      	b.n	8005786 <HAL_UART_IRQHandler+0x51e>
      return;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <HAL_UART_IRQHandler+0x51e>
      return;
 8005784:	bf00      	nop
  }
}
 8005786:	37e8      	adds	r7, #232	@ 0xe8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057dc:	e03b      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d037      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e6:	f7fc fe81 	bl	80024ec <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <UART_WaitOnFlagUntilTimeout+0x30>
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e03a      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d023      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0x8a>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b80      	cmp	r3, #128	@ 0x80
 8005812:	d020      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b40      	cmp	r3, #64	@ 0x40
 8005818:	d01d      	beq.n	8005856 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b08      	cmp	r3, #8
 8005826:	d116      	bne.n	8005856 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f857 	bl	80058f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2208      	movs	r2, #8
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e00f      	b.n	8005876 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	429a      	cmp	r2, r3
 8005872:	d0b4      	beq.n	80057de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	4613      	mov	r3, r2
 800588a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2222      	movs	r2, #34	@ 0x22
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0220 	orr.w	r2, r2, #32
 80058e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b095      	sub	sp, #84	@ 0x54
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800591a:	643a      	str	r2, [r7, #64]	@ 0x40
 800591c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e5      	bne.n	80058fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3314      	adds	r3, #20
 8005934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	61fb      	str	r3, [r7, #28]
   return(result);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800594e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005950:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	2b01      	cmp	r3, #1
 8005968:	d119      	bne.n	800599e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	60bb      	str	r3, [r7, #8]
   return(result);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0310 	bic.w	r3, r3, #16
 8005980:	647b      	str	r3, [r7, #68]	@ 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800598a:	61ba      	str	r2, [r7, #24]
 800598c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	613b      	str	r3, [r7, #16]
   return(result);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059ac:	bf00      	nop
 80059ae:	3754      	adds	r7, #84	@ 0x54
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fee4 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b21      	cmp	r3, #33	@ 0x21
 80059f2:	d13e      	bne.n	8005a72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fc:	d114      	bne.n	8005a28 <UART_Transmit_IT+0x48>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d110      	bne.n	8005a28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	1c9a      	adds	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	621a      	str	r2, [r3, #32]
 8005a26:	e008      	b.n	8005a3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6211      	str	r1, [r2, #32]
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4619      	mov	r1, r3
 8005a48:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fe73 	bl	800578c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08c      	sub	sp, #48	@ 0x30
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b22      	cmp	r3, #34	@ 0x22
 8005ac2:	f040 80ae 	bne.w	8005c22 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ace:	d117      	bne.n	8005b00 <UART_Receive_IT+0x50>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d113      	bne.n	8005b00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	1c9a      	adds	r2, r3, #2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005afe:	e026      	b.n	8005b4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b12:	d007      	beq.n	8005b24 <UART_Receive_IT+0x74>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <UART_Receive_IT+0x82>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e008      	b.n	8005b44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d15d      	bne.n	8005c1e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0220 	bic.w	r2, r2, #32
 8005b70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695a      	ldr	r2, [r3, #20]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d135      	bne.n	8005c14 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f023 0310 	bic.w	r3, r3, #16
 8005bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bce:	623a      	str	r2, [r7, #32]
 8005bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	69f9      	ldr	r1, [r7, #28]
 8005bd4:	6a3a      	ldr	r2, [r7, #32]
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e5      	bne.n	8005bae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d10a      	bne.n	8005c06 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fdd1 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
 8005c12:	e002      	b.n	8005c1a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fb fb4b 	bl	80012b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e002      	b.n	8005c24 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3730      	adds	r7, #48	@ 0x30
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c30:	b0c0      	sub	sp, #256	@ 0x100
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	68d9      	ldr	r1, [r3, #12]
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	ea40 0301 	orr.w	r3, r0, r1
 8005c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c84:	f021 010c 	bic.w	r1, r1, #12
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c92:	430b      	orrs	r3, r1
 8005c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca6:	6999      	ldr	r1, [r3, #24]
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	ea40 0301 	orr.w	r3, r0, r1
 8005cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b8f      	ldr	r3, [pc, #572]	@ (8005ef8 <UART_SetConfig+0x2cc>)
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d005      	beq.n	8005ccc <UART_SetConfig+0xa0>
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8005efc <UART_SetConfig+0x2d0>)
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d104      	bne.n	8005cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fd ff96 	bl	8003bfc <HAL_RCC_GetPCLK2Freq>
 8005cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cd4:	e003      	b.n	8005cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cd6:	f7fd ff7d 	bl	8003bd4 <HAL_RCC_GetPCLK1Freq>
 8005cda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce8:	f040 810c 	bne.w	8005f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cfe:	4622      	mov	r2, r4
 8005d00:	462b      	mov	r3, r5
 8005d02:	1891      	adds	r1, r2, r2
 8005d04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d06:	415b      	adcs	r3, r3
 8005d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d0e:	4621      	mov	r1, r4
 8005d10:	eb12 0801 	adds.w	r8, r2, r1
 8005d14:	4629      	mov	r1, r5
 8005d16:	eb43 0901 	adc.w	r9, r3, r1
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2e:	4690      	mov	r8, r2
 8005d30:	4699      	mov	r9, r3
 8005d32:	4623      	mov	r3, r4
 8005d34:	eb18 0303 	adds.w	r3, r8, r3
 8005d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d3c:	462b      	mov	r3, r5
 8005d3e:	eb49 0303 	adc.w	r3, r9, r3
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	18db      	adds	r3, r3, r3
 8005d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d60:	4613      	mov	r3, r2
 8005d62:	eb42 0303 	adc.w	r3, r2, r3
 8005d66:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d70:	f7fa ffa2 	bl	8000cb8 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4b61      	ldr	r3, [pc, #388]	@ (8005f00 <UART_SetConfig+0x2d4>)
 8005d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	011c      	lsls	r4, r3, #4
 8005d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	1891      	adds	r1, r2, r2
 8005d9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d9c:	415b      	adcs	r3, r3
 8005d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005da4:	4641      	mov	r1, r8
 8005da6:	eb12 0a01 	adds.w	sl, r2, r1
 8005daa:	4649      	mov	r1, r9
 8005dac:	eb43 0b01 	adc.w	fp, r3, r1
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc4:	4692      	mov	sl, r2
 8005dc6:	469b      	mov	fp, r3
 8005dc8:	4643      	mov	r3, r8
 8005dca:	eb1a 0303 	adds.w	r3, sl, r3
 8005dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8005dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005de8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005df0:	460b      	mov	r3, r1
 8005df2:	18db      	adds	r3, r3, r3
 8005df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005df6:	4613      	mov	r3, r2
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e06:	f7fa ff57 	bl	8000cb8 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4b3b      	ldr	r3, [pc, #236]	@ (8005f00 <UART_SetConfig+0x2d4>)
 8005e12:	fba3 2301 	umull	r2, r3, r3, r1
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	2264      	movs	r2, #100	@ 0x64
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	1acb      	subs	r3, r1, r3
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e26:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <UART_SetConfig+0x2d4>)
 8005e28:	fba3 2302 	umull	r2, r3, r3, r2
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e34:	441c      	add	r4, r3
 8005e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e50:	415b      	adcs	r3, r3
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e58:	4641      	mov	r1, r8
 8005e5a:	1851      	adds	r1, r2, r1
 8005e5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e5e:	4649      	mov	r1, r9
 8005e60:	414b      	adcs	r3, r1
 8005e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e70:	4659      	mov	r1, fp
 8005e72:	00cb      	lsls	r3, r1, #3
 8005e74:	4651      	mov	r1, sl
 8005e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	00ca      	lsls	r2, r1, #3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	4642      	mov	r2, r8
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	460a      	mov	r2, r1
 8005e90:	eb42 0303 	adc.w	r3, r2, r3
 8005e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005eac:	460b      	mov	r3, r1
 8005eae:	18db      	adds	r3, r3, r3
 8005eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	eb42 0303 	adc.w	r3, r2, r3
 8005eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ec2:	f7fa fef9 	bl	8000cb8 <__aeabi_uldivmod>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <UART_SetConfig+0x2d4>)
 8005ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	2164      	movs	r1, #100	@ 0x64
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	3332      	adds	r3, #50	@ 0x32
 8005ede:	4a08      	ldr	r2, [pc, #32]	@ (8005f00 <UART_SetConfig+0x2d4>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	f003 0207 	and.w	r2, r3, #7
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4422      	add	r2, r4
 8005ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ef4:	e106      	b.n	8006104 <UART_SetConfig+0x4d8>
 8005ef6:	bf00      	nop
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	40011400 	.word	0x40011400
 8005f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f16:	4642      	mov	r2, r8
 8005f18:	464b      	mov	r3, r9
 8005f1a:	1891      	adds	r1, r2, r2
 8005f1c:	6239      	str	r1, [r7, #32]
 8005f1e:	415b      	adcs	r3, r3
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f26:	4641      	mov	r1, r8
 8005f28:	1854      	adds	r4, r2, r1
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	eb43 0501 	adc.w	r5, r3, r1
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	00eb      	lsls	r3, r5, #3
 8005f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f3e:	00e2      	lsls	r2, r4, #3
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	4643      	mov	r3, r8
 8005f46:	18e3      	adds	r3, r4, r3
 8005f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	eb45 0303 	adc.w	r3, r5, r3
 8005f52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f72:	4629      	mov	r1, r5
 8005f74:	008b      	lsls	r3, r1, #2
 8005f76:	4621      	mov	r1, r4
 8005f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	008a      	lsls	r2, r1, #2
 8005f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f84:	f7fa fe98 	bl	8000cb8 <__aeabi_uldivmod>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4b60      	ldr	r3, [pc, #384]	@ (8006110 <UART_SetConfig+0x4e4>)
 8005f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	011c      	lsls	r4, r3, #4
 8005f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	61b9      	str	r1, [r7, #24]
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fb8:	4641      	mov	r1, r8
 8005fba:	1851      	adds	r1, r2, r1
 8005fbc:	6139      	str	r1, [r7, #16]
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	414b      	adcs	r3, r1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fd0:	4659      	mov	r1, fp
 8005fd2:	00cb      	lsls	r3, r1, #3
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fda:	4651      	mov	r1, sl
 8005fdc:	00ca      	lsls	r2, r1, #3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fec:	464b      	mov	r3, r9
 8005fee:	460a      	mov	r2, r1
 8005ff0:	eb42 0303 	adc.w	r3, r2, r3
 8005ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006002:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006010:	4649      	mov	r1, r9
 8006012:	008b      	lsls	r3, r1, #2
 8006014:	4641      	mov	r1, r8
 8006016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800601a:	4641      	mov	r1, r8
 800601c:	008a      	lsls	r2, r1, #2
 800601e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006022:	f7fa fe49 	bl	8000cb8 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4611      	mov	r1, r2
 800602c:	4b38      	ldr	r3, [pc, #224]	@ (8006110 <UART_SetConfig+0x4e4>)
 800602e:	fba3 2301 	umull	r2, r3, r3, r1
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	2264      	movs	r2, #100	@ 0x64
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	1acb      	subs	r3, r1, r3
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	3332      	adds	r3, #50	@ 0x32
 8006040:	4a33      	ldr	r2, [pc, #204]	@ (8006110 <UART_SetConfig+0x4e4>)
 8006042:	fba2 2303 	umull	r2, r3, r2, r3
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800604c:	441c      	add	r4, r3
 800604e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006052:	2200      	movs	r2, #0
 8006054:	673b      	str	r3, [r7, #112]	@ 0x70
 8006056:	677a      	str	r2, [r7, #116]	@ 0x74
 8006058:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	1891      	adds	r1, r2, r2
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	415b      	adcs	r3, r3
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800606c:	4641      	mov	r1, r8
 800606e:	1851      	adds	r1, r2, r1
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	4649      	mov	r1, r9
 8006074:	414b      	adcs	r3, r1
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006084:	4659      	mov	r1, fp
 8006086:	00cb      	lsls	r3, r1, #3
 8006088:	4651      	mov	r1, sl
 800608a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800608e:	4651      	mov	r1, sl
 8006090:	00ca      	lsls	r2, r1, #3
 8006092:	4610      	mov	r0, r2
 8006094:	4619      	mov	r1, r3
 8006096:	4603      	mov	r3, r0
 8006098:	4642      	mov	r2, r8
 800609a:	189b      	adds	r3, r3, r2
 800609c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800609e:	464b      	mov	r3, r9
 80060a0:	460a      	mov	r2, r1
 80060a2:	eb42 0303 	adc.w	r3, r2, r3
 80060a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80060b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060c0:	4649      	mov	r1, r9
 80060c2:	008b      	lsls	r3, r1, #2
 80060c4:	4641      	mov	r1, r8
 80060c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ca:	4641      	mov	r1, r8
 80060cc:	008a      	lsls	r2, r1, #2
 80060ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060d2:	f7fa fdf1 	bl	8000cb8 <__aeabi_uldivmod>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <UART_SetConfig+0x4e4>)
 80060dc:	fba3 1302 	umull	r1, r3, r3, r2
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	2164      	movs	r1, #100	@ 0x64
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	3332      	adds	r3, #50	@ 0x32
 80060ee:	4a08      	ldr	r2, [pc, #32]	@ (8006110 <UART_SetConfig+0x4e4>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4422      	add	r2, r4
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800610a:	46bd      	mov	sp, r7
 800610c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006110:	51eb851f 	.word	0x51eb851f

08006114 <atof>:
 8006114:	2100      	movs	r1, #0
 8006116:	f000 be09 	b.w	8006d2c <strtod>

0800611a <sulp>:
 800611a:	b570      	push	{r4, r5, r6, lr}
 800611c:	4604      	mov	r4, r0
 800611e:	460d      	mov	r5, r1
 8006120:	ec45 4b10 	vmov	d0, r4, r5
 8006124:	4616      	mov	r6, r2
 8006126:	f003 fceb 	bl	8009b00 <__ulp>
 800612a:	ec51 0b10 	vmov	r0, r1, d0
 800612e:	b17e      	cbz	r6, 8006150 <sulp+0x36>
 8006130:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006134:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006138:	2b00      	cmp	r3, #0
 800613a:	dd09      	ble.n	8006150 <sulp+0x36>
 800613c:	051b      	lsls	r3, r3, #20
 800613e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006142:	2400      	movs	r4, #0
 8006144:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006148:	4622      	mov	r2, r4
 800614a:	462b      	mov	r3, r5
 800614c:	f7fa fa6c 	bl	8000628 <__aeabi_dmul>
 8006150:	ec41 0b10 	vmov	d0, r0, r1
 8006154:	bd70      	pop	{r4, r5, r6, pc}
	...

08006158 <_strtod_l>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	b09f      	sub	sp, #124	@ 0x7c
 800615e:	460c      	mov	r4, r1
 8006160:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006162:	2200      	movs	r2, #0
 8006164:	921a      	str	r2, [sp, #104]	@ 0x68
 8006166:	9005      	str	r0, [sp, #20]
 8006168:	f04f 0a00 	mov.w	sl, #0
 800616c:	f04f 0b00 	mov.w	fp, #0
 8006170:	460a      	mov	r2, r1
 8006172:	9219      	str	r2, [sp, #100]	@ 0x64
 8006174:	7811      	ldrb	r1, [r2, #0]
 8006176:	292b      	cmp	r1, #43	@ 0x2b
 8006178:	d04a      	beq.n	8006210 <_strtod_l+0xb8>
 800617a:	d838      	bhi.n	80061ee <_strtod_l+0x96>
 800617c:	290d      	cmp	r1, #13
 800617e:	d832      	bhi.n	80061e6 <_strtod_l+0x8e>
 8006180:	2908      	cmp	r1, #8
 8006182:	d832      	bhi.n	80061ea <_strtod_l+0x92>
 8006184:	2900      	cmp	r1, #0
 8006186:	d03b      	beq.n	8006200 <_strtod_l+0xa8>
 8006188:	2200      	movs	r2, #0
 800618a:	920e      	str	r2, [sp, #56]	@ 0x38
 800618c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800618e:	782a      	ldrb	r2, [r5, #0]
 8006190:	2a30      	cmp	r2, #48	@ 0x30
 8006192:	f040 80b2 	bne.w	80062fa <_strtod_l+0x1a2>
 8006196:	786a      	ldrb	r2, [r5, #1]
 8006198:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800619c:	2a58      	cmp	r2, #88	@ 0x58
 800619e:	d16e      	bne.n	800627e <_strtod_l+0x126>
 80061a0:	9302      	str	r3, [sp, #8]
 80061a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4a8f      	ldr	r2, [pc, #572]	@ (80063e8 <_strtod_l+0x290>)
 80061ac:	9805      	ldr	r0, [sp, #20]
 80061ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80061b0:	a919      	add	r1, sp, #100	@ 0x64
 80061b2:	f002 fd9f 	bl	8008cf4 <__gethex>
 80061b6:	f010 060f 	ands.w	r6, r0, #15
 80061ba:	4604      	mov	r4, r0
 80061bc:	d005      	beq.n	80061ca <_strtod_l+0x72>
 80061be:	2e06      	cmp	r6, #6
 80061c0:	d128      	bne.n	8006214 <_strtod_l+0xbc>
 80061c2:	3501      	adds	r5, #1
 80061c4:	2300      	movs	r3, #0
 80061c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80061c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80061ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f040 858e 	bne.w	8006cee <_strtod_l+0xb96>
 80061d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061d4:	b1cb      	cbz	r3, 800620a <_strtod_l+0xb2>
 80061d6:	4652      	mov	r2, sl
 80061d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80061dc:	ec43 2b10 	vmov	d0, r2, r3
 80061e0:	b01f      	add	sp, #124	@ 0x7c
 80061e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e6:	2920      	cmp	r1, #32
 80061e8:	d1ce      	bne.n	8006188 <_strtod_l+0x30>
 80061ea:	3201      	adds	r2, #1
 80061ec:	e7c1      	b.n	8006172 <_strtod_l+0x1a>
 80061ee:	292d      	cmp	r1, #45	@ 0x2d
 80061f0:	d1ca      	bne.n	8006188 <_strtod_l+0x30>
 80061f2:	2101      	movs	r1, #1
 80061f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80061f6:	1c51      	adds	r1, r2, #1
 80061f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80061fa:	7852      	ldrb	r2, [r2, #1]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d1c5      	bne.n	800618c <_strtod_l+0x34>
 8006200:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006202:	9419      	str	r4, [sp, #100]	@ 0x64
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 8570 	bne.w	8006cea <_strtod_l+0xb92>
 800620a:	4652      	mov	r2, sl
 800620c:	465b      	mov	r3, fp
 800620e:	e7e5      	b.n	80061dc <_strtod_l+0x84>
 8006210:	2100      	movs	r1, #0
 8006212:	e7ef      	b.n	80061f4 <_strtod_l+0x9c>
 8006214:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006216:	b13a      	cbz	r2, 8006228 <_strtod_l+0xd0>
 8006218:	2135      	movs	r1, #53	@ 0x35
 800621a:	a81c      	add	r0, sp, #112	@ 0x70
 800621c:	f003 fd6a 	bl	8009cf4 <__copybits>
 8006220:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006222:	9805      	ldr	r0, [sp, #20]
 8006224:	f003 f940 	bl	80094a8 <_Bfree>
 8006228:	3e01      	subs	r6, #1
 800622a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800622c:	2e04      	cmp	r6, #4
 800622e:	d806      	bhi.n	800623e <_strtod_l+0xe6>
 8006230:	e8df f006 	tbb	[pc, r6]
 8006234:	201d0314 	.word	0x201d0314
 8006238:	14          	.byte	0x14
 8006239:	00          	.byte	0x00
 800623a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800623e:	05e1      	lsls	r1, r4, #23
 8006240:	bf48      	it	mi
 8006242:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006246:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800624a:	0d1b      	lsrs	r3, r3, #20
 800624c:	051b      	lsls	r3, r3, #20
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1bb      	bne.n	80061ca <_strtod_l+0x72>
 8006252:	f001 fddd 	bl	8007e10 <__errno>
 8006256:	2322      	movs	r3, #34	@ 0x22
 8006258:	6003      	str	r3, [r0, #0]
 800625a:	e7b6      	b.n	80061ca <_strtod_l+0x72>
 800625c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006260:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006264:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006268:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800626c:	e7e7      	b.n	800623e <_strtod_l+0xe6>
 800626e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80063f0 <_strtod_l+0x298>
 8006272:	e7e4      	b.n	800623e <_strtod_l+0xe6>
 8006274:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006278:	f04f 3aff 	mov.w	sl, #4294967295
 800627c:	e7df      	b.n	800623e <_strtod_l+0xe6>
 800627e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	9219      	str	r2, [sp, #100]	@ 0x64
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b30      	cmp	r3, #48	@ 0x30
 8006288:	d0f9      	beq.n	800627e <_strtod_l+0x126>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d09d      	beq.n	80061ca <_strtod_l+0x72>
 800628e:	2301      	movs	r3, #1
 8006290:	2700      	movs	r7, #0
 8006292:	9308      	str	r3, [sp, #32]
 8006294:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006296:	930c      	str	r3, [sp, #48]	@ 0x30
 8006298:	970b      	str	r7, [sp, #44]	@ 0x2c
 800629a:	46b9      	mov	r9, r7
 800629c:	220a      	movs	r2, #10
 800629e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80062a0:	7805      	ldrb	r5, [r0, #0]
 80062a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80062a6:	b2d9      	uxtb	r1, r3
 80062a8:	2909      	cmp	r1, #9
 80062aa:	d928      	bls.n	80062fe <_strtod_l+0x1a6>
 80062ac:	494f      	ldr	r1, [pc, #316]	@ (80063ec <_strtod_l+0x294>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	f001 fcf5 	bl	8007c9e <strncmp>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d032      	beq.n	800631e <_strtod_l+0x1c6>
 80062b8:	2000      	movs	r0, #0
 80062ba:	462a      	mov	r2, r5
 80062bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80062be:	464d      	mov	r5, r9
 80062c0:	4603      	mov	r3, r0
 80062c2:	2a65      	cmp	r2, #101	@ 0x65
 80062c4:	d001      	beq.n	80062ca <_strtod_l+0x172>
 80062c6:	2a45      	cmp	r2, #69	@ 0x45
 80062c8:	d114      	bne.n	80062f4 <_strtod_l+0x19c>
 80062ca:	b91d      	cbnz	r5, 80062d4 <_strtod_l+0x17c>
 80062cc:	9a08      	ldr	r2, [sp, #32]
 80062ce:	4302      	orrs	r2, r0
 80062d0:	d096      	beq.n	8006200 <_strtod_l+0xa8>
 80062d2:	2500      	movs	r5, #0
 80062d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80062d6:	1c62      	adds	r2, r4, #1
 80062d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80062da:	7862      	ldrb	r2, [r4, #1]
 80062dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80062de:	d07a      	beq.n	80063d6 <_strtod_l+0x27e>
 80062e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80062e2:	d07e      	beq.n	80063e2 <_strtod_l+0x28a>
 80062e4:	f04f 0c00 	mov.w	ip, #0
 80062e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80062ec:	2909      	cmp	r1, #9
 80062ee:	f240 8085 	bls.w	80063fc <_strtod_l+0x2a4>
 80062f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80062f4:	f04f 0800 	mov.w	r8, #0
 80062f8:	e0a5      	b.n	8006446 <_strtod_l+0x2ee>
 80062fa:	2300      	movs	r3, #0
 80062fc:	e7c8      	b.n	8006290 <_strtod_l+0x138>
 80062fe:	f1b9 0f08 	cmp.w	r9, #8
 8006302:	bfd8      	it	le
 8006304:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006306:	f100 0001 	add.w	r0, r0, #1
 800630a:	bfda      	itte	le
 800630c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006310:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006312:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006316:	f109 0901 	add.w	r9, r9, #1
 800631a:	9019      	str	r0, [sp, #100]	@ 0x64
 800631c:	e7bf      	b.n	800629e <_strtod_l+0x146>
 800631e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	9219      	str	r2, [sp, #100]	@ 0x64
 8006324:	785a      	ldrb	r2, [r3, #1]
 8006326:	f1b9 0f00 	cmp.w	r9, #0
 800632a:	d03b      	beq.n	80063a4 <_strtod_l+0x24c>
 800632c:	900a      	str	r0, [sp, #40]	@ 0x28
 800632e:	464d      	mov	r5, r9
 8006330:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006334:	2b09      	cmp	r3, #9
 8006336:	d912      	bls.n	800635e <_strtod_l+0x206>
 8006338:	2301      	movs	r3, #1
 800633a:	e7c2      	b.n	80062c2 <_strtod_l+0x16a>
 800633c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	9219      	str	r2, [sp, #100]	@ 0x64
 8006342:	785a      	ldrb	r2, [r3, #1]
 8006344:	3001      	adds	r0, #1
 8006346:	2a30      	cmp	r2, #48	@ 0x30
 8006348:	d0f8      	beq.n	800633c <_strtod_l+0x1e4>
 800634a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800634e:	2b08      	cmp	r3, #8
 8006350:	f200 84d2 	bhi.w	8006cf8 <_strtod_l+0xba0>
 8006354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006356:	900a      	str	r0, [sp, #40]	@ 0x28
 8006358:	2000      	movs	r0, #0
 800635a:	930c      	str	r3, [sp, #48]	@ 0x30
 800635c:	4605      	mov	r5, r0
 800635e:	3a30      	subs	r2, #48	@ 0x30
 8006360:	f100 0301 	add.w	r3, r0, #1
 8006364:	d018      	beq.n	8006398 <_strtod_l+0x240>
 8006366:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006368:	4419      	add	r1, r3
 800636a:	910a      	str	r1, [sp, #40]	@ 0x28
 800636c:	462e      	mov	r6, r5
 800636e:	f04f 0e0a 	mov.w	lr, #10
 8006372:	1c71      	adds	r1, r6, #1
 8006374:	eba1 0c05 	sub.w	ip, r1, r5
 8006378:	4563      	cmp	r3, ip
 800637a:	dc15      	bgt.n	80063a8 <_strtod_l+0x250>
 800637c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006380:	182b      	adds	r3, r5, r0
 8006382:	2b08      	cmp	r3, #8
 8006384:	f105 0501 	add.w	r5, r5, #1
 8006388:	4405      	add	r5, r0
 800638a:	dc1a      	bgt.n	80063c2 <_strtod_l+0x26a>
 800638c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800638e:	230a      	movs	r3, #10
 8006390:	fb03 2301 	mla	r3, r3, r1, r2
 8006394:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006396:	2300      	movs	r3, #0
 8006398:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800639a:	1c51      	adds	r1, r2, #1
 800639c:	9119      	str	r1, [sp, #100]	@ 0x64
 800639e:	7852      	ldrb	r2, [r2, #1]
 80063a0:	4618      	mov	r0, r3
 80063a2:	e7c5      	b.n	8006330 <_strtod_l+0x1d8>
 80063a4:	4648      	mov	r0, r9
 80063a6:	e7ce      	b.n	8006346 <_strtod_l+0x1ee>
 80063a8:	2e08      	cmp	r6, #8
 80063aa:	dc05      	bgt.n	80063b8 <_strtod_l+0x260>
 80063ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80063ae:	fb0e f606 	mul.w	r6, lr, r6
 80063b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80063b4:	460e      	mov	r6, r1
 80063b6:	e7dc      	b.n	8006372 <_strtod_l+0x21a>
 80063b8:	2910      	cmp	r1, #16
 80063ba:	bfd8      	it	le
 80063bc:	fb0e f707 	mulle.w	r7, lr, r7
 80063c0:	e7f8      	b.n	80063b4 <_strtod_l+0x25c>
 80063c2:	2b0f      	cmp	r3, #15
 80063c4:	bfdc      	itt	le
 80063c6:	230a      	movle	r3, #10
 80063c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80063cc:	e7e3      	b.n	8006396 <_strtod_l+0x23e>
 80063ce:	2300      	movs	r3, #0
 80063d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063d2:	2301      	movs	r3, #1
 80063d4:	e77a      	b.n	80062cc <_strtod_l+0x174>
 80063d6:	f04f 0c00 	mov.w	ip, #0
 80063da:	1ca2      	adds	r2, r4, #2
 80063dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80063de:	78a2      	ldrb	r2, [r4, #2]
 80063e0:	e782      	b.n	80062e8 <_strtod_l+0x190>
 80063e2:	f04f 0c01 	mov.w	ip, #1
 80063e6:	e7f8      	b.n	80063da <_strtod_l+0x282>
 80063e8:	0800ac4c 	.word	0x0800ac4c
 80063ec:	0800aa08 	.word	0x0800aa08
 80063f0:	7ff00000 	.word	0x7ff00000
 80063f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80063f6:	1c51      	adds	r1, r2, #1
 80063f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80063fa:	7852      	ldrb	r2, [r2, #1]
 80063fc:	2a30      	cmp	r2, #48	@ 0x30
 80063fe:	d0f9      	beq.n	80063f4 <_strtod_l+0x29c>
 8006400:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006404:	2908      	cmp	r1, #8
 8006406:	f63f af75 	bhi.w	80062f4 <_strtod_l+0x19c>
 800640a:	3a30      	subs	r2, #48	@ 0x30
 800640c:	9209      	str	r2, [sp, #36]	@ 0x24
 800640e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006410:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006412:	f04f 080a 	mov.w	r8, #10
 8006416:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006418:	1c56      	adds	r6, r2, #1
 800641a:	9619      	str	r6, [sp, #100]	@ 0x64
 800641c:	7852      	ldrb	r2, [r2, #1]
 800641e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006422:	f1be 0f09 	cmp.w	lr, #9
 8006426:	d939      	bls.n	800649c <_strtod_l+0x344>
 8006428:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800642a:	1a76      	subs	r6, r6, r1
 800642c:	2e08      	cmp	r6, #8
 800642e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006432:	dc03      	bgt.n	800643c <_strtod_l+0x2e4>
 8006434:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006436:	4588      	cmp	r8, r1
 8006438:	bfa8      	it	ge
 800643a:	4688      	movge	r8, r1
 800643c:	f1bc 0f00 	cmp.w	ip, #0
 8006440:	d001      	beq.n	8006446 <_strtod_l+0x2ee>
 8006442:	f1c8 0800 	rsb	r8, r8, #0
 8006446:	2d00      	cmp	r5, #0
 8006448:	d14e      	bne.n	80064e8 <_strtod_l+0x390>
 800644a:	9908      	ldr	r1, [sp, #32]
 800644c:	4308      	orrs	r0, r1
 800644e:	f47f aebc 	bne.w	80061ca <_strtod_l+0x72>
 8006452:	2b00      	cmp	r3, #0
 8006454:	f47f aed4 	bne.w	8006200 <_strtod_l+0xa8>
 8006458:	2a69      	cmp	r2, #105	@ 0x69
 800645a:	d028      	beq.n	80064ae <_strtod_l+0x356>
 800645c:	dc25      	bgt.n	80064aa <_strtod_l+0x352>
 800645e:	2a49      	cmp	r2, #73	@ 0x49
 8006460:	d025      	beq.n	80064ae <_strtod_l+0x356>
 8006462:	2a4e      	cmp	r2, #78	@ 0x4e
 8006464:	f47f aecc 	bne.w	8006200 <_strtod_l+0xa8>
 8006468:	499a      	ldr	r1, [pc, #616]	@ (80066d4 <_strtod_l+0x57c>)
 800646a:	a819      	add	r0, sp, #100	@ 0x64
 800646c:	f002 fe64 	bl	8009138 <__match>
 8006470:	2800      	cmp	r0, #0
 8006472:	f43f aec5 	beq.w	8006200 <_strtod_l+0xa8>
 8006476:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b28      	cmp	r3, #40	@ 0x28
 800647c:	d12e      	bne.n	80064dc <_strtod_l+0x384>
 800647e:	4996      	ldr	r1, [pc, #600]	@ (80066d8 <_strtod_l+0x580>)
 8006480:	aa1c      	add	r2, sp, #112	@ 0x70
 8006482:	a819      	add	r0, sp, #100	@ 0x64
 8006484:	f002 fe6c 	bl	8009160 <__hexnan>
 8006488:	2805      	cmp	r0, #5
 800648a:	d127      	bne.n	80064dc <_strtod_l+0x384>
 800648c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800648e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006492:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006496:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800649a:	e696      	b.n	80061ca <_strtod_l+0x72>
 800649c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800649e:	fb08 2101 	mla	r1, r8, r1, r2
 80064a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80064a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80064a8:	e7b5      	b.n	8006416 <_strtod_l+0x2be>
 80064aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80064ac:	e7da      	b.n	8006464 <_strtod_l+0x30c>
 80064ae:	498b      	ldr	r1, [pc, #556]	@ (80066dc <_strtod_l+0x584>)
 80064b0:	a819      	add	r0, sp, #100	@ 0x64
 80064b2:	f002 fe41 	bl	8009138 <__match>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f43f aea2 	beq.w	8006200 <_strtod_l+0xa8>
 80064bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064be:	4988      	ldr	r1, [pc, #544]	@ (80066e0 <_strtod_l+0x588>)
 80064c0:	3b01      	subs	r3, #1
 80064c2:	a819      	add	r0, sp, #100	@ 0x64
 80064c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80064c6:	f002 fe37 	bl	8009138 <__match>
 80064ca:	b910      	cbnz	r0, 80064d2 <_strtod_l+0x37a>
 80064cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064ce:	3301      	adds	r3, #1
 80064d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80064d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80066f0 <_strtod_l+0x598>
 80064d6:	f04f 0a00 	mov.w	sl, #0
 80064da:	e676      	b.n	80061ca <_strtod_l+0x72>
 80064dc:	4881      	ldr	r0, [pc, #516]	@ (80066e4 <_strtod_l+0x58c>)
 80064de:	f001 fcd3 	bl	8007e88 <nan>
 80064e2:	ec5b ab10 	vmov	sl, fp, d0
 80064e6:	e670      	b.n	80061ca <_strtod_l+0x72>
 80064e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80064ec:	eba8 0303 	sub.w	r3, r8, r3
 80064f0:	f1b9 0f00 	cmp.w	r9, #0
 80064f4:	bf08      	it	eq
 80064f6:	46a9      	moveq	r9, r5
 80064f8:	2d10      	cmp	r5, #16
 80064fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80064fc:	462c      	mov	r4, r5
 80064fe:	bfa8      	it	ge
 8006500:	2410      	movge	r4, #16
 8006502:	f7fa f817 	bl	8000534 <__aeabi_ui2d>
 8006506:	2d09      	cmp	r5, #9
 8006508:	4682      	mov	sl, r0
 800650a:	468b      	mov	fp, r1
 800650c:	dc13      	bgt.n	8006536 <_strtod_l+0x3de>
 800650e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	f43f ae5a 	beq.w	80061ca <_strtod_l+0x72>
 8006516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006518:	dd78      	ble.n	800660c <_strtod_l+0x4b4>
 800651a:	2b16      	cmp	r3, #22
 800651c:	dc5f      	bgt.n	80065de <_strtod_l+0x486>
 800651e:	4972      	ldr	r1, [pc, #456]	@ (80066e8 <_strtod_l+0x590>)
 8006520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006528:	4652      	mov	r2, sl
 800652a:	465b      	mov	r3, fp
 800652c:	f7fa f87c 	bl	8000628 <__aeabi_dmul>
 8006530:	4682      	mov	sl, r0
 8006532:	468b      	mov	fp, r1
 8006534:	e649      	b.n	80061ca <_strtod_l+0x72>
 8006536:	4b6c      	ldr	r3, [pc, #432]	@ (80066e8 <_strtod_l+0x590>)
 8006538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800653c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006540:	f7fa f872 	bl	8000628 <__aeabi_dmul>
 8006544:	4682      	mov	sl, r0
 8006546:	4638      	mov	r0, r7
 8006548:	468b      	mov	fp, r1
 800654a:	f7f9 fff3 	bl	8000534 <__aeabi_ui2d>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4650      	mov	r0, sl
 8006554:	4659      	mov	r1, fp
 8006556:	f7f9 feb1 	bl	80002bc <__adddf3>
 800655a:	2d0f      	cmp	r5, #15
 800655c:	4682      	mov	sl, r0
 800655e:	468b      	mov	fp, r1
 8006560:	ddd5      	ble.n	800650e <_strtod_l+0x3b6>
 8006562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006564:	1b2c      	subs	r4, r5, r4
 8006566:	441c      	add	r4, r3
 8006568:	2c00      	cmp	r4, #0
 800656a:	f340 8093 	ble.w	8006694 <_strtod_l+0x53c>
 800656e:	f014 030f 	ands.w	r3, r4, #15
 8006572:	d00a      	beq.n	800658a <_strtod_l+0x432>
 8006574:	495c      	ldr	r1, [pc, #368]	@ (80066e8 <_strtod_l+0x590>)
 8006576:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800657a:	4652      	mov	r2, sl
 800657c:	465b      	mov	r3, fp
 800657e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006582:	f7fa f851 	bl	8000628 <__aeabi_dmul>
 8006586:	4682      	mov	sl, r0
 8006588:	468b      	mov	fp, r1
 800658a:	f034 040f 	bics.w	r4, r4, #15
 800658e:	d073      	beq.n	8006678 <_strtod_l+0x520>
 8006590:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006594:	dd49      	ble.n	800662a <_strtod_l+0x4d2>
 8006596:	2400      	movs	r4, #0
 8006598:	46a0      	mov	r8, r4
 800659a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800659c:	46a1      	mov	r9, r4
 800659e:	9a05      	ldr	r2, [sp, #20]
 80065a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80066f0 <_strtod_l+0x598>
 80065a4:	2322      	movs	r3, #34	@ 0x22
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	f04f 0a00 	mov.w	sl, #0
 80065ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f43f ae0b 	beq.w	80061ca <_strtod_l+0x72>
 80065b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065b6:	9805      	ldr	r0, [sp, #20]
 80065b8:	f002 ff76 	bl	80094a8 <_Bfree>
 80065bc:	9805      	ldr	r0, [sp, #20]
 80065be:	4649      	mov	r1, r9
 80065c0:	f002 ff72 	bl	80094a8 <_Bfree>
 80065c4:	9805      	ldr	r0, [sp, #20]
 80065c6:	4641      	mov	r1, r8
 80065c8:	f002 ff6e 	bl	80094a8 <_Bfree>
 80065cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065ce:	9805      	ldr	r0, [sp, #20]
 80065d0:	f002 ff6a 	bl	80094a8 <_Bfree>
 80065d4:	9805      	ldr	r0, [sp, #20]
 80065d6:	4621      	mov	r1, r4
 80065d8:	f002 ff66 	bl	80094a8 <_Bfree>
 80065dc:	e5f5      	b.n	80061ca <_strtod_l+0x72>
 80065de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80065e4:	4293      	cmp	r3, r2
 80065e6:	dbbc      	blt.n	8006562 <_strtod_l+0x40a>
 80065e8:	4c3f      	ldr	r4, [pc, #252]	@ (80066e8 <_strtod_l+0x590>)
 80065ea:	f1c5 050f 	rsb	r5, r5, #15
 80065ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80065f2:	4652      	mov	r2, sl
 80065f4:	465b      	mov	r3, fp
 80065f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065fa:	f7fa f815 	bl	8000628 <__aeabi_dmul>
 80065fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006600:	1b5d      	subs	r5, r3, r5
 8006602:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006606:	e9d4 2300 	ldrd	r2, r3, [r4]
 800660a:	e78f      	b.n	800652c <_strtod_l+0x3d4>
 800660c:	3316      	adds	r3, #22
 800660e:	dba8      	blt.n	8006562 <_strtod_l+0x40a>
 8006610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006612:	eba3 0808 	sub.w	r8, r3, r8
 8006616:	4b34      	ldr	r3, [pc, #208]	@ (80066e8 <_strtod_l+0x590>)
 8006618:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800661c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006620:	4650      	mov	r0, sl
 8006622:	4659      	mov	r1, fp
 8006624:	f7fa f92a 	bl	800087c <__aeabi_ddiv>
 8006628:	e782      	b.n	8006530 <_strtod_l+0x3d8>
 800662a:	2300      	movs	r3, #0
 800662c:	4f2f      	ldr	r7, [pc, #188]	@ (80066ec <_strtod_l+0x594>)
 800662e:	1124      	asrs	r4, r4, #4
 8006630:	4650      	mov	r0, sl
 8006632:	4659      	mov	r1, fp
 8006634:	461e      	mov	r6, r3
 8006636:	2c01      	cmp	r4, #1
 8006638:	dc21      	bgt.n	800667e <_strtod_l+0x526>
 800663a:	b10b      	cbz	r3, 8006640 <_strtod_l+0x4e8>
 800663c:	4682      	mov	sl, r0
 800663e:	468b      	mov	fp, r1
 8006640:	492a      	ldr	r1, [pc, #168]	@ (80066ec <_strtod_l+0x594>)
 8006642:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006646:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800664a:	4652      	mov	r2, sl
 800664c:	465b      	mov	r3, fp
 800664e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006652:	f7f9 ffe9 	bl	8000628 <__aeabi_dmul>
 8006656:	4b26      	ldr	r3, [pc, #152]	@ (80066f0 <_strtod_l+0x598>)
 8006658:	460a      	mov	r2, r1
 800665a:	400b      	ands	r3, r1
 800665c:	4925      	ldr	r1, [pc, #148]	@ (80066f4 <_strtod_l+0x59c>)
 800665e:	428b      	cmp	r3, r1
 8006660:	4682      	mov	sl, r0
 8006662:	d898      	bhi.n	8006596 <_strtod_l+0x43e>
 8006664:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006668:	428b      	cmp	r3, r1
 800666a:	bf86      	itte	hi
 800666c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80066f8 <_strtod_l+0x5a0>
 8006670:	f04f 3aff 	movhi.w	sl, #4294967295
 8006674:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006678:	2300      	movs	r3, #0
 800667a:	9308      	str	r3, [sp, #32]
 800667c:	e076      	b.n	800676c <_strtod_l+0x614>
 800667e:	07e2      	lsls	r2, r4, #31
 8006680:	d504      	bpl.n	800668c <_strtod_l+0x534>
 8006682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006686:	f7f9 ffcf 	bl	8000628 <__aeabi_dmul>
 800668a:	2301      	movs	r3, #1
 800668c:	3601      	adds	r6, #1
 800668e:	1064      	asrs	r4, r4, #1
 8006690:	3708      	adds	r7, #8
 8006692:	e7d0      	b.n	8006636 <_strtod_l+0x4de>
 8006694:	d0f0      	beq.n	8006678 <_strtod_l+0x520>
 8006696:	4264      	negs	r4, r4
 8006698:	f014 020f 	ands.w	r2, r4, #15
 800669c:	d00a      	beq.n	80066b4 <_strtod_l+0x55c>
 800669e:	4b12      	ldr	r3, [pc, #72]	@ (80066e8 <_strtod_l+0x590>)
 80066a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066a4:	4650      	mov	r0, sl
 80066a6:	4659      	mov	r1, fp
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f7fa f8e6 	bl	800087c <__aeabi_ddiv>
 80066b0:	4682      	mov	sl, r0
 80066b2:	468b      	mov	fp, r1
 80066b4:	1124      	asrs	r4, r4, #4
 80066b6:	d0df      	beq.n	8006678 <_strtod_l+0x520>
 80066b8:	2c1f      	cmp	r4, #31
 80066ba:	dd1f      	ble.n	80066fc <_strtod_l+0x5a4>
 80066bc:	2400      	movs	r4, #0
 80066be:	46a0      	mov	r8, r4
 80066c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066c2:	46a1      	mov	r9, r4
 80066c4:	9a05      	ldr	r2, [sp, #20]
 80066c6:	2322      	movs	r3, #34	@ 0x22
 80066c8:	f04f 0a00 	mov.w	sl, #0
 80066cc:	f04f 0b00 	mov.w	fp, #0
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	e76b      	b.n	80065ac <_strtod_l+0x454>
 80066d4:	0800aa17 	.word	0x0800aa17
 80066d8:	0800ac38 	.word	0x0800ac38
 80066dc:	0800aa0f 	.word	0x0800aa0f
 80066e0:	0800aafb 	.word	0x0800aafb
 80066e4:	0800aaf7 	.word	0x0800aaf7
 80066e8:	0800acc0 	.word	0x0800acc0
 80066ec:	0800ac98 	.word	0x0800ac98
 80066f0:	7ff00000 	.word	0x7ff00000
 80066f4:	7ca00000 	.word	0x7ca00000
 80066f8:	7fefffff 	.word	0x7fefffff
 80066fc:	f014 0310 	ands.w	r3, r4, #16
 8006700:	bf18      	it	ne
 8006702:	236a      	movne	r3, #106	@ 0x6a
 8006704:	4ea9      	ldr	r6, [pc, #676]	@ (80069ac <_strtod_l+0x854>)
 8006706:	9308      	str	r3, [sp, #32]
 8006708:	4650      	mov	r0, sl
 800670a:	4659      	mov	r1, fp
 800670c:	2300      	movs	r3, #0
 800670e:	07e7      	lsls	r7, r4, #31
 8006710:	d504      	bpl.n	800671c <_strtod_l+0x5c4>
 8006712:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006716:	f7f9 ff87 	bl	8000628 <__aeabi_dmul>
 800671a:	2301      	movs	r3, #1
 800671c:	1064      	asrs	r4, r4, #1
 800671e:	f106 0608 	add.w	r6, r6, #8
 8006722:	d1f4      	bne.n	800670e <_strtod_l+0x5b6>
 8006724:	b10b      	cbz	r3, 800672a <_strtod_l+0x5d2>
 8006726:	4682      	mov	sl, r0
 8006728:	468b      	mov	fp, r1
 800672a:	9b08      	ldr	r3, [sp, #32]
 800672c:	b1b3      	cbz	r3, 800675c <_strtod_l+0x604>
 800672e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006732:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006736:	2b00      	cmp	r3, #0
 8006738:	4659      	mov	r1, fp
 800673a:	dd0f      	ble.n	800675c <_strtod_l+0x604>
 800673c:	2b1f      	cmp	r3, #31
 800673e:	dd56      	ble.n	80067ee <_strtod_l+0x696>
 8006740:	2b34      	cmp	r3, #52	@ 0x34
 8006742:	bfde      	ittt	le
 8006744:	f04f 33ff 	movle.w	r3, #4294967295
 8006748:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800674c:	4093      	lslle	r3, r2
 800674e:	f04f 0a00 	mov.w	sl, #0
 8006752:	bfcc      	ite	gt
 8006754:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006758:	ea03 0b01 	andle.w	fp, r3, r1
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	4650      	mov	r0, sl
 8006762:	4659      	mov	r1, fp
 8006764:	f7fa f9c8 	bl	8000af8 <__aeabi_dcmpeq>
 8006768:	2800      	cmp	r0, #0
 800676a:	d1a7      	bne.n	80066bc <_strtod_l+0x564>
 800676c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006772:	9805      	ldr	r0, [sp, #20]
 8006774:	462b      	mov	r3, r5
 8006776:	464a      	mov	r2, r9
 8006778:	f002 fefe 	bl	8009578 <__s2b>
 800677c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800677e:	2800      	cmp	r0, #0
 8006780:	f43f af09 	beq.w	8006596 <_strtod_l+0x43e>
 8006784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006788:	2a00      	cmp	r2, #0
 800678a:	eba3 0308 	sub.w	r3, r3, r8
 800678e:	bfa8      	it	ge
 8006790:	2300      	movge	r3, #0
 8006792:	9312      	str	r3, [sp, #72]	@ 0x48
 8006794:	2400      	movs	r4, #0
 8006796:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800679a:	9316      	str	r3, [sp, #88]	@ 0x58
 800679c:	46a0      	mov	r8, r4
 800679e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a0:	9805      	ldr	r0, [sp, #20]
 80067a2:	6859      	ldr	r1, [r3, #4]
 80067a4:	f002 fe40 	bl	8009428 <_Balloc>
 80067a8:	4681      	mov	r9, r0
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f43f aef7 	beq.w	800659e <_strtod_l+0x446>
 80067b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	3202      	adds	r2, #2
 80067b6:	f103 010c 	add.w	r1, r3, #12
 80067ba:	0092      	lsls	r2, r2, #2
 80067bc:	300c      	adds	r0, #12
 80067be:	f001 fb54 	bl	8007e6a <memcpy>
 80067c2:	ec4b ab10 	vmov	d0, sl, fp
 80067c6:	9805      	ldr	r0, [sp, #20]
 80067c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80067ca:	a91b      	add	r1, sp, #108	@ 0x6c
 80067cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80067d0:	f003 fa06 	bl	8009be0 <__d2b>
 80067d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f43f aee1 	beq.w	800659e <_strtod_l+0x446>
 80067dc:	9805      	ldr	r0, [sp, #20]
 80067de:	2101      	movs	r1, #1
 80067e0:	f002 ff60 	bl	80096a4 <__i2b>
 80067e4:	4680      	mov	r8, r0
 80067e6:	b948      	cbnz	r0, 80067fc <_strtod_l+0x6a4>
 80067e8:	f04f 0800 	mov.w	r8, #0
 80067ec:	e6d7      	b.n	800659e <_strtod_l+0x446>
 80067ee:	f04f 32ff 	mov.w	r2, #4294967295
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	ea03 0a0a 	and.w	sl, r3, sl
 80067fa:	e7af      	b.n	800675c <_strtod_l+0x604>
 80067fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80067fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006800:	2d00      	cmp	r5, #0
 8006802:	bfab      	itete	ge
 8006804:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006806:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006808:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800680a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800680c:	bfac      	ite	ge
 800680e:	18ef      	addge	r7, r5, r3
 8006810:	1b5e      	sublt	r6, r3, r5
 8006812:	9b08      	ldr	r3, [sp, #32]
 8006814:	1aed      	subs	r5, r5, r3
 8006816:	4415      	add	r5, r2
 8006818:	4b65      	ldr	r3, [pc, #404]	@ (80069b0 <_strtod_l+0x858>)
 800681a:	3d01      	subs	r5, #1
 800681c:	429d      	cmp	r5, r3
 800681e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006822:	da50      	bge.n	80068c6 <_strtod_l+0x76e>
 8006824:	1b5b      	subs	r3, r3, r5
 8006826:	2b1f      	cmp	r3, #31
 8006828:	eba2 0203 	sub.w	r2, r2, r3
 800682c:	f04f 0101 	mov.w	r1, #1
 8006830:	dc3d      	bgt.n	80068ae <_strtod_l+0x756>
 8006832:	fa01 f303 	lsl.w	r3, r1, r3
 8006836:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006838:	2300      	movs	r3, #0
 800683a:	9310      	str	r3, [sp, #64]	@ 0x40
 800683c:	18bd      	adds	r5, r7, r2
 800683e:	9b08      	ldr	r3, [sp, #32]
 8006840:	42af      	cmp	r7, r5
 8006842:	4416      	add	r6, r2
 8006844:	441e      	add	r6, r3
 8006846:	463b      	mov	r3, r7
 8006848:	bfa8      	it	ge
 800684a:	462b      	movge	r3, r5
 800684c:	42b3      	cmp	r3, r6
 800684e:	bfa8      	it	ge
 8006850:	4633      	movge	r3, r6
 8006852:	2b00      	cmp	r3, #0
 8006854:	bfc2      	ittt	gt
 8006856:	1aed      	subgt	r5, r5, r3
 8006858:	1af6      	subgt	r6, r6, r3
 800685a:	1aff      	subgt	r7, r7, r3
 800685c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800685e:	2b00      	cmp	r3, #0
 8006860:	dd16      	ble.n	8006890 <_strtod_l+0x738>
 8006862:	4641      	mov	r1, r8
 8006864:	9805      	ldr	r0, [sp, #20]
 8006866:	461a      	mov	r2, r3
 8006868:	f002 ffd4 	bl	8009814 <__pow5mult>
 800686c:	4680      	mov	r8, r0
 800686e:	2800      	cmp	r0, #0
 8006870:	d0ba      	beq.n	80067e8 <_strtod_l+0x690>
 8006872:	4601      	mov	r1, r0
 8006874:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006876:	9805      	ldr	r0, [sp, #20]
 8006878:	f002 ff2a 	bl	80096d0 <__multiply>
 800687c:	900a      	str	r0, [sp, #40]	@ 0x28
 800687e:	2800      	cmp	r0, #0
 8006880:	f43f ae8d 	beq.w	800659e <_strtod_l+0x446>
 8006884:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006886:	9805      	ldr	r0, [sp, #20]
 8006888:	f002 fe0e 	bl	80094a8 <_Bfree>
 800688c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800688e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006890:	2d00      	cmp	r5, #0
 8006892:	dc1d      	bgt.n	80068d0 <_strtod_l+0x778>
 8006894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	dd23      	ble.n	80068e2 <_strtod_l+0x78a>
 800689a:	4649      	mov	r1, r9
 800689c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800689e:	9805      	ldr	r0, [sp, #20]
 80068a0:	f002 ffb8 	bl	8009814 <__pow5mult>
 80068a4:	4681      	mov	r9, r0
 80068a6:	b9e0      	cbnz	r0, 80068e2 <_strtod_l+0x78a>
 80068a8:	f04f 0900 	mov.w	r9, #0
 80068ac:	e677      	b.n	800659e <_strtod_l+0x446>
 80068ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80068b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80068b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80068ba:	35e2      	adds	r5, #226	@ 0xe2
 80068bc:	fa01 f305 	lsl.w	r3, r1, r5
 80068c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80068c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80068c4:	e7ba      	b.n	800683c <_strtod_l+0x6e4>
 80068c6:	2300      	movs	r3, #0
 80068c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80068ca:	2301      	movs	r3, #1
 80068cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068ce:	e7b5      	b.n	800683c <_strtod_l+0x6e4>
 80068d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068d2:	9805      	ldr	r0, [sp, #20]
 80068d4:	462a      	mov	r2, r5
 80068d6:	f002 fff7 	bl	80098c8 <__lshift>
 80068da:	901a      	str	r0, [sp, #104]	@ 0x68
 80068dc:	2800      	cmp	r0, #0
 80068de:	d1d9      	bne.n	8006894 <_strtod_l+0x73c>
 80068e0:	e65d      	b.n	800659e <_strtod_l+0x446>
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	dd07      	ble.n	80068f6 <_strtod_l+0x79e>
 80068e6:	4649      	mov	r1, r9
 80068e8:	9805      	ldr	r0, [sp, #20]
 80068ea:	4632      	mov	r2, r6
 80068ec:	f002 ffec 	bl	80098c8 <__lshift>
 80068f0:	4681      	mov	r9, r0
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0d8      	beq.n	80068a8 <_strtod_l+0x750>
 80068f6:	2f00      	cmp	r7, #0
 80068f8:	dd08      	ble.n	800690c <_strtod_l+0x7b4>
 80068fa:	4641      	mov	r1, r8
 80068fc:	9805      	ldr	r0, [sp, #20]
 80068fe:	463a      	mov	r2, r7
 8006900:	f002 ffe2 	bl	80098c8 <__lshift>
 8006904:	4680      	mov	r8, r0
 8006906:	2800      	cmp	r0, #0
 8006908:	f43f ae49 	beq.w	800659e <_strtod_l+0x446>
 800690c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800690e:	9805      	ldr	r0, [sp, #20]
 8006910:	464a      	mov	r2, r9
 8006912:	f003 f861 	bl	80099d8 <__mdiff>
 8006916:	4604      	mov	r4, r0
 8006918:	2800      	cmp	r0, #0
 800691a:	f43f ae40 	beq.w	800659e <_strtod_l+0x446>
 800691e:	68c3      	ldr	r3, [r0, #12]
 8006920:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006922:	2300      	movs	r3, #0
 8006924:	60c3      	str	r3, [r0, #12]
 8006926:	4641      	mov	r1, r8
 8006928:	f003 f83a 	bl	80099a0 <__mcmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	da45      	bge.n	80069bc <_strtod_l+0x864>
 8006930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006932:	ea53 030a 	orrs.w	r3, r3, sl
 8006936:	d16b      	bne.n	8006a10 <_strtod_l+0x8b8>
 8006938:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800693c:	2b00      	cmp	r3, #0
 800693e:	d167      	bne.n	8006a10 <_strtod_l+0x8b8>
 8006940:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006944:	0d1b      	lsrs	r3, r3, #20
 8006946:	051b      	lsls	r3, r3, #20
 8006948:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800694c:	d960      	bls.n	8006a10 <_strtod_l+0x8b8>
 800694e:	6963      	ldr	r3, [r4, #20]
 8006950:	b913      	cbnz	r3, 8006958 <_strtod_l+0x800>
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	2b01      	cmp	r3, #1
 8006956:	dd5b      	ble.n	8006a10 <_strtod_l+0x8b8>
 8006958:	4621      	mov	r1, r4
 800695a:	2201      	movs	r2, #1
 800695c:	9805      	ldr	r0, [sp, #20]
 800695e:	f002 ffb3 	bl	80098c8 <__lshift>
 8006962:	4641      	mov	r1, r8
 8006964:	4604      	mov	r4, r0
 8006966:	f003 f81b 	bl	80099a0 <__mcmp>
 800696a:	2800      	cmp	r0, #0
 800696c:	dd50      	ble.n	8006a10 <_strtod_l+0x8b8>
 800696e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006972:	9a08      	ldr	r2, [sp, #32]
 8006974:	0d1b      	lsrs	r3, r3, #20
 8006976:	051b      	lsls	r3, r3, #20
 8006978:	2a00      	cmp	r2, #0
 800697a:	d06a      	beq.n	8006a52 <_strtod_l+0x8fa>
 800697c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006980:	d867      	bhi.n	8006a52 <_strtod_l+0x8fa>
 8006982:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006986:	f67f ae9d 	bls.w	80066c4 <_strtod_l+0x56c>
 800698a:	4b0a      	ldr	r3, [pc, #40]	@ (80069b4 <_strtod_l+0x85c>)
 800698c:	4650      	mov	r0, sl
 800698e:	4659      	mov	r1, fp
 8006990:	2200      	movs	r2, #0
 8006992:	f7f9 fe49 	bl	8000628 <__aeabi_dmul>
 8006996:	4b08      	ldr	r3, [pc, #32]	@ (80069b8 <_strtod_l+0x860>)
 8006998:	400b      	ands	r3, r1
 800699a:	4682      	mov	sl, r0
 800699c:	468b      	mov	fp, r1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f47f ae08 	bne.w	80065b4 <_strtod_l+0x45c>
 80069a4:	9a05      	ldr	r2, [sp, #20]
 80069a6:	2322      	movs	r3, #34	@ 0x22
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	e603      	b.n	80065b4 <_strtod_l+0x45c>
 80069ac:	0800ac60 	.word	0x0800ac60
 80069b0:	fffffc02 	.word	0xfffffc02
 80069b4:	39500000 	.word	0x39500000
 80069b8:	7ff00000 	.word	0x7ff00000
 80069bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80069c0:	d165      	bne.n	8006a8e <_strtod_l+0x936>
 80069c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80069c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069c8:	b35a      	cbz	r2, 8006a22 <_strtod_l+0x8ca>
 80069ca:	4a9f      	ldr	r2, [pc, #636]	@ (8006c48 <_strtod_l+0xaf0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d12b      	bne.n	8006a28 <_strtod_l+0x8d0>
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	4651      	mov	r1, sl
 80069d4:	b303      	cbz	r3, 8006a18 <_strtod_l+0x8c0>
 80069d6:	4b9d      	ldr	r3, [pc, #628]	@ (8006c4c <_strtod_l+0xaf4>)
 80069d8:	465a      	mov	r2, fp
 80069da:	4013      	ands	r3, r2
 80069dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295
 80069e4:	d81b      	bhi.n	8006a1e <_strtod_l+0x8c6>
 80069e6:	0d1b      	lsrs	r3, r3, #20
 80069e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d119      	bne.n	8006a28 <_strtod_l+0x8d0>
 80069f4:	4b96      	ldr	r3, [pc, #600]	@ (8006c50 <_strtod_l+0xaf8>)
 80069f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d102      	bne.n	8006a02 <_strtod_l+0x8aa>
 80069fc:	3101      	adds	r1, #1
 80069fe:	f43f adce 	beq.w	800659e <_strtod_l+0x446>
 8006a02:	4b92      	ldr	r3, [pc, #584]	@ (8006c4c <_strtod_l+0xaf4>)
 8006a04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a06:	401a      	ands	r2, r3
 8006a08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006a0c:	f04f 0a00 	mov.w	sl, #0
 8006a10:	9b08      	ldr	r3, [sp, #32]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1b9      	bne.n	800698a <_strtod_l+0x832>
 8006a16:	e5cd      	b.n	80065b4 <_strtod_l+0x45c>
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	e7e8      	b.n	80069f0 <_strtod_l+0x898>
 8006a1e:	4613      	mov	r3, r2
 8006a20:	e7e6      	b.n	80069f0 <_strtod_l+0x898>
 8006a22:	ea53 030a 	orrs.w	r3, r3, sl
 8006a26:	d0a2      	beq.n	800696e <_strtod_l+0x816>
 8006a28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a2a:	b1db      	cbz	r3, 8006a64 <_strtod_l+0x90c>
 8006a2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a2e:	4213      	tst	r3, r2
 8006a30:	d0ee      	beq.n	8006a10 <_strtod_l+0x8b8>
 8006a32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a34:	9a08      	ldr	r2, [sp, #32]
 8006a36:	4650      	mov	r0, sl
 8006a38:	4659      	mov	r1, fp
 8006a3a:	b1bb      	cbz	r3, 8006a6c <_strtod_l+0x914>
 8006a3c:	f7ff fb6d 	bl	800611a <sulp>
 8006a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a44:	ec53 2b10 	vmov	r2, r3, d0
 8006a48:	f7f9 fc38 	bl	80002bc <__adddf3>
 8006a4c:	4682      	mov	sl, r0
 8006a4e:	468b      	mov	fp, r1
 8006a50:	e7de      	b.n	8006a10 <_strtod_l+0x8b8>
 8006a52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006a56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006a5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006a5e:	f04f 3aff 	mov.w	sl, #4294967295
 8006a62:	e7d5      	b.n	8006a10 <_strtod_l+0x8b8>
 8006a64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006a66:	ea13 0f0a 	tst.w	r3, sl
 8006a6a:	e7e1      	b.n	8006a30 <_strtod_l+0x8d8>
 8006a6c:	f7ff fb55 	bl	800611a <sulp>
 8006a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a74:	ec53 2b10 	vmov	r2, r3, d0
 8006a78:	f7f9 fc1e 	bl	80002b8 <__aeabi_dsub>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4682      	mov	sl, r0
 8006a82:	468b      	mov	fp, r1
 8006a84:	f7fa f838 	bl	8000af8 <__aeabi_dcmpeq>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d0c1      	beq.n	8006a10 <_strtod_l+0x8b8>
 8006a8c:	e61a      	b.n	80066c4 <_strtod_l+0x56c>
 8006a8e:	4641      	mov	r1, r8
 8006a90:	4620      	mov	r0, r4
 8006a92:	f003 f8fd 	bl	8009c90 <__ratio>
 8006a96:	ec57 6b10 	vmov	r6, r7, d0
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	f7fa f83c 	bl	8000b20 <__aeabi_dcmple>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d06f      	beq.n	8006b8c <_strtod_l+0xa34>
 8006aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d17a      	bne.n	8006ba8 <_strtod_l+0xa50>
 8006ab2:	f1ba 0f00 	cmp.w	sl, #0
 8006ab6:	d158      	bne.n	8006b6a <_strtod_l+0xa12>
 8006ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d15a      	bne.n	8006b78 <_strtod_l+0xa20>
 8006ac2:	4b64      	ldr	r3, [pc, #400]	@ (8006c54 <_strtod_l+0xafc>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	f7fa f81f 	bl	8000b0c <__aeabi_dcmplt>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d159      	bne.n	8006b86 <_strtod_l+0xa2e>
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4b60      	ldr	r3, [pc, #384]	@ (8006c58 <_strtod_l+0xb00>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f7f9 fda5 	bl	8000628 <__aeabi_dmul>
 8006ade:	4606      	mov	r6, r0
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006ae6:	9606      	str	r6, [sp, #24]
 8006ae8:	9307      	str	r3, [sp, #28]
 8006aea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aee:	4d57      	ldr	r5, [pc, #348]	@ (8006c4c <_strtod_l+0xaf4>)
 8006af0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af6:	401d      	ands	r5, r3
 8006af8:	4b58      	ldr	r3, [pc, #352]	@ (8006c5c <_strtod_l+0xb04>)
 8006afa:	429d      	cmp	r5, r3
 8006afc:	f040 80b2 	bne.w	8006c64 <_strtod_l+0xb0c>
 8006b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006b06:	ec4b ab10 	vmov	d0, sl, fp
 8006b0a:	f002 fff9 	bl	8009b00 <__ulp>
 8006b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b12:	ec51 0b10 	vmov	r0, r1, d0
 8006b16:	f7f9 fd87 	bl	8000628 <__aeabi_dmul>
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	f7f9 fbcd 	bl	80002bc <__adddf3>
 8006b22:	460b      	mov	r3, r1
 8006b24:	4949      	ldr	r1, [pc, #292]	@ (8006c4c <_strtod_l+0xaf4>)
 8006b26:	4a4e      	ldr	r2, [pc, #312]	@ (8006c60 <_strtod_l+0xb08>)
 8006b28:	4019      	ands	r1, r3
 8006b2a:	4291      	cmp	r1, r2
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	d942      	bls.n	8006bb6 <_strtod_l+0xa5e>
 8006b30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006b32:	4b47      	ldr	r3, [pc, #284]	@ (8006c50 <_strtod_l+0xaf8>)
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d103      	bne.n	8006b40 <_strtod_l+0x9e8>
 8006b38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	f43f ad2f 	beq.w	800659e <_strtod_l+0x446>
 8006b40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006c50 <_strtod_l+0xaf8>
 8006b44:	f04f 3aff 	mov.w	sl, #4294967295
 8006b48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b4a:	9805      	ldr	r0, [sp, #20]
 8006b4c:	f002 fcac 	bl	80094a8 <_Bfree>
 8006b50:	9805      	ldr	r0, [sp, #20]
 8006b52:	4649      	mov	r1, r9
 8006b54:	f002 fca8 	bl	80094a8 <_Bfree>
 8006b58:	9805      	ldr	r0, [sp, #20]
 8006b5a:	4641      	mov	r1, r8
 8006b5c:	f002 fca4 	bl	80094a8 <_Bfree>
 8006b60:	9805      	ldr	r0, [sp, #20]
 8006b62:	4621      	mov	r1, r4
 8006b64:	f002 fca0 	bl	80094a8 <_Bfree>
 8006b68:	e619      	b.n	800679e <_strtod_l+0x646>
 8006b6a:	f1ba 0f01 	cmp.w	sl, #1
 8006b6e:	d103      	bne.n	8006b78 <_strtod_l+0xa20>
 8006b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f43f ada6 	beq.w	80066c4 <_strtod_l+0x56c>
 8006b78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006c28 <_strtod_l+0xad0>
 8006b7c:	4f35      	ldr	r7, [pc, #212]	@ (8006c54 <_strtod_l+0xafc>)
 8006b7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006b82:	2600      	movs	r6, #0
 8006b84:	e7b1      	b.n	8006aea <_strtod_l+0x992>
 8006b86:	4f34      	ldr	r7, [pc, #208]	@ (8006c58 <_strtod_l+0xb00>)
 8006b88:	2600      	movs	r6, #0
 8006b8a:	e7aa      	b.n	8006ae2 <_strtod_l+0x98a>
 8006b8c:	4b32      	ldr	r3, [pc, #200]	@ (8006c58 <_strtod_l+0xb00>)
 8006b8e:	4630      	mov	r0, r6
 8006b90:	4639      	mov	r1, r7
 8006b92:	2200      	movs	r2, #0
 8006b94:	f7f9 fd48 	bl	8000628 <__aeabi_dmul>
 8006b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d09f      	beq.n	8006ae2 <_strtod_l+0x98a>
 8006ba2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006ba6:	e7a0      	b.n	8006aea <_strtod_l+0x992>
 8006ba8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006c30 <_strtod_l+0xad8>
 8006bac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006bb0:	ec57 6b17 	vmov	r6, r7, d7
 8006bb4:	e799      	b.n	8006aea <_strtod_l+0x992>
 8006bb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006bba:	9b08      	ldr	r3, [sp, #32]
 8006bbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1c1      	bne.n	8006b48 <_strtod_l+0x9f0>
 8006bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bc8:	0d1b      	lsrs	r3, r3, #20
 8006bca:	051b      	lsls	r3, r3, #20
 8006bcc:	429d      	cmp	r5, r3
 8006bce:	d1bb      	bne.n	8006b48 <_strtod_l+0x9f0>
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7fa f888 	bl	8000ce8 <__aeabi_d2lz>
 8006bd8:	f7f9 fcf8 	bl	80005cc <__aeabi_l2d>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4630      	mov	r0, r6
 8006be2:	4639      	mov	r1, r7
 8006be4:	f7f9 fb68 	bl	80002b8 <__aeabi_dsub>
 8006be8:	460b      	mov	r3, r1
 8006bea:	4602      	mov	r2, r0
 8006bec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006bf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bf6:	ea46 060a 	orr.w	r6, r6, sl
 8006bfa:	431e      	orrs	r6, r3
 8006bfc:	d06f      	beq.n	8006cde <_strtod_l+0xb86>
 8006bfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c38 <_strtod_l+0xae0>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 ff82 	bl	8000b0c <__aeabi_dcmplt>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f47f acd3 	bne.w	80065b4 <_strtod_l+0x45c>
 8006c0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006c40 <_strtod_l+0xae8>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c18:	f7f9 ff96 	bl	8000b48 <__aeabi_dcmpgt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d093      	beq.n	8006b48 <_strtod_l+0x9f0>
 8006c20:	e4c8      	b.n	80065b4 <_strtod_l+0x45c>
 8006c22:	bf00      	nop
 8006c24:	f3af 8000 	nop.w
 8006c28:	00000000 	.word	0x00000000
 8006c2c:	bff00000 	.word	0xbff00000
 8006c30:	00000000 	.word	0x00000000
 8006c34:	3ff00000 	.word	0x3ff00000
 8006c38:	94a03595 	.word	0x94a03595
 8006c3c:	3fdfffff 	.word	0x3fdfffff
 8006c40:	35afe535 	.word	0x35afe535
 8006c44:	3fe00000 	.word	0x3fe00000
 8006c48:	000fffff 	.word	0x000fffff
 8006c4c:	7ff00000 	.word	0x7ff00000
 8006c50:	7fefffff 	.word	0x7fefffff
 8006c54:	3ff00000 	.word	0x3ff00000
 8006c58:	3fe00000 	.word	0x3fe00000
 8006c5c:	7fe00000 	.word	0x7fe00000
 8006c60:	7c9fffff 	.word	0x7c9fffff
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	b323      	cbz	r3, 8006cb2 <_strtod_l+0xb5a>
 8006c68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006c6c:	d821      	bhi.n	8006cb2 <_strtod_l+0xb5a>
 8006c6e:	a328      	add	r3, pc, #160	@ (adr r3, 8006d10 <_strtod_l+0xbb8>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 ff52 	bl	8000b20 <__aeabi_dcmple>
 8006c7c:	b1a0      	cbz	r0, 8006ca8 <_strtod_l+0xb50>
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7f9 ffa9 	bl	8000bd8 <__aeabi_d2uiz>
 8006c86:	2801      	cmp	r0, #1
 8006c88:	bf38      	it	cc
 8006c8a:	2001      	movcc	r0, #1
 8006c8c:	f7f9 fc52 	bl	8000534 <__aeabi_ui2d>
 8006c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c92:	4606      	mov	r6, r0
 8006c94:	460f      	mov	r7, r1
 8006c96:	b9fb      	cbnz	r3, 8006cd8 <_strtod_l+0xb80>
 8006c98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006c9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ca0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006ca4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006ca8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006caa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006cae:	1b5b      	subs	r3, r3, r5
 8006cb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8006cb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006cb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006cba:	f002 ff21 	bl	8009b00 <__ulp>
 8006cbe:	4650      	mov	r0, sl
 8006cc0:	ec53 2b10 	vmov	r2, r3, d0
 8006cc4:	4659      	mov	r1, fp
 8006cc6:	f7f9 fcaf 	bl	8000628 <__aeabi_dmul>
 8006cca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006cce:	f7f9 faf5 	bl	80002bc <__adddf3>
 8006cd2:	4682      	mov	sl, r0
 8006cd4:	468b      	mov	fp, r1
 8006cd6:	e770      	b.n	8006bba <_strtod_l+0xa62>
 8006cd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006cdc:	e7e0      	b.n	8006ca0 <_strtod_l+0xb48>
 8006cde:	a30e      	add	r3, pc, #56	@ (adr r3, 8006d18 <_strtod_l+0xbc0>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 ff12 	bl	8000b0c <__aeabi_dcmplt>
 8006ce8:	e798      	b.n	8006c1c <_strtod_l+0xac4>
 8006cea:	2300      	movs	r3, #0
 8006cec:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006cf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	f7ff ba6d 	b.w	80061d2 <_strtod_l+0x7a>
 8006cf8:	2a65      	cmp	r2, #101	@ 0x65
 8006cfa:	f43f ab68 	beq.w	80063ce <_strtod_l+0x276>
 8006cfe:	2a45      	cmp	r2, #69	@ 0x45
 8006d00:	f43f ab65 	beq.w	80063ce <_strtod_l+0x276>
 8006d04:	2301      	movs	r3, #1
 8006d06:	f7ff bba0 	b.w	800644a <_strtod_l+0x2f2>
 8006d0a:	bf00      	nop
 8006d0c:	f3af 8000 	nop.w
 8006d10:	ffc00000 	.word	0xffc00000
 8006d14:	41dfffff 	.word	0x41dfffff
 8006d18:	94a03595 	.word	0x94a03595
 8006d1c:	3fcfffff 	.word	0x3fcfffff

08006d20 <_strtod_r>:
 8006d20:	4b01      	ldr	r3, [pc, #4]	@ (8006d28 <_strtod_r+0x8>)
 8006d22:	f7ff ba19 	b.w	8006158 <_strtod_l>
 8006d26:	bf00      	nop
 8006d28:	2000001c 	.word	0x2000001c

08006d2c <strtod>:
 8006d2c:	460a      	mov	r2, r1
 8006d2e:	4601      	mov	r1, r0
 8006d30:	4802      	ldr	r0, [pc, #8]	@ (8006d3c <strtod+0x10>)
 8006d32:	4b03      	ldr	r3, [pc, #12]	@ (8006d40 <strtod+0x14>)
 8006d34:	6800      	ldr	r0, [r0, #0]
 8006d36:	f7ff ba0f 	b.w	8006158 <_strtod_l>
 8006d3a:	bf00      	nop
 8006d3c:	20000188 	.word	0x20000188
 8006d40:	2000001c 	.word	0x2000001c

08006d44 <__cvt>:
 8006d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	ec57 6b10 	vmov	r6, r7, d0
 8006d4c:	2f00      	cmp	r7, #0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4619      	mov	r1, r3
 8006d52:	463b      	mov	r3, r7
 8006d54:	bfbb      	ittet	lt
 8006d56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d5a:	461f      	movlt	r7, r3
 8006d5c:	2300      	movge	r3, #0
 8006d5e:	232d      	movlt	r3, #45	@ 0x2d
 8006d60:	700b      	strb	r3, [r1, #0]
 8006d62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d68:	4691      	mov	r9, r2
 8006d6a:	f023 0820 	bic.w	r8, r3, #32
 8006d6e:	bfbc      	itt	lt
 8006d70:	4632      	movlt	r2, r6
 8006d72:	4616      	movlt	r6, r2
 8006d74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d78:	d005      	beq.n	8006d86 <__cvt+0x42>
 8006d7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006d7e:	d100      	bne.n	8006d82 <__cvt+0x3e>
 8006d80:	3401      	adds	r4, #1
 8006d82:	2102      	movs	r1, #2
 8006d84:	e000      	b.n	8006d88 <__cvt+0x44>
 8006d86:	2103      	movs	r1, #3
 8006d88:	ab03      	add	r3, sp, #12
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	ab02      	add	r3, sp, #8
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	ec47 6b10 	vmov	d0, r6, r7
 8006d94:	4653      	mov	r3, sl
 8006d96:	4622      	mov	r2, r4
 8006d98:	f001 f92a 	bl	8007ff0 <_dtoa_r>
 8006d9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006da0:	4605      	mov	r5, r0
 8006da2:	d119      	bne.n	8006dd8 <__cvt+0x94>
 8006da4:	f019 0f01 	tst.w	r9, #1
 8006da8:	d00e      	beq.n	8006dc8 <__cvt+0x84>
 8006daa:	eb00 0904 	add.w	r9, r0, r4
 8006dae:	2200      	movs	r2, #0
 8006db0:	2300      	movs	r3, #0
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fe9f 	bl	8000af8 <__aeabi_dcmpeq>
 8006dba:	b108      	cbz	r0, 8006dc0 <__cvt+0x7c>
 8006dbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dc0:	2230      	movs	r2, #48	@ 0x30
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	454b      	cmp	r3, r9
 8006dc6:	d31e      	bcc.n	8006e06 <__cvt+0xc2>
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dcc:	1b5b      	subs	r3, r3, r5
 8006dce:	4628      	mov	r0, r5
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	b004      	add	sp, #16
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ddc:	eb00 0904 	add.w	r9, r0, r4
 8006de0:	d1e5      	bne.n	8006dae <__cvt+0x6a>
 8006de2:	7803      	ldrb	r3, [r0, #0]
 8006de4:	2b30      	cmp	r3, #48	@ 0x30
 8006de6:	d10a      	bne.n	8006dfe <__cvt+0xba>
 8006de8:	2200      	movs	r2, #0
 8006dea:	2300      	movs	r3, #0
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f7f9 fe82 	bl	8000af8 <__aeabi_dcmpeq>
 8006df4:	b918      	cbnz	r0, 8006dfe <__cvt+0xba>
 8006df6:	f1c4 0401 	rsb	r4, r4, #1
 8006dfa:	f8ca 4000 	str.w	r4, [sl]
 8006dfe:	f8da 3000 	ldr.w	r3, [sl]
 8006e02:	4499      	add	r9, r3
 8006e04:	e7d3      	b.n	8006dae <__cvt+0x6a>
 8006e06:	1c59      	adds	r1, r3, #1
 8006e08:	9103      	str	r1, [sp, #12]
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e7d9      	b.n	8006dc2 <__cvt+0x7e>

08006e0e <__exponent>:
 8006e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e10:	2900      	cmp	r1, #0
 8006e12:	bfba      	itte	lt
 8006e14:	4249      	neglt	r1, r1
 8006e16:	232d      	movlt	r3, #45	@ 0x2d
 8006e18:	232b      	movge	r3, #43	@ 0x2b
 8006e1a:	2909      	cmp	r1, #9
 8006e1c:	7002      	strb	r2, [r0, #0]
 8006e1e:	7043      	strb	r3, [r0, #1]
 8006e20:	dd29      	ble.n	8006e76 <__exponent+0x68>
 8006e22:	f10d 0307 	add.w	r3, sp, #7
 8006e26:	461d      	mov	r5, r3
 8006e28:	270a      	movs	r7, #10
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e30:	fb07 1416 	mls	r4, r7, r6, r1
 8006e34:	3430      	adds	r4, #48	@ 0x30
 8006e36:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	2c63      	cmp	r4, #99	@ 0x63
 8006e3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e42:	4631      	mov	r1, r6
 8006e44:	dcf1      	bgt.n	8006e2a <__exponent+0x1c>
 8006e46:	3130      	adds	r1, #48	@ 0x30
 8006e48:	1e94      	subs	r4, r2, #2
 8006e4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e4e:	1c41      	adds	r1, r0, #1
 8006e50:	4623      	mov	r3, r4
 8006e52:	42ab      	cmp	r3, r5
 8006e54:	d30a      	bcc.n	8006e6c <__exponent+0x5e>
 8006e56:	f10d 0309 	add.w	r3, sp, #9
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	42ac      	cmp	r4, r5
 8006e5e:	bf88      	it	hi
 8006e60:	2300      	movhi	r3, #0
 8006e62:	3302      	adds	r3, #2
 8006e64:	4403      	add	r3, r0
 8006e66:	1a18      	subs	r0, r3, r0
 8006e68:	b003      	add	sp, #12
 8006e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e70:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e74:	e7ed      	b.n	8006e52 <__exponent+0x44>
 8006e76:	2330      	movs	r3, #48	@ 0x30
 8006e78:	3130      	adds	r1, #48	@ 0x30
 8006e7a:	7083      	strb	r3, [r0, #2]
 8006e7c:	70c1      	strb	r1, [r0, #3]
 8006e7e:	1d03      	adds	r3, r0, #4
 8006e80:	e7f1      	b.n	8006e66 <__exponent+0x58>
	...

08006e84 <_printf_float>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	b08d      	sub	sp, #52	@ 0x34
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006e90:	4616      	mov	r6, r2
 8006e92:	461f      	mov	r7, r3
 8006e94:	4605      	mov	r5, r0
 8006e96:	f000 ff71 	bl	8007d7c <_localeconv_r>
 8006e9a:	6803      	ldr	r3, [r0, #0]
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7f9 f9fe 	bl	80002a0 <strlen>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eac:	9005      	str	r0, [sp, #20]
 8006eae:	3307      	adds	r3, #7
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	f103 0208 	add.w	r2, r3, #8
 8006eb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ebc:	f8d4 b000 	ldr.w	fp, [r4]
 8006ec0:	f8c8 2000 	str.w	r2, [r8]
 8006ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ecc:	9307      	str	r3, [sp, #28]
 8006ece:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ed2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eda:	4b9c      	ldr	r3, [pc, #624]	@ (800714c <_printf_float+0x2c8>)
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee0:	f7f9 fe3c 	bl	8000b5c <__aeabi_dcmpun>
 8006ee4:	bb70      	cbnz	r0, 8006f44 <_printf_float+0xc0>
 8006ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eea:	4b98      	ldr	r3, [pc, #608]	@ (800714c <_printf_float+0x2c8>)
 8006eec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef0:	f7f9 fe16 	bl	8000b20 <__aeabi_dcmple>
 8006ef4:	bb30      	cbnz	r0, 8006f44 <_printf_float+0xc0>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4640      	mov	r0, r8
 8006efc:	4649      	mov	r1, r9
 8006efe:	f7f9 fe05 	bl	8000b0c <__aeabi_dcmplt>
 8006f02:	b110      	cbz	r0, 8006f0a <_printf_float+0x86>
 8006f04:	232d      	movs	r3, #45	@ 0x2d
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f0a:	4a91      	ldr	r2, [pc, #580]	@ (8007150 <_printf_float+0x2cc>)
 8006f0c:	4b91      	ldr	r3, [pc, #580]	@ (8007154 <_printf_float+0x2d0>)
 8006f0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f12:	bf8c      	ite	hi
 8006f14:	4690      	movhi	r8, r2
 8006f16:	4698      	movls	r8, r3
 8006f18:	2303      	movs	r3, #3
 8006f1a:	6123      	str	r3, [r4, #16]
 8006f1c:	f02b 0304 	bic.w	r3, fp, #4
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	f04f 0900 	mov.w	r9, #0
 8006f26:	9700      	str	r7, [sp, #0]
 8006f28:	4633      	mov	r3, r6
 8006f2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 f9d2 	bl	80072d8 <_printf_common>
 8006f34:	3001      	adds	r0, #1
 8006f36:	f040 808d 	bne.w	8007054 <_printf_float+0x1d0>
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	b00d      	add	sp, #52	@ 0x34
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	f7f9 fe06 	bl	8000b5c <__aeabi_dcmpun>
 8006f50:	b140      	cbz	r0, 8006f64 <_printf_float+0xe0>
 8006f52:	464b      	mov	r3, r9
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bfbc      	itt	lt
 8006f58:	232d      	movlt	r3, #45	@ 0x2d
 8006f5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8007158 <_printf_float+0x2d4>)
 8006f60:	4b7e      	ldr	r3, [pc, #504]	@ (800715c <_printf_float+0x2d8>)
 8006f62:	e7d4      	b.n	8006f0e <_printf_float+0x8a>
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f6a:	9206      	str	r2, [sp, #24]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	d13b      	bne.n	8006fe8 <_printf_float+0x164>
 8006f70:	2306      	movs	r3, #6
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6022      	str	r2, [r4, #0]
 8006f7c:	9303      	str	r3, [sp, #12]
 8006f7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006f84:	ab09      	add	r3, sp, #36	@ 0x24
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	6861      	ldr	r1, [r4, #4]
 8006f8a:	ec49 8b10 	vmov	d0, r8, r9
 8006f8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7ff fed6 	bl	8006d44 <__cvt>
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f9c:	2b47      	cmp	r3, #71	@ 0x47
 8006f9e:	4680      	mov	r8, r0
 8006fa0:	d129      	bne.n	8006ff6 <_printf_float+0x172>
 8006fa2:	1cc8      	adds	r0, r1, #3
 8006fa4:	db02      	blt.n	8006fac <_printf_float+0x128>
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	dd41      	ble.n	8007030 <_printf_float+0x1ac>
 8006fac:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fb0:	fa5f fa8a 	uxtb.w	sl, sl
 8006fb4:	3901      	subs	r1, #1
 8006fb6:	4652      	mov	r2, sl
 8006fb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fbe:	f7ff ff26 	bl	8006e0e <__exponent>
 8006fc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fc4:	1813      	adds	r3, r2, r0
 8006fc6:	2a01      	cmp	r2, #1
 8006fc8:	4681      	mov	r9, r0
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	dc02      	bgt.n	8006fd4 <_printf_float+0x150>
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	07d2      	lsls	r2, r2, #31
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_float+0x154>
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0a2      	beq.n	8006f26 <_printf_float+0xa2>
 8006fe0:	232d      	movs	r3, #45	@ 0x2d
 8006fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe6:	e79e      	b.n	8006f26 <_printf_float+0xa2>
 8006fe8:	9a06      	ldr	r2, [sp, #24]
 8006fea:	2a47      	cmp	r2, #71	@ 0x47
 8006fec:	d1c2      	bne.n	8006f74 <_printf_float+0xf0>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1c0      	bne.n	8006f74 <_printf_float+0xf0>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7bd      	b.n	8006f72 <_printf_float+0xee>
 8006ff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ffa:	d9db      	bls.n	8006fb4 <_printf_float+0x130>
 8006ffc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007000:	d118      	bne.n	8007034 <_printf_float+0x1b0>
 8007002:	2900      	cmp	r1, #0
 8007004:	6863      	ldr	r3, [r4, #4]
 8007006:	dd0b      	ble.n	8007020 <_printf_float+0x19c>
 8007008:	6121      	str	r1, [r4, #16]
 800700a:	b913      	cbnz	r3, 8007012 <_printf_float+0x18e>
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	07d0      	lsls	r0, r2, #31
 8007010:	d502      	bpl.n	8007018 <_printf_float+0x194>
 8007012:	3301      	adds	r3, #1
 8007014:	440b      	add	r3, r1
 8007016:	6123      	str	r3, [r4, #16]
 8007018:	65a1      	str	r1, [r4, #88]	@ 0x58
 800701a:	f04f 0900 	mov.w	r9, #0
 800701e:	e7db      	b.n	8006fd8 <_printf_float+0x154>
 8007020:	b913      	cbnz	r3, 8007028 <_printf_float+0x1a4>
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	07d2      	lsls	r2, r2, #31
 8007026:	d501      	bpl.n	800702c <_printf_float+0x1a8>
 8007028:	3302      	adds	r3, #2
 800702a:	e7f4      	b.n	8007016 <_printf_float+0x192>
 800702c:	2301      	movs	r3, #1
 800702e:	e7f2      	b.n	8007016 <_printf_float+0x192>
 8007030:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007036:	4299      	cmp	r1, r3
 8007038:	db05      	blt.n	8007046 <_printf_float+0x1c2>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	6121      	str	r1, [r4, #16]
 800703e:	07d8      	lsls	r0, r3, #31
 8007040:	d5ea      	bpl.n	8007018 <_printf_float+0x194>
 8007042:	1c4b      	adds	r3, r1, #1
 8007044:	e7e7      	b.n	8007016 <_printf_float+0x192>
 8007046:	2900      	cmp	r1, #0
 8007048:	bfd4      	ite	le
 800704a:	f1c1 0202 	rsble	r2, r1, #2
 800704e:	2201      	movgt	r2, #1
 8007050:	4413      	add	r3, r2
 8007052:	e7e0      	b.n	8007016 <_printf_float+0x192>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	055a      	lsls	r2, r3, #21
 8007058:	d407      	bmi.n	800706a <_printf_float+0x1e6>
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	4642      	mov	r2, r8
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	d12b      	bne.n	80070c0 <_printf_float+0x23c>
 8007068:	e767      	b.n	8006f3a <_printf_float+0xb6>
 800706a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800706e:	f240 80dd 	bls.w	800722c <_printf_float+0x3a8>
 8007072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007076:	2200      	movs	r2, #0
 8007078:	2300      	movs	r3, #0
 800707a:	f7f9 fd3d 	bl	8000af8 <__aeabi_dcmpeq>
 800707e:	2800      	cmp	r0, #0
 8007080:	d033      	beq.n	80070ea <_printf_float+0x266>
 8007082:	4a37      	ldr	r2, [pc, #220]	@ (8007160 <_printf_float+0x2dc>)
 8007084:	2301      	movs	r3, #1
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f af54 	beq.w	8006f3a <_printf_float+0xb6>
 8007092:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007096:	4543      	cmp	r3, r8
 8007098:	db02      	blt.n	80070a0 <_printf_float+0x21c>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	07d8      	lsls	r0, r3, #31
 800709e:	d50f      	bpl.n	80070c0 <_printf_float+0x23c>
 80070a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af45 	beq.w	8006f3a <_printf_float+0xb6>
 80070b0:	f04f 0900 	mov.w	r9, #0
 80070b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80070b8:	f104 0a1a 	add.w	sl, r4, #26
 80070bc:	45c8      	cmp	r8, r9
 80070be:	dc09      	bgt.n	80070d4 <_printf_float+0x250>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	079b      	lsls	r3, r3, #30
 80070c4:	f100 8103 	bmi.w	80072ce <_printf_float+0x44a>
 80070c8:	68e0      	ldr	r0, [r4, #12]
 80070ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070cc:	4298      	cmp	r0, r3
 80070ce:	bfb8      	it	lt
 80070d0:	4618      	movlt	r0, r3
 80070d2:	e734      	b.n	8006f3e <_printf_float+0xba>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4652      	mov	r2, sl
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f43f af2b 	beq.w	8006f3a <_printf_float+0xb6>
 80070e4:	f109 0901 	add.w	r9, r9, #1
 80070e8:	e7e8      	b.n	80070bc <_printf_float+0x238>
 80070ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dc39      	bgt.n	8007164 <_printf_float+0x2e0>
 80070f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007160 <_printf_float+0x2dc>)
 80070f2:	2301      	movs	r3, #1
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f af1d 	beq.w	8006f3a <_printf_float+0xb6>
 8007100:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007104:	ea59 0303 	orrs.w	r3, r9, r3
 8007108:	d102      	bne.n	8007110 <_printf_float+0x28c>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	07d9      	lsls	r1, r3, #31
 800710e:	d5d7      	bpl.n	80070c0 <_printf_float+0x23c>
 8007110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af0d 	beq.w	8006f3a <_printf_float+0xb6>
 8007120:	f04f 0a00 	mov.w	sl, #0
 8007124:	f104 0b1a 	add.w	fp, r4, #26
 8007128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712a:	425b      	negs	r3, r3
 800712c:	4553      	cmp	r3, sl
 800712e:	dc01      	bgt.n	8007134 <_printf_float+0x2b0>
 8007130:	464b      	mov	r3, r9
 8007132:	e793      	b.n	800705c <_printf_float+0x1d8>
 8007134:	2301      	movs	r3, #1
 8007136:	465a      	mov	r2, fp
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f aefb 	beq.w	8006f3a <_printf_float+0xb6>
 8007144:	f10a 0a01 	add.w	sl, sl, #1
 8007148:	e7ee      	b.n	8007128 <_printf_float+0x2a4>
 800714a:	bf00      	nop
 800714c:	7fefffff 	.word	0x7fefffff
 8007150:	0800aa0e 	.word	0x0800aa0e
 8007154:	0800aa0a 	.word	0x0800aa0a
 8007158:	0800aa16 	.word	0x0800aa16
 800715c:	0800aa12 	.word	0x0800aa12
 8007160:	0800aa1a 	.word	0x0800aa1a
 8007164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007166:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800716a:	4553      	cmp	r3, sl
 800716c:	bfa8      	it	ge
 800716e:	4653      	movge	r3, sl
 8007170:	2b00      	cmp	r3, #0
 8007172:	4699      	mov	r9, r3
 8007174:	dc36      	bgt.n	80071e4 <_printf_float+0x360>
 8007176:	f04f 0b00 	mov.w	fp, #0
 800717a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800717e:	f104 021a 	add.w	r2, r4, #26
 8007182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007184:	9306      	str	r3, [sp, #24]
 8007186:	eba3 0309 	sub.w	r3, r3, r9
 800718a:	455b      	cmp	r3, fp
 800718c:	dc31      	bgt.n	80071f2 <_printf_float+0x36e>
 800718e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007190:	459a      	cmp	sl, r3
 8007192:	dc3a      	bgt.n	800720a <_printf_float+0x386>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d437      	bmi.n	800720a <_printf_float+0x386>
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	ebaa 0903 	sub.w	r9, sl, r3
 80071a0:	9b06      	ldr	r3, [sp, #24]
 80071a2:	ebaa 0303 	sub.w	r3, sl, r3
 80071a6:	4599      	cmp	r9, r3
 80071a8:	bfa8      	it	ge
 80071aa:	4699      	movge	r9, r3
 80071ac:	f1b9 0f00 	cmp.w	r9, #0
 80071b0:	dc33      	bgt.n	800721a <_printf_float+0x396>
 80071b2:	f04f 0800 	mov.w	r8, #0
 80071b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ba:	f104 0b1a 	add.w	fp, r4, #26
 80071be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c0:	ebaa 0303 	sub.w	r3, sl, r3
 80071c4:	eba3 0309 	sub.w	r3, r3, r9
 80071c8:	4543      	cmp	r3, r8
 80071ca:	f77f af79 	ble.w	80070c0 <_printf_float+0x23c>
 80071ce:	2301      	movs	r3, #1
 80071d0:	465a      	mov	r2, fp
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	f43f aeae 	beq.w	8006f3a <_printf_float+0xb6>
 80071de:	f108 0801 	add.w	r8, r8, #1
 80071e2:	e7ec      	b.n	80071be <_printf_float+0x33a>
 80071e4:	4642      	mov	r2, r8
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	d1c2      	bne.n	8007176 <_printf_float+0x2f2>
 80071f0:	e6a3      	b.n	8006f3a <_printf_float+0xb6>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4631      	mov	r1, r6
 80071f6:	4628      	mov	r0, r5
 80071f8:	9206      	str	r2, [sp, #24]
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f ae9c 	beq.w	8006f3a <_printf_float+0xb6>
 8007202:	9a06      	ldr	r2, [sp, #24]
 8007204:	f10b 0b01 	add.w	fp, fp, #1
 8007208:	e7bb      	b.n	8007182 <_printf_float+0x2fe>
 800720a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	d1c0      	bne.n	800719a <_printf_float+0x316>
 8007218:	e68f      	b.n	8006f3a <_printf_float+0xb6>
 800721a:	9a06      	ldr	r2, [sp, #24]
 800721c:	464b      	mov	r3, r9
 800721e:	4442      	add	r2, r8
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	d1c3      	bne.n	80071b2 <_printf_float+0x32e>
 800722a:	e686      	b.n	8006f3a <_printf_float+0xb6>
 800722c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007230:	f1ba 0f01 	cmp.w	sl, #1
 8007234:	dc01      	bgt.n	800723a <_printf_float+0x3b6>
 8007236:	07db      	lsls	r3, r3, #31
 8007238:	d536      	bpl.n	80072a8 <_printf_float+0x424>
 800723a:	2301      	movs	r3, #1
 800723c:	4642      	mov	r2, r8
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f ae78 	beq.w	8006f3a <_printf_float+0xb6>
 800724a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	47b8      	blx	r7
 8007254:	3001      	adds	r0, #1
 8007256:	f43f ae70 	beq.w	8006f3a <_printf_float+0xb6>
 800725a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007266:	f7f9 fc47 	bl	8000af8 <__aeabi_dcmpeq>
 800726a:	b9c0      	cbnz	r0, 800729e <_printf_float+0x41a>
 800726c:	4653      	mov	r3, sl
 800726e:	f108 0201 	add.w	r2, r8, #1
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d10c      	bne.n	8007296 <_printf_float+0x412>
 800727c:	e65d      	b.n	8006f3a <_printf_float+0xb6>
 800727e:	2301      	movs	r3, #1
 8007280:	465a      	mov	r2, fp
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae56 	beq.w	8006f3a <_printf_float+0xb6>
 800728e:	f108 0801 	add.w	r8, r8, #1
 8007292:	45d0      	cmp	r8, sl
 8007294:	dbf3      	blt.n	800727e <_printf_float+0x3fa>
 8007296:	464b      	mov	r3, r9
 8007298:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800729c:	e6df      	b.n	800705e <_printf_float+0x1da>
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	f104 0b1a 	add.w	fp, r4, #26
 80072a6:	e7f4      	b.n	8007292 <_printf_float+0x40e>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4642      	mov	r2, r8
 80072ac:	e7e1      	b.n	8007272 <_printf_float+0x3ee>
 80072ae:	2301      	movs	r3, #1
 80072b0:	464a      	mov	r2, r9
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	f43f ae3e 	beq.w	8006f3a <_printf_float+0xb6>
 80072be:	f108 0801 	add.w	r8, r8, #1
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072c6:	1a5b      	subs	r3, r3, r1
 80072c8:	4543      	cmp	r3, r8
 80072ca:	dcf0      	bgt.n	80072ae <_printf_float+0x42a>
 80072cc:	e6fc      	b.n	80070c8 <_printf_float+0x244>
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	f104 0919 	add.w	r9, r4, #25
 80072d6:	e7f4      	b.n	80072c2 <_printf_float+0x43e>

080072d8 <_printf_common>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	4698      	mov	r8, r3
 80072e0:	688a      	ldr	r2, [r1, #8]
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfb8      	it	lt
 80072ec:	4613      	movlt	r3, r2
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072f4:	4607      	mov	r7, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	b10a      	cbz	r2, 80072fe <_printf_common+0x26>
 80072fa:	3301      	adds	r3, #1
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0699      	lsls	r1, r3, #26
 8007302:	bf42      	ittt	mi
 8007304:	6833      	ldrmi	r3, [r6, #0]
 8007306:	3302      	addmi	r3, #2
 8007308:	6033      	strmi	r3, [r6, #0]
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	f015 0506 	ands.w	r5, r5, #6
 8007310:	d106      	bne.n	8007320 <_printf_common+0x48>
 8007312:	f104 0a19 	add.w	sl, r4, #25
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	6832      	ldr	r2, [r6, #0]
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	42ab      	cmp	r3, r5
 800731e:	dc26      	bgt.n	800736e <_printf_common+0x96>
 8007320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007324:	6822      	ldr	r2, [r4, #0]
 8007326:	3b00      	subs	r3, #0
 8007328:	bf18      	it	ne
 800732a:	2301      	movne	r3, #1
 800732c:	0692      	lsls	r2, r2, #26
 800732e:	d42b      	bmi.n	8007388 <_printf_common+0xb0>
 8007330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007334:	4641      	mov	r1, r8
 8007336:	4638      	mov	r0, r7
 8007338:	47c8      	blx	r9
 800733a:	3001      	adds	r0, #1
 800733c:	d01e      	beq.n	800737c <_printf_common+0xa4>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	6922      	ldr	r2, [r4, #16]
 8007342:	f003 0306 	and.w	r3, r3, #6
 8007346:	2b04      	cmp	r3, #4
 8007348:	bf02      	ittt	eq
 800734a:	68e5      	ldreq	r5, [r4, #12]
 800734c:	6833      	ldreq	r3, [r6, #0]
 800734e:	1aed      	subeq	r5, r5, r3
 8007350:	68a3      	ldr	r3, [r4, #8]
 8007352:	bf0c      	ite	eq
 8007354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007358:	2500      	movne	r5, #0
 800735a:	4293      	cmp	r3, r2
 800735c:	bfc4      	itt	gt
 800735e:	1a9b      	subgt	r3, r3, r2
 8007360:	18ed      	addgt	r5, r5, r3
 8007362:	2600      	movs	r6, #0
 8007364:	341a      	adds	r4, #26
 8007366:	42b5      	cmp	r5, r6
 8007368:	d11a      	bne.n	80073a0 <_printf_common+0xc8>
 800736a:	2000      	movs	r0, #0
 800736c:	e008      	b.n	8007380 <_printf_common+0xa8>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4641      	mov	r1, r8
 8007374:	4638      	mov	r0, r7
 8007376:	47c8      	blx	r9
 8007378:	3001      	adds	r0, #1
 800737a:	d103      	bne.n	8007384 <_printf_common+0xac>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	3501      	adds	r5, #1
 8007386:	e7c6      	b.n	8007316 <_printf_common+0x3e>
 8007388:	18e1      	adds	r1, r4, r3
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	2030      	movs	r0, #48	@ 0x30
 800738e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007392:	4422      	add	r2, r4
 8007394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800739c:	3302      	adds	r3, #2
 800739e:	e7c7      	b.n	8007330 <_printf_common+0x58>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4622      	mov	r2, r4
 80073a4:	4641      	mov	r1, r8
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c8      	blx	r9
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0e6      	beq.n	800737c <_printf_common+0xa4>
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7d9      	b.n	8007366 <_printf_common+0x8e>
	...

080073b4 <_printf_i>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	7e0f      	ldrb	r7, [r1, #24]
 80073ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073bc:	2f78      	cmp	r7, #120	@ 0x78
 80073be:	4691      	mov	r9, r2
 80073c0:	4680      	mov	r8, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	469a      	mov	sl, r3
 80073c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073ca:	d807      	bhi.n	80073dc <_printf_i+0x28>
 80073cc:	2f62      	cmp	r7, #98	@ 0x62
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x32>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	f000 80d1 	beq.w	8007578 <_printf_i+0x1c4>
 80073d6:	2f58      	cmp	r7, #88	@ 0x58
 80073d8:	f000 80b8 	beq.w	800754c <_printf_i+0x198>
 80073dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073e4:	e03a      	b.n	800745c <_printf_i+0xa8>
 80073e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073ea:	2b15      	cmp	r3, #21
 80073ec:	d8f6      	bhi.n	80073dc <_printf_i+0x28>
 80073ee:	a101      	add	r1, pc, #4	@ (adr r1, 80073f4 <_printf_i+0x40>)
 80073f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	08007461 	.word	0x08007461
 80073fc:	080073dd 	.word	0x080073dd
 8007400:	080073dd 	.word	0x080073dd
 8007404:	080073dd 	.word	0x080073dd
 8007408:	080073dd 	.word	0x080073dd
 800740c:	08007461 	.word	0x08007461
 8007410:	080073dd 	.word	0x080073dd
 8007414:	080073dd 	.word	0x080073dd
 8007418:	080073dd 	.word	0x080073dd
 800741c:	080073dd 	.word	0x080073dd
 8007420:	0800755f 	.word	0x0800755f
 8007424:	0800748b 	.word	0x0800748b
 8007428:	08007519 	.word	0x08007519
 800742c:	080073dd 	.word	0x080073dd
 8007430:	080073dd 	.word	0x080073dd
 8007434:	08007581 	.word	0x08007581
 8007438:	080073dd 	.word	0x080073dd
 800743c:	0800748b 	.word	0x0800748b
 8007440:	080073dd 	.word	0x080073dd
 8007444:	080073dd 	.word	0x080073dd
 8007448:	08007521 	.word	0x08007521
 800744c:	6833      	ldr	r3, [r6, #0]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6032      	str	r2, [r6, #0]
 8007454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800745c:	2301      	movs	r3, #1
 800745e:	e09c      	b.n	800759a <_printf_i+0x1e6>
 8007460:	6833      	ldr	r3, [r6, #0]
 8007462:	6820      	ldr	r0, [r4, #0]
 8007464:	1d19      	adds	r1, r3, #4
 8007466:	6031      	str	r1, [r6, #0]
 8007468:	0606      	lsls	r6, r0, #24
 800746a:	d501      	bpl.n	8007470 <_printf_i+0xbc>
 800746c:	681d      	ldr	r5, [r3, #0]
 800746e:	e003      	b.n	8007478 <_printf_i+0xc4>
 8007470:	0645      	lsls	r5, r0, #25
 8007472:	d5fb      	bpl.n	800746c <_printf_i+0xb8>
 8007474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007478:	2d00      	cmp	r5, #0
 800747a:	da03      	bge.n	8007484 <_printf_i+0xd0>
 800747c:	232d      	movs	r3, #45	@ 0x2d
 800747e:	426d      	negs	r5, r5
 8007480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007484:	4858      	ldr	r0, [pc, #352]	@ (80075e8 <_printf_i+0x234>)
 8007486:	230a      	movs	r3, #10
 8007488:	e011      	b.n	80074ae <_printf_i+0xfa>
 800748a:	6821      	ldr	r1, [r4, #0]
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	0608      	lsls	r0, r1, #24
 8007490:	f853 5b04 	ldr.w	r5, [r3], #4
 8007494:	d402      	bmi.n	800749c <_printf_i+0xe8>
 8007496:	0649      	lsls	r1, r1, #25
 8007498:	bf48      	it	mi
 800749a:	b2ad      	uxthmi	r5, r5
 800749c:	2f6f      	cmp	r7, #111	@ 0x6f
 800749e:	4852      	ldr	r0, [pc, #328]	@ (80075e8 <_printf_i+0x234>)
 80074a0:	6033      	str	r3, [r6, #0]
 80074a2:	bf14      	ite	ne
 80074a4:	230a      	movne	r3, #10
 80074a6:	2308      	moveq	r3, #8
 80074a8:	2100      	movs	r1, #0
 80074aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ae:	6866      	ldr	r6, [r4, #4]
 80074b0:	60a6      	str	r6, [r4, #8]
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	db05      	blt.n	80074c2 <_printf_i+0x10e>
 80074b6:	6821      	ldr	r1, [r4, #0]
 80074b8:	432e      	orrs	r6, r5
 80074ba:	f021 0104 	bic.w	r1, r1, #4
 80074be:	6021      	str	r1, [r4, #0]
 80074c0:	d04b      	beq.n	800755a <_printf_i+0x1a6>
 80074c2:	4616      	mov	r6, r2
 80074c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80074c8:	fb03 5711 	mls	r7, r3, r1, r5
 80074cc:	5dc7      	ldrb	r7, [r0, r7]
 80074ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074d2:	462f      	mov	r7, r5
 80074d4:	42bb      	cmp	r3, r7
 80074d6:	460d      	mov	r5, r1
 80074d8:	d9f4      	bls.n	80074c4 <_printf_i+0x110>
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d10b      	bne.n	80074f6 <_printf_i+0x142>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	07df      	lsls	r7, r3, #31
 80074e2:	d508      	bpl.n	80074f6 <_printf_i+0x142>
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	6861      	ldr	r1, [r4, #4]
 80074e8:	4299      	cmp	r1, r3
 80074ea:	bfde      	ittt	le
 80074ec:	2330      	movle	r3, #48	@ 0x30
 80074ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074f6:	1b92      	subs	r2, r2, r6
 80074f8:	6122      	str	r2, [r4, #16]
 80074fa:	f8cd a000 	str.w	sl, [sp]
 80074fe:	464b      	mov	r3, r9
 8007500:	aa03      	add	r2, sp, #12
 8007502:	4621      	mov	r1, r4
 8007504:	4640      	mov	r0, r8
 8007506:	f7ff fee7 	bl	80072d8 <_printf_common>
 800750a:	3001      	adds	r0, #1
 800750c:	d14a      	bne.n	80075a4 <_printf_i+0x1f0>
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	b004      	add	sp, #16
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	f043 0320 	orr.w	r3, r3, #32
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	4832      	ldr	r0, [pc, #200]	@ (80075ec <_printf_i+0x238>)
 8007522:	2778      	movs	r7, #120	@ 0x78
 8007524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	6831      	ldr	r1, [r6, #0]
 800752c:	061f      	lsls	r7, r3, #24
 800752e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007532:	d402      	bmi.n	800753a <_printf_i+0x186>
 8007534:	065f      	lsls	r7, r3, #25
 8007536:	bf48      	it	mi
 8007538:	b2ad      	uxthmi	r5, r5
 800753a:	6031      	str	r1, [r6, #0]
 800753c:	07d9      	lsls	r1, r3, #31
 800753e:	bf44      	itt	mi
 8007540:	f043 0320 	orrmi.w	r3, r3, #32
 8007544:	6023      	strmi	r3, [r4, #0]
 8007546:	b11d      	cbz	r5, 8007550 <_printf_i+0x19c>
 8007548:	2310      	movs	r3, #16
 800754a:	e7ad      	b.n	80074a8 <_printf_i+0xf4>
 800754c:	4826      	ldr	r0, [pc, #152]	@ (80075e8 <_printf_i+0x234>)
 800754e:	e7e9      	b.n	8007524 <_printf_i+0x170>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	f023 0320 	bic.w	r3, r3, #32
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	e7f6      	b.n	8007548 <_printf_i+0x194>
 800755a:	4616      	mov	r6, r2
 800755c:	e7bd      	b.n	80074da <_printf_i+0x126>
 800755e:	6833      	ldr	r3, [r6, #0]
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	6961      	ldr	r1, [r4, #20]
 8007564:	1d18      	adds	r0, r3, #4
 8007566:	6030      	str	r0, [r6, #0]
 8007568:	062e      	lsls	r6, r5, #24
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	d501      	bpl.n	8007572 <_printf_i+0x1be>
 800756e:	6019      	str	r1, [r3, #0]
 8007570:	e002      	b.n	8007578 <_printf_i+0x1c4>
 8007572:	0668      	lsls	r0, r5, #25
 8007574:	d5fb      	bpl.n	800756e <_printf_i+0x1ba>
 8007576:	8019      	strh	r1, [r3, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	4616      	mov	r6, r2
 800757e:	e7bc      	b.n	80074fa <_printf_i+0x146>
 8007580:	6833      	ldr	r3, [r6, #0]
 8007582:	1d1a      	adds	r2, r3, #4
 8007584:	6032      	str	r2, [r6, #0]
 8007586:	681e      	ldr	r6, [r3, #0]
 8007588:	6862      	ldr	r2, [r4, #4]
 800758a:	2100      	movs	r1, #0
 800758c:	4630      	mov	r0, r6
 800758e:	f7f8 fe37 	bl	8000200 <memchr>
 8007592:	b108      	cbz	r0, 8007598 <_printf_i+0x1e4>
 8007594:	1b80      	subs	r0, r0, r6
 8007596:	6060      	str	r0, [r4, #4]
 8007598:	6863      	ldr	r3, [r4, #4]
 800759a:	6123      	str	r3, [r4, #16]
 800759c:	2300      	movs	r3, #0
 800759e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075a2:	e7aa      	b.n	80074fa <_printf_i+0x146>
 80075a4:	6923      	ldr	r3, [r4, #16]
 80075a6:	4632      	mov	r2, r6
 80075a8:	4649      	mov	r1, r9
 80075aa:	4640      	mov	r0, r8
 80075ac:	47d0      	blx	sl
 80075ae:	3001      	adds	r0, #1
 80075b0:	d0ad      	beq.n	800750e <_printf_i+0x15a>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	079b      	lsls	r3, r3, #30
 80075b6:	d413      	bmi.n	80075e0 <_printf_i+0x22c>
 80075b8:	68e0      	ldr	r0, [r4, #12]
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	4298      	cmp	r0, r3
 80075be:	bfb8      	it	lt
 80075c0:	4618      	movlt	r0, r3
 80075c2:	e7a6      	b.n	8007512 <_printf_i+0x15e>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4632      	mov	r2, r6
 80075c8:	4649      	mov	r1, r9
 80075ca:	4640      	mov	r0, r8
 80075cc:	47d0      	blx	sl
 80075ce:	3001      	adds	r0, #1
 80075d0:	d09d      	beq.n	800750e <_printf_i+0x15a>
 80075d2:	3501      	adds	r5, #1
 80075d4:	68e3      	ldr	r3, [r4, #12]
 80075d6:	9903      	ldr	r1, [sp, #12]
 80075d8:	1a5b      	subs	r3, r3, r1
 80075da:	42ab      	cmp	r3, r5
 80075dc:	dcf2      	bgt.n	80075c4 <_printf_i+0x210>
 80075de:	e7eb      	b.n	80075b8 <_printf_i+0x204>
 80075e0:	2500      	movs	r5, #0
 80075e2:	f104 0619 	add.w	r6, r4, #25
 80075e6:	e7f5      	b.n	80075d4 <_printf_i+0x220>
 80075e8:	0800aa1c 	.word	0x0800aa1c
 80075ec:	0800aa2d 	.word	0x0800aa2d

080075f0 <_scanf_float>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	b087      	sub	sp, #28
 80075f6:	4691      	mov	r9, r2
 80075f8:	9303      	str	r3, [sp, #12]
 80075fa:	688b      	ldr	r3, [r1, #8]
 80075fc:	1e5a      	subs	r2, r3, #1
 80075fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007602:	bf81      	itttt	hi
 8007604:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007608:	eb03 0b05 	addhi.w	fp, r3, r5
 800760c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007610:	608b      	strhi	r3, [r1, #8]
 8007612:	680b      	ldr	r3, [r1, #0]
 8007614:	460a      	mov	r2, r1
 8007616:	f04f 0500 	mov.w	r5, #0
 800761a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800761e:	f842 3b1c 	str.w	r3, [r2], #28
 8007622:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007626:	4680      	mov	r8, r0
 8007628:	460c      	mov	r4, r1
 800762a:	bf98      	it	ls
 800762c:	f04f 0b00 	movls.w	fp, #0
 8007630:	9201      	str	r2, [sp, #4]
 8007632:	4616      	mov	r6, r2
 8007634:	46aa      	mov	sl, r5
 8007636:	462f      	mov	r7, r5
 8007638:	9502      	str	r5, [sp, #8]
 800763a:	68a2      	ldr	r2, [r4, #8]
 800763c:	b15a      	cbz	r2, 8007656 <_scanf_float+0x66>
 800763e:	f8d9 3000 	ldr.w	r3, [r9]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b4e      	cmp	r3, #78	@ 0x4e
 8007646:	d863      	bhi.n	8007710 <_scanf_float+0x120>
 8007648:	2b40      	cmp	r3, #64	@ 0x40
 800764a:	d83b      	bhi.n	80076c4 <_scanf_float+0xd4>
 800764c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007650:	b2c8      	uxtb	r0, r1
 8007652:	280e      	cmp	r0, #14
 8007654:	d939      	bls.n	80076ca <_scanf_float+0xda>
 8007656:	b11f      	cbz	r7, 8007660 <_scanf_float+0x70>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007664:	f1ba 0f01 	cmp.w	sl, #1
 8007668:	f200 8114 	bhi.w	8007894 <_scanf_float+0x2a4>
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	429e      	cmp	r6, r3
 8007670:	f200 8105 	bhi.w	800787e <_scanf_float+0x28e>
 8007674:	2001      	movs	r0, #1
 8007676:	b007      	add	sp, #28
 8007678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007680:	2a0d      	cmp	r2, #13
 8007682:	d8e8      	bhi.n	8007656 <_scanf_float+0x66>
 8007684:	a101      	add	r1, pc, #4	@ (adr r1, 800768c <_scanf_float+0x9c>)
 8007686:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800768a:	bf00      	nop
 800768c:	080077d5 	.word	0x080077d5
 8007690:	08007657 	.word	0x08007657
 8007694:	08007657 	.word	0x08007657
 8007698:	08007657 	.word	0x08007657
 800769c:	08007831 	.word	0x08007831
 80076a0:	0800780b 	.word	0x0800780b
 80076a4:	08007657 	.word	0x08007657
 80076a8:	08007657 	.word	0x08007657
 80076ac:	080077e3 	.word	0x080077e3
 80076b0:	08007657 	.word	0x08007657
 80076b4:	08007657 	.word	0x08007657
 80076b8:	08007657 	.word	0x08007657
 80076bc:	08007657 	.word	0x08007657
 80076c0:	0800779f 	.word	0x0800779f
 80076c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80076c8:	e7da      	b.n	8007680 <_scanf_float+0x90>
 80076ca:	290e      	cmp	r1, #14
 80076cc:	d8c3      	bhi.n	8007656 <_scanf_float+0x66>
 80076ce:	a001      	add	r0, pc, #4	@ (adr r0, 80076d4 <_scanf_float+0xe4>)
 80076d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076d4:	0800778f 	.word	0x0800778f
 80076d8:	08007657 	.word	0x08007657
 80076dc:	0800778f 	.word	0x0800778f
 80076e0:	0800781f 	.word	0x0800781f
 80076e4:	08007657 	.word	0x08007657
 80076e8:	08007731 	.word	0x08007731
 80076ec:	08007775 	.word	0x08007775
 80076f0:	08007775 	.word	0x08007775
 80076f4:	08007775 	.word	0x08007775
 80076f8:	08007775 	.word	0x08007775
 80076fc:	08007775 	.word	0x08007775
 8007700:	08007775 	.word	0x08007775
 8007704:	08007775 	.word	0x08007775
 8007708:	08007775 	.word	0x08007775
 800770c:	08007775 	.word	0x08007775
 8007710:	2b6e      	cmp	r3, #110	@ 0x6e
 8007712:	d809      	bhi.n	8007728 <_scanf_float+0x138>
 8007714:	2b60      	cmp	r3, #96	@ 0x60
 8007716:	d8b1      	bhi.n	800767c <_scanf_float+0x8c>
 8007718:	2b54      	cmp	r3, #84	@ 0x54
 800771a:	d07b      	beq.n	8007814 <_scanf_float+0x224>
 800771c:	2b59      	cmp	r3, #89	@ 0x59
 800771e:	d19a      	bne.n	8007656 <_scanf_float+0x66>
 8007720:	2d07      	cmp	r5, #7
 8007722:	d198      	bne.n	8007656 <_scanf_float+0x66>
 8007724:	2508      	movs	r5, #8
 8007726:	e02f      	b.n	8007788 <_scanf_float+0x198>
 8007728:	2b74      	cmp	r3, #116	@ 0x74
 800772a:	d073      	beq.n	8007814 <_scanf_float+0x224>
 800772c:	2b79      	cmp	r3, #121	@ 0x79
 800772e:	e7f6      	b.n	800771e <_scanf_float+0x12e>
 8007730:	6821      	ldr	r1, [r4, #0]
 8007732:	05c8      	lsls	r0, r1, #23
 8007734:	d51e      	bpl.n	8007774 <_scanf_float+0x184>
 8007736:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800773a:	6021      	str	r1, [r4, #0]
 800773c:	3701      	adds	r7, #1
 800773e:	f1bb 0f00 	cmp.w	fp, #0
 8007742:	d003      	beq.n	800774c <_scanf_float+0x15c>
 8007744:	3201      	adds	r2, #1
 8007746:	f10b 3bff 	add.w	fp, fp, #4294967295
 800774a:	60a2      	str	r2, [r4, #8]
 800774c:	68a3      	ldr	r3, [r4, #8]
 800774e:	3b01      	subs	r3, #1
 8007750:	60a3      	str	r3, [r4, #8]
 8007752:	6923      	ldr	r3, [r4, #16]
 8007754:	3301      	adds	r3, #1
 8007756:	6123      	str	r3, [r4, #16]
 8007758:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800775c:	3b01      	subs	r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	f8c9 3004 	str.w	r3, [r9, #4]
 8007764:	f340 8082 	ble.w	800786c <_scanf_float+0x27c>
 8007768:	f8d9 3000 	ldr.w	r3, [r9]
 800776c:	3301      	adds	r3, #1
 800776e:	f8c9 3000 	str.w	r3, [r9]
 8007772:	e762      	b.n	800763a <_scanf_float+0x4a>
 8007774:	eb1a 0105 	adds.w	r1, sl, r5
 8007778:	f47f af6d 	bne.w	8007656 <_scanf_float+0x66>
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007782:	6022      	str	r2, [r4, #0]
 8007784:	460d      	mov	r5, r1
 8007786:	468a      	mov	sl, r1
 8007788:	f806 3b01 	strb.w	r3, [r6], #1
 800778c:	e7de      	b.n	800774c <_scanf_float+0x15c>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	0610      	lsls	r0, r2, #24
 8007792:	f57f af60 	bpl.w	8007656 <_scanf_float+0x66>
 8007796:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	e7f4      	b.n	8007788 <_scanf_float+0x198>
 800779e:	f1ba 0f00 	cmp.w	sl, #0
 80077a2:	d10c      	bne.n	80077be <_scanf_float+0x1ce>
 80077a4:	b977      	cbnz	r7, 80077c4 <_scanf_float+0x1d4>
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80077ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80077b0:	d108      	bne.n	80077c4 <_scanf_float+0x1d4>
 80077b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80077b6:	6022      	str	r2, [r4, #0]
 80077b8:	f04f 0a01 	mov.w	sl, #1
 80077bc:	e7e4      	b.n	8007788 <_scanf_float+0x198>
 80077be:	f1ba 0f02 	cmp.w	sl, #2
 80077c2:	d050      	beq.n	8007866 <_scanf_float+0x276>
 80077c4:	2d01      	cmp	r5, #1
 80077c6:	d002      	beq.n	80077ce <_scanf_float+0x1de>
 80077c8:	2d04      	cmp	r5, #4
 80077ca:	f47f af44 	bne.w	8007656 <_scanf_float+0x66>
 80077ce:	3501      	adds	r5, #1
 80077d0:	b2ed      	uxtb	r5, r5
 80077d2:	e7d9      	b.n	8007788 <_scanf_float+0x198>
 80077d4:	f1ba 0f01 	cmp.w	sl, #1
 80077d8:	f47f af3d 	bne.w	8007656 <_scanf_float+0x66>
 80077dc:	f04f 0a02 	mov.w	sl, #2
 80077e0:	e7d2      	b.n	8007788 <_scanf_float+0x198>
 80077e2:	b975      	cbnz	r5, 8007802 <_scanf_float+0x212>
 80077e4:	2f00      	cmp	r7, #0
 80077e6:	f47f af37 	bne.w	8007658 <_scanf_float+0x68>
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80077f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80077f4:	f040 8103 	bne.w	80079fe <_scanf_float+0x40e>
 80077f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80077fc:	6022      	str	r2, [r4, #0]
 80077fe:	2501      	movs	r5, #1
 8007800:	e7c2      	b.n	8007788 <_scanf_float+0x198>
 8007802:	2d03      	cmp	r5, #3
 8007804:	d0e3      	beq.n	80077ce <_scanf_float+0x1de>
 8007806:	2d05      	cmp	r5, #5
 8007808:	e7df      	b.n	80077ca <_scanf_float+0x1da>
 800780a:	2d02      	cmp	r5, #2
 800780c:	f47f af23 	bne.w	8007656 <_scanf_float+0x66>
 8007810:	2503      	movs	r5, #3
 8007812:	e7b9      	b.n	8007788 <_scanf_float+0x198>
 8007814:	2d06      	cmp	r5, #6
 8007816:	f47f af1e 	bne.w	8007656 <_scanf_float+0x66>
 800781a:	2507      	movs	r5, #7
 800781c:	e7b4      	b.n	8007788 <_scanf_float+0x198>
 800781e:	6822      	ldr	r2, [r4, #0]
 8007820:	0591      	lsls	r1, r2, #22
 8007822:	f57f af18 	bpl.w	8007656 <_scanf_float+0x66>
 8007826:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800782a:	6022      	str	r2, [r4, #0]
 800782c:	9702      	str	r7, [sp, #8]
 800782e:	e7ab      	b.n	8007788 <_scanf_float+0x198>
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007836:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800783a:	d005      	beq.n	8007848 <_scanf_float+0x258>
 800783c:	0550      	lsls	r0, r2, #21
 800783e:	f57f af0a 	bpl.w	8007656 <_scanf_float+0x66>
 8007842:	2f00      	cmp	r7, #0
 8007844:	f000 80db 	beq.w	80079fe <_scanf_float+0x40e>
 8007848:	0591      	lsls	r1, r2, #22
 800784a:	bf58      	it	pl
 800784c:	9902      	ldrpl	r1, [sp, #8]
 800784e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007852:	bf58      	it	pl
 8007854:	1a79      	subpl	r1, r7, r1
 8007856:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800785a:	bf58      	it	pl
 800785c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	2700      	movs	r7, #0
 8007864:	e790      	b.n	8007788 <_scanf_float+0x198>
 8007866:	f04f 0a03 	mov.w	sl, #3
 800786a:	e78d      	b.n	8007788 <_scanf_float+0x198>
 800786c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007870:	4649      	mov	r1, r9
 8007872:	4640      	mov	r0, r8
 8007874:	4798      	blx	r3
 8007876:	2800      	cmp	r0, #0
 8007878:	f43f aedf 	beq.w	800763a <_scanf_float+0x4a>
 800787c:	e6eb      	b.n	8007656 <_scanf_float+0x66>
 800787e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007886:	464a      	mov	r2, r9
 8007888:	4640      	mov	r0, r8
 800788a:	4798      	blx	r3
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	3b01      	subs	r3, #1
 8007890:	6123      	str	r3, [r4, #16]
 8007892:	e6eb      	b.n	800766c <_scanf_float+0x7c>
 8007894:	1e6b      	subs	r3, r5, #1
 8007896:	2b06      	cmp	r3, #6
 8007898:	d824      	bhi.n	80078e4 <_scanf_float+0x2f4>
 800789a:	2d02      	cmp	r5, #2
 800789c:	d836      	bhi.n	800790c <_scanf_float+0x31c>
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	429e      	cmp	r6, r3
 80078a2:	f67f aee7 	bls.w	8007674 <_scanf_float+0x84>
 80078a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078ae:	464a      	mov	r2, r9
 80078b0:	4640      	mov	r0, r8
 80078b2:	4798      	blx	r3
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	6123      	str	r3, [r4, #16]
 80078ba:	e7f0      	b.n	800789e <_scanf_float+0x2ae>
 80078bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80078c4:	464a      	mov	r2, r9
 80078c6:	4640      	mov	r0, r8
 80078c8:	4798      	blx	r3
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	6123      	str	r3, [r4, #16]
 80078d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078d4:	fa5f fa8a 	uxtb.w	sl, sl
 80078d8:	f1ba 0f02 	cmp.w	sl, #2
 80078dc:	d1ee      	bne.n	80078bc <_scanf_float+0x2cc>
 80078de:	3d03      	subs	r5, #3
 80078e0:	b2ed      	uxtb	r5, r5
 80078e2:	1b76      	subs	r6, r6, r5
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	05da      	lsls	r2, r3, #23
 80078e8:	d530      	bpl.n	800794c <_scanf_float+0x35c>
 80078ea:	055b      	lsls	r3, r3, #21
 80078ec:	d511      	bpl.n	8007912 <_scanf_float+0x322>
 80078ee:	9b01      	ldr	r3, [sp, #4]
 80078f0:	429e      	cmp	r6, r3
 80078f2:	f67f aebf 	bls.w	8007674 <_scanf_float+0x84>
 80078f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80078fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078fe:	464a      	mov	r2, r9
 8007900:	4640      	mov	r0, r8
 8007902:	4798      	blx	r3
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	3b01      	subs	r3, #1
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	e7f0      	b.n	80078ee <_scanf_float+0x2fe>
 800790c:	46aa      	mov	sl, r5
 800790e:	46b3      	mov	fp, r6
 8007910:	e7de      	b.n	80078d0 <_scanf_float+0x2e0>
 8007912:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	2965      	cmp	r1, #101	@ 0x65
 800791a:	f103 33ff 	add.w	r3, r3, #4294967295
 800791e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007922:	6123      	str	r3, [r4, #16]
 8007924:	d00c      	beq.n	8007940 <_scanf_float+0x350>
 8007926:	2945      	cmp	r1, #69	@ 0x45
 8007928:	d00a      	beq.n	8007940 <_scanf_float+0x350>
 800792a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800792e:	464a      	mov	r2, r9
 8007930:	4640      	mov	r0, r8
 8007932:	4798      	blx	r3
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800793a:	3b01      	subs	r3, #1
 800793c:	1eb5      	subs	r5, r6, #2
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007944:	464a      	mov	r2, r9
 8007946:	4640      	mov	r0, r8
 8007948:	4798      	blx	r3
 800794a:	462e      	mov	r6, r5
 800794c:	6822      	ldr	r2, [r4, #0]
 800794e:	f012 0210 	ands.w	r2, r2, #16
 8007952:	d001      	beq.n	8007958 <_scanf_float+0x368>
 8007954:	2000      	movs	r0, #0
 8007956:	e68e      	b.n	8007676 <_scanf_float+0x86>
 8007958:	7032      	strb	r2, [r6, #0]
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007964:	d125      	bne.n	80079b2 <_scanf_float+0x3c2>
 8007966:	9b02      	ldr	r3, [sp, #8]
 8007968:	429f      	cmp	r7, r3
 800796a:	d00a      	beq.n	8007982 <_scanf_float+0x392>
 800796c:	1bda      	subs	r2, r3, r7
 800796e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007972:	429e      	cmp	r6, r3
 8007974:	bf28      	it	cs
 8007976:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800797a:	4922      	ldr	r1, [pc, #136]	@ (8007a04 <_scanf_float+0x414>)
 800797c:	4630      	mov	r0, r6
 800797e:	f000 f921 	bl	8007bc4 <siprintf>
 8007982:	9901      	ldr	r1, [sp, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	4640      	mov	r0, r8
 8007988:	f7ff f9ca 	bl	8006d20 <_strtod_r>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	6821      	ldr	r1, [r4, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f011 0f02 	tst.w	r1, #2
 8007996:	ec57 6b10 	vmov	r6, r7, d0
 800799a:	f103 0204 	add.w	r2, r3, #4
 800799e:	d015      	beq.n	80079cc <_scanf_float+0x3dc>
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	600a      	str	r2, [r1, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	e9c3 6700 	strd	r6, r7, [r3]
 80079aa:	68e3      	ldr	r3, [r4, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	60e3      	str	r3, [r4, #12]
 80079b0:	e7d0      	b.n	8007954 <_scanf_float+0x364>
 80079b2:	9b04      	ldr	r3, [sp, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0e4      	beq.n	8007982 <_scanf_float+0x392>
 80079b8:	9905      	ldr	r1, [sp, #20]
 80079ba:	230a      	movs	r3, #10
 80079bc:	3101      	adds	r1, #1
 80079be:	4640      	mov	r0, r8
 80079c0:	f002 fa56 	bl	8009e70 <_strtol_r>
 80079c4:	9b04      	ldr	r3, [sp, #16]
 80079c6:	9e05      	ldr	r6, [sp, #20]
 80079c8:	1ac2      	subs	r2, r0, r3
 80079ca:	e7d0      	b.n	800796e <_scanf_float+0x37e>
 80079cc:	f011 0f04 	tst.w	r1, #4
 80079d0:	9903      	ldr	r1, [sp, #12]
 80079d2:	600a      	str	r2, [r1, #0]
 80079d4:	d1e6      	bne.n	80079a4 <_scanf_float+0x3b4>
 80079d6:	681d      	ldr	r5, [r3, #0]
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f9 f8bc 	bl	8000b5c <__aeabi_dcmpun>
 80079e4:	b128      	cbz	r0, 80079f2 <_scanf_float+0x402>
 80079e6:	4808      	ldr	r0, [pc, #32]	@ (8007a08 <_scanf_float+0x418>)
 80079e8:	f000 fa56 	bl	8007e98 <nanf>
 80079ec:	ed85 0a00 	vstr	s0, [r5]
 80079f0:	e7db      	b.n	80079aa <_scanf_float+0x3ba>
 80079f2:	4630      	mov	r0, r6
 80079f4:	4639      	mov	r1, r7
 80079f6:	f7f9 f90f 	bl	8000c18 <__aeabi_d2f>
 80079fa:	6028      	str	r0, [r5, #0]
 80079fc:	e7d5      	b.n	80079aa <_scanf_float+0x3ba>
 80079fe:	2700      	movs	r7, #0
 8007a00:	e62e      	b.n	8007660 <_scanf_float+0x70>
 8007a02:	bf00      	nop
 8007a04:	0800aa3e 	.word	0x0800aa3e
 8007a08:	0800aaf7 	.word	0x0800aaf7

08007a0c <std>:
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	4604      	mov	r4, r0
 8007a12:	e9c0 3300 	strd	r3, r3, [r0]
 8007a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a1a:	6083      	str	r3, [r0, #8]
 8007a1c:	8181      	strh	r1, [r0, #12]
 8007a1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a20:	81c2      	strh	r2, [r0, #14]
 8007a22:	6183      	str	r3, [r0, #24]
 8007a24:	4619      	mov	r1, r3
 8007a26:	2208      	movs	r2, #8
 8007a28:	305c      	adds	r0, #92	@ 0x5c
 8007a2a:	f000 f930 	bl	8007c8e <memset>
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <std+0x58>)
 8007a30:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a32:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <std+0x5c>)
 8007a34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a36:	4b0d      	ldr	r3, [pc, #52]	@ (8007a6c <std+0x60>)
 8007a38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a70 <std+0x64>)
 8007a3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <std+0x68>)
 8007a40:	6224      	str	r4, [r4, #32]
 8007a42:	429c      	cmp	r4, r3
 8007a44:	d006      	beq.n	8007a54 <std+0x48>
 8007a46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a4a:	4294      	cmp	r4, r2
 8007a4c:	d002      	beq.n	8007a54 <std+0x48>
 8007a4e:	33d0      	adds	r3, #208	@ 0xd0
 8007a50:	429c      	cmp	r4, r3
 8007a52:	d105      	bne.n	8007a60 <std+0x54>
 8007a54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5c:	f000 ba02 	b.w	8007e64 <__retarget_lock_init_recursive>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	bf00      	nop
 8007a64:	08007c09 	.word	0x08007c09
 8007a68:	08007c2b 	.word	0x08007c2b
 8007a6c:	08007c63 	.word	0x08007c63
 8007a70:	08007c87 	.word	0x08007c87
 8007a74:	20000520 	.word	0x20000520

08007a78 <stdio_exit_handler>:
 8007a78:	4a02      	ldr	r2, [pc, #8]	@ (8007a84 <stdio_exit_handler+0xc>)
 8007a7a:	4903      	ldr	r1, [pc, #12]	@ (8007a88 <stdio_exit_handler+0x10>)
 8007a7c:	4803      	ldr	r0, [pc, #12]	@ (8007a8c <stdio_exit_handler+0x14>)
 8007a7e:	f000 b869 	b.w	8007b54 <_fwalk_sglue>
 8007a82:	bf00      	nop
 8007a84:	20000010 	.word	0x20000010
 8007a88:	0800a4c9 	.word	0x0800a4c9
 8007a8c:	2000018c 	.word	0x2000018c

08007a90 <cleanup_stdio>:
 8007a90:	6841      	ldr	r1, [r0, #4]
 8007a92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <cleanup_stdio+0x34>)
 8007a94:	4299      	cmp	r1, r3
 8007a96:	b510      	push	{r4, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	d001      	beq.n	8007aa0 <cleanup_stdio+0x10>
 8007a9c:	f002 fd14 	bl	800a4c8 <_fflush_r>
 8007aa0:	68a1      	ldr	r1, [r4, #8]
 8007aa2:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <cleanup_stdio+0x38>)
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	d002      	beq.n	8007aae <cleanup_stdio+0x1e>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f002 fd0d 	bl	800a4c8 <_fflush_r>
 8007aae:	68e1      	ldr	r1, [r4, #12]
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <cleanup_stdio+0x3c>)
 8007ab2:	4299      	cmp	r1, r3
 8007ab4:	d004      	beq.n	8007ac0 <cleanup_stdio+0x30>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007abc:	f002 bd04 	b.w	800a4c8 <_fflush_r>
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000520 	.word	0x20000520
 8007ac8:	20000588 	.word	0x20000588
 8007acc:	200005f0 	.word	0x200005f0

08007ad0 <global_stdio_init.part.0>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b00 <global_stdio_init.part.0+0x30>)
 8007ad4:	4c0b      	ldr	r4, [pc, #44]	@ (8007b04 <global_stdio_init.part.0+0x34>)
 8007ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8007b08 <global_stdio_init.part.0+0x38>)
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	4620      	mov	r0, r4
 8007adc:	2200      	movs	r2, #0
 8007ade:	2104      	movs	r1, #4
 8007ae0:	f7ff ff94 	bl	8007a0c <std>
 8007ae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ae8:	2201      	movs	r2, #1
 8007aea:	2109      	movs	r1, #9
 8007aec:	f7ff ff8e 	bl	8007a0c <std>
 8007af0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007af4:	2202      	movs	r2, #2
 8007af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afa:	2112      	movs	r1, #18
 8007afc:	f7ff bf86 	b.w	8007a0c <std>
 8007b00:	20000658 	.word	0x20000658
 8007b04:	20000520 	.word	0x20000520
 8007b08:	08007a79 	.word	0x08007a79

08007b0c <__sfp_lock_acquire>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__sfp_lock_acquire+0x8>)
 8007b0e:	f000 b9aa 	b.w	8007e66 <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	20000661 	.word	0x20000661

08007b18 <__sfp_lock_release>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__sfp_lock_release+0x8>)
 8007b1a:	f000 b9a5 	b.w	8007e68 <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20000661 	.word	0x20000661

08007b24 <__sinit>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	4604      	mov	r4, r0
 8007b28:	f7ff fff0 	bl	8007b0c <__sfp_lock_acquire>
 8007b2c:	6a23      	ldr	r3, [r4, #32]
 8007b2e:	b11b      	cbz	r3, 8007b38 <__sinit+0x14>
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f7ff bff0 	b.w	8007b18 <__sfp_lock_release>
 8007b38:	4b04      	ldr	r3, [pc, #16]	@ (8007b4c <__sinit+0x28>)
 8007b3a:	6223      	str	r3, [r4, #32]
 8007b3c:	4b04      	ldr	r3, [pc, #16]	@ (8007b50 <__sinit+0x2c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f5      	bne.n	8007b30 <__sinit+0xc>
 8007b44:	f7ff ffc4 	bl	8007ad0 <global_stdio_init.part.0>
 8007b48:	e7f2      	b.n	8007b30 <__sinit+0xc>
 8007b4a:	bf00      	nop
 8007b4c:	08007a91 	.word	0x08007a91
 8007b50:	20000658 	.word	0x20000658

08007b54 <_fwalk_sglue>:
 8007b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	4607      	mov	r7, r0
 8007b5a:	4688      	mov	r8, r1
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	2600      	movs	r6, #0
 8007b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b64:	f1b9 0901 	subs.w	r9, r9, #1
 8007b68:	d505      	bpl.n	8007b76 <_fwalk_sglue+0x22>
 8007b6a:	6824      	ldr	r4, [r4, #0]
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	d1f7      	bne.n	8007b60 <_fwalk_sglue+0xc>
 8007b70:	4630      	mov	r0, r6
 8007b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d907      	bls.n	8007b8c <_fwalk_sglue+0x38>
 8007b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b80:	3301      	adds	r3, #1
 8007b82:	d003      	beq.n	8007b8c <_fwalk_sglue+0x38>
 8007b84:	4629      	mov	r1, r5
 8007b86:	4638      	mov	r0, r7
 8007b88:	47c0      	blx	r8
 8007b8a:	4306      	orrs	r6, r0
 8007b8c:	3568      	adds	r5, #104	@ 0x68
 8007b8e:	e7e9      	b.n	8007b64 <_fwalk_sglue+0x10>

08007b90 <iprintf>:
 8007b90:	b40f      	push	{r0, r1, r2, r3}
 8007b92:	b507      	push	{r0, r1, r2, lr}
 8007b94:	4906      	ldr	r1, [pc, #24]	@ (8007bb0 <iprintf+0x20>)
 8007b96:	ab04      	add	r3, sp, #16
 8007b98:	6808      	ldr	r0, [r1, #0]
 8007b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b9e:	6881      	ldr	r1, [r0, #8]
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	f002 faf5 	bl	800a190 <_vfiprintf_r>
 8007ba6:	b003      	add	sp, #12
 8007ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bac:	b004      	add	sp, #16
 8007bae:	4770      	bx	lr
 8007bb0:	20000188 	.word	0x20000188

08007bb4 <putchar>:
 8007bb4:	4b02      	ldr	r3, [pc, #8]	@ (8007bc0 <putchar+0xc>)
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	6882      	ldr	r2, [r0, #8]
 8007bbc:	f002 bcbe 	b.w	800a53c <_putc_r>
 8007bc0:	20000188 	.word	0x20000188

08007bc4 <siprintf>:
 8007bc4:	b40e      	push	{r1, r2, r3}
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	b09d      	sub	sp, #116	@ 0x74
 8007bca:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007bcc:	9002      	str	r0, [sp, #8]
 8007bce:	9006      	str	r0, [sp, #24]
 8007bd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007bd4:	480a      	ldr	r0, [pc, #40]	@ (8007c00 <siprintf+0x3c>)
 8007bd6:	9107      	str	r1, [sp, #28]
 8007bd8:	9104      	str	r1, [sp, #16]
 8007bda:	490a      	ldr	r1, [pc, #40]	@ (8007c04 <siprintf+0x40>)
 8007bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	2400      	movs	r4, #0
 8007be4:	a902      	add	r1, sp, #8
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007bec:	f002 f9aa 	bl	8009f44 <_svfiprintf_r>
 8007bf0:	9b02      	ldr	r3, [sp, #8]
 8007bf2:	701c      	strb	r4, [r3, #0]
 8007bf4:	b01d      	add	sp, #116	@ 0x74
 8007bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bfa:	b003      	add	sp, #12
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20000188 	.word	0x20000188
 8007c04:	ffff0208 	.word	0xffff0208

08007c08 <__sread>:
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	f000 f8da 	bl	8007dc8 <_read_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	bfab      	itete	ge
 8007c18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c1c:	181b      	addge	r3, r3, r0
 8007c1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c22:	bfac      	ite	ge
 8007c24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c26:	81a3      	strhlt	r3, [r4, #12]
 8007c28:	bd10      	pop	{r4, pc}

08007c2a <__swrite>:
 8007c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	461f      	mov	r7, r3
 8007c30:	898b      	ldrh	r3, [r1, #12]
 8007c32:	05db      	lsls	r3, r3, #23
 8007c34:	4605      	mov	r5, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4616      	mov	r6, r2
 8007c3a:	d505      	bpl.n	8007c48 <__swrite+0x1e>
 8007c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c40:	2302      	movs	r3, #2
 8007c42:	2200      	movs	r2, #0
 8007c44:	f000 f8ae 	bl	8007da4 <_lseek_r>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	4628      	mov	r0, r5
 8007c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	f000 b8c5 	b.w	8007dec <_write_r>

08007c62 <__sseek>:
 8007c62:	b510      	push	{r4, lr}
 8007c64:	460c      	mov	r4, r1
 8007c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6a:	f000 f89b 	bl	8007da4 <_lseek_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	bf15      	itete	ne
 8007c74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c7e:	81a3      	strheq	r3, [r4, #12]
 8007c80:	bf18      	it	ne
 8007c82:	81a3      	strhne	r3, [r4, #12]
 8007c84:	bd10      	pop	{r4, pc}

08007c86 <__sclose>:
 8007c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8a:	f000 b87b 	b.w	8007d84 <_close_r>

08007c8e <memset>:
 8007c8e:	4402      	add	r2, r0
 8007c90:	4603      	mov	r3, r0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d100      	bne.n	8007c98 <memset+0xa>
 8007c96:	4770      	bx	lr
 8007c98:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9c:	e7f9      	b.n	8007c92 <memset+0x4>

08007c9e <strncmp>:
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	b16a      	cbz	r2, 8007cbe <strncmp+0x20>
 8007ca2:	3901      	subs	r1, #1
 8007ca4:	1884      	adds	r4, r0, r2
 8007ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007caa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d103      	bne.n	8007cba <strncmp+0x1c>
 8007cb2:	42a0      	cmp	r0, r4
 8007cb4:	d001      	beq.n	8007cba <strncmp+0x1c>
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	d1f5      	bne.n	8007ca6 <strncmp+0x8>
 8007cba:	1ad0      	subs	r0, r2, r3
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	e7fc      	b.n	8007cbc <strncmp+0x1e>
	...

08007cc4 <strtok>:
 8007cc4:	4b16      	ldr	r3, [pc, #88]	@ (8007d20 <strtok+0x5c>)
 8007cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cca:	681f      	ldr	r7, [r3, #0]
 8007ccc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007cce:	4605      	mov	r5, r0
 8007cd0:	460e      	mov	r6, r1
 8007cd2:	b9ec      	cbnz	r4, 8007d10 <strtok+0x4c>
 8007cd4:	2050      	movs	r0, #80	@ 0x50
 8007cd6:	f001 fadf 	bl	8009298 <malloc>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6478      	str	r0, [r7, #68]	@ 0x44
 8007cde:	b920      	cbnz	r0, 8007cea <strtok+0x26>
 8007ce0:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <strtok+0x60>)
 8007ce2:	4811      	ldr	r0, [pc, #68]	@ (8007d28 <strtok+0x64>)
 8007ce4:	215b      	movs	r1, #91	@ 0x5b
 8007ce6:	f000 f8dd 	bl	8007ea4 <__assert_func>
 8007cea:	e9c0 4400 	strd	r4, r4, [r0]
 8007cee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007cf2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007cf6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007cfa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007cfe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007d02:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007d06:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007d0a:	6184      	str	r4, [r0, #24]
 8007d0c:	7704      	strb	r4, [r0, #28]
 8007d0e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d12:	4631      	mov	r1, r6
 8007d14:	4628      	mov	r0, r5
 8007d16:	2301      	movs	r3, #1
 8007d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	f000 b806 	b.w	8007d2c <__strtok_r>
 8007d20:	20000188 	.word	0x20000188
 8007d24:	0800aa43 	.word	0x0800aa43
 8007d28:	0800aa5a 	.word	0x0800aa5a

08007d2c <__strtok_r>:
 8007d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d2e:	4604      	mov	r4, r0
 8007d30:	b908      	cbnz	r0, 8007d36 <__strtok_r+0xa>
 8007d32:	6814      	ldr	r4, [r2, #0]
 8007d34:	b144      	cbz	r4, 8007d48 <__strtok_r+0x1c>
 8007d36:	4620      	mov	r0, r4
 8007d38:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d42:	b91e      	cbnz	r6, 8007d4c <__strtok_r+0x20>
 8007d44:	b965      	cbnz	r5, 8007d60 <__strtok_r+0x34>
 8007d46:	6015      	str	r5, [r2, #0]
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e005      	b.n	8007d58 <__strtok_r+0x2c>
 8007d4c:	42b5      	cmp	r5, r6
 8007d4e:	d1f6      	bne.n	8007d3e <__strtok_r+0x12>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1f0      	bne.n	8007d36 <__strtok_r+0xa>
 8007d54:	6014      	str	r4, [r2, #0]
 8007d56:	7003      	strb	r3, [r0, #0]
 8007d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	e00c      	b.n	8007d78 <__strtok_r+0x4c>
 8007d5e:	b91d      	cbnz	r5, 8007d68 <__strtok_r+0x3c>
 8007d60:	4627      	mov	r7, r4
 8007d62:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d66:	460e      	mov	r6, r1
 8007d68:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d6c:	42ab      	cmp	r3, r5
 8007d6e:	d1f6      	bne.n	8007d5e <__strtok_r+0x32>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0f2      	beq.n	8007d5a <__strtok_r+0x2e>
 8007d74:	2300      	movs	r3, #0
 8007d76:	703b      	strb	r3, [r7, #0]
 8007d78:	6014      	str	r4, [r2, #0]
 8007d7a:	e7ed      	b.n	8007d58 <__strtok_r+0x2c>

08007d7c <_localeconv_r>:
 8007d7c:	4800      	ldr	r0, [pc, #0]	@ (8007d80 <_localeconv_r+0x4>)
 8007d7e:	4770      	bx	lr
 8007d80:	2000010c 	.word	0x2000010c

08007d84 <_close_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d06      	ldr	r5, [pc, #24]	@ (8007da0 <_close_r+0x1c>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	f7f9 fe76 	bl	8001a80 <_close>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_close_r+0x1a>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_close_r+0x1a>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	2000065c 	.word	0x2000065c

08007da4 <_lseek_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	@ (8007dc4 <_lseek_r+0x20>)
 8007da8:	4604      	mov	r4, r0
 8007daa:	4608      	mov	r0, r1
 8007dac:	4611      	mov	r1, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7f9 fe8b 	bl	8001ace <_lseek>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_lseek_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_lseek_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	2000065c 	.word	0x2000065c

08007dc8 <_read_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	@ (8007de8 <_read_r+0x20>)
 8007dcc:	4604      	mov	r4, r0
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7f9 fe19 	bl	8001a0e <_read>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_read_r+0x1e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_read_r+0x1e>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	2000065c 	.word	0x2000065c

08007dec <_write_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	@ (8007e0c <_write_r+0x20>)
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7f9 fe24 	bl	8001a48 <_write>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_write_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_write_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	2000065c 	.word	0x2000065c

08007e10 <__errno>:
 8007e10:	4b01      	ldr	r3, [pc, #4]	@ (8007e18 <__errno+0x8>)
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	20000188 	.word	0x20000188

08007e1c <__libc_init_array>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e54 <__libc_init_array+0x38>)
 8007e20:	4c0d      	ldr	r4, [pc, #52]	@ (8007e58 <__libc_init_array+0x3c>)
 8007e22:	1b64      	subs	r4, r4, r5
 8007e24:	10a4      	asrs	r4, r4, #2
 8007e26:	2600      	movs	r6, #0
 8007e28:	42a6      	cmp	r6, r4
 8007e2a:	d109      	bne.n	8007e40 <__libc_init_array+0x24>
 8007e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e5c <__libc_init_array+0x40>)
 8007e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e60 <__libc_init_array+0x44>)
 8007e30:	f002 fd90 	bl	800a954 <_init>
 8007e34:	1b64      	subs	r4, r4, r5
 8007e36:	10a4      	asrs	r4, r4, #2
 8007e38:	2600      	movs	r6, #0
 8007e3a:	42a6      	cmp	r6, r4
 8007e3c:	d105      	bne.n	8007e4a <__libc_init_array+0x2e>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e44:	4798      	blx	r3
 8007e46:	3601      	adds	r6, #1
 8007e48:	e7ee      	b.n	8007e28 <__libc_init_array+0xc>
 8007e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4e:	4798      	blx	r3
 8007e50:	3601      	adds	r6, #1
 8007e52:	e7f2      	b.n	8007e3a <__libc_init_array+0x1e>
 8007e54:	0800ae94 	.word	0x0800ae94
 8007e58:	0800ae94 	.word	0x0800ae94
 8007e5c:	0800ae94 	.word	0x0800ae94
 8007e60:	0800ae98 	.word	0x0800ae98

08007e64 <__retarget_lock_init_recursive>:
 8007e64:	4770      	bx	lr

08007e66 <__retarget_lock_acquire_recursive>:
 8007e66:	4770      	bx	lr

08007e68 <__retarget_lock_release_recursive>:
 8007e68:	4770      	bx	lr

08007e6a <memcpy>:
 8007e6a:	440a      	add	r2, r1
 8007e6c:	4291      	cmp	r1, r2
 8007e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e72:	d100      	bne.n	8007e76 <memcpy+0xc>
 8007e74:	4770      	bx	lr
 8007e76:	b510      	push	{r4, lr}
 8007e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e80:	4291      	cmp	r1, r2
 8007e82:	d1f9      	bne.n	8007e78 <memcpy+0xe>
 8007e84:	bd10      	pop	{r4, pc}
	...

08007e88 <nan>:
 8007e88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007e90 <nan+0x8>
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	00000000 	.word	0x00000000
 8007e94:	7ff80000 	.word	0x7ff80000

08007e98 <nanf>:
 8007e98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007ea0 <nanf+0x8>
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	7fc00000 	.word	0x7fc00000

08007ea4 <__assert_func>:
 8007ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ed0 <__assert_func+0x2c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	68d8      	ldr	r0, [r3, #12]
 8007eb2:	b14c      	cbz	r4, 8007ec8 <__assert_func+0x24>
 8007eb4:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <__assert_func+0x30>)
 8007eb6:	9100      	str	r1, [sp, #0]
 8007eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ebc:	4906      	ldr	r1, [pc, #24]	@ (8007ed8 <__assert_func+0x34>)
 8007ebe:	462b      	mov	r3, r5
 8007ec0:	f002 fb2a 	bl	800a518 <fiprintf>
 8007ec4:	f002 fc2c 	bl	800a720 <abort>
 8007ec8:	4b04      	ldr	r3, [pc, #16]	@ (8007edc <__assert_func+0x38>)
 8007eca:	461c      	mov	r4, r3
 8007ecc:	e7f3      	b.n	8007eb6 <__assert_func+0x12>
 8007ece:	bf00      	nop
 8007ed0:	20000188 	.word	0x20000188
 8007ed4:	0800aabc 	.word	0x0800aabc
 8007ed8:	0800aac9 	.word	0x0800aac9
 8007edc:	0800aaf7 	.word	0x0800aaf7

08007ee0 <quorem>:
 8007ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	6903      	ldr	r3, [r0, #16]
 8007ee6:	690c      	ldr	r4, [r1, #16]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	4607      	mov	r7, r0
 8007eec:	db7e      	blt.n	8007fec <quorem+0x10c>
 8007eee:	3c01      	subs	r4, #1
 8007ef0:	f101 0814 	add.w	r8, r1, #20
 8007ef4:	00a3      	lsls	r3, r4, #2
 8007ef6:	f100 0514 	add.w	r5, r0, #20
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f12:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f16:	d32e      	bcc.n	8007f76 <quorem+0x96>
 8007f18:	f04f 0a00 	mov.w	sl, #0
 8007f1c:	46c4      	mov	ip, r8
 8007f1e:	46ae      	mov	lr, r5
 8007f20:	46d3      	mov	fp, sl
 8007f22:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f26:	b298      	uxth	r0, r3
 8007f28:	fb06 a000 	mla	r0, r6, r0, sl
 8007f2c:	0c02      	lsrs	r2, r0, #16
 8007f2e:	0c1b      	lsrs	r3, r3, #16
 8007f30:	fb06 2303 	mla	r3, r6, r3, r2
 8007f34:	f8de 2000 	ldr.w	r2, [lr]
 8007f38:	b280      	uxth	r0, r0
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	1a12      	subs	r2, r2, r0
 8007f3e:	445a      	add	r2, fp
 8007f40:	f8de 0000 	ldr.w	r0, [lr]
 8007f44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f52:	b292      	uxth	r2, r2
 8007f54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f58:	45e1      	cmp	r9, ip
 8007f5a:	f84e 2b04 	str.w	r2, [lr], #4
 8007f5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f62:	d2de      	bcs.n	8007f22 <quorem+0x42>
 8007f64:	9b00      	ldr	r3, [sp, #0]
 8007f66:	58eb      	ldr	r3, [r5, r3]
 8007f68:	b92b      	cbnz	r3, 8007f76 <quorem+0x96>
 8007f6a:	9b01      	ldr	r3, [sp, #4]
 8007f6c:	3b04      	subs	r3, #4
 8007f6e:	429d      	cmp	r5, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	d32f      	bcc.n	8007fd4 <quorem+0xf4>
 8007f74:	613c      	str	r4, [r7, #16]
 8007f76:	4638      	mov	r0, r7
 8007f78:	f001 fd12 	bl	80099a0 <__mcmp>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	db25      	blt.n	8007fcc <quorem+0xec>
 8007f80:	4629      	mov	r1, r5
 8007f82:	2000      	movs	r0, #0
 8007f84:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f88:	f8d1 c000 	ldr.w	ip, [r1]
 8007f8c:	fa1f fe82 	uxth.w	lr, r2
 8007f90:	fa1f f38c 	uxth.w	r3, ip
 8007f94:	eba3 030e 	sub.w	r3, r3, lr
 8007f98:	4403      	add	r3, r0
 8007f9a:	0c12      	lsrs	r2, r2, #16
 8007f9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fa0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007faa:	45c1      	cmp	r9, r8
 8007fac:	f841 3b04 	str.w	r3, [r1], #4
 8007fb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fb4:	d2e6      	bcs.n	8007f84 <quorem+0xa4>
 8007fb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fbe:	b922      	cbnz	r2, 8007fca <quorem+0xea>
 8007fc0:	3b04      	subs	r3, #4
 8007fc2:	429d      	cmp	r5, r3
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	d30b      	bcc.n	8007fe0 <quorem+0x100>
 8007fc8:	613c      	str	r4, [r7, #16]
 8007fca:	3601      	adds	r6, #1
 8007fcc:	4630      	mov	r0, r6
 8007fce:	b003      	add	sp, #12
 8007fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd4:	6812      	ldr	r2, [r2, #0]
 8007fd6:	3b04      	subs	r3, #4
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	d1cb      	bne.n	8007f74 <quorem+0x94>
 8007fdc:	3c01      	subs	r4, #1
 8007fde:	e7c6      	b.n	8007f6e <quorem+0x8e>
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	2a00      	cmp	r2, #0
 8007fe6:	d1ef      	bne.n	8007fc8 <quorem+0xe8>
 8007fe8:	3c01      	subs	r4, #1
 8007fea:	e7ea      	b.n	8007fc2 <quorem+0xe2>
 8007fec:	2000      	movs	r0, #0
 8007fee:	e7ee      	b.n	8007fce <quorem+0xee>

08007ff0 <_dtoa_r>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	69c7      	ldr	r7, [r0, #28]
 8007ff6:	b097      	sub	sp, #92	@ 0x5c
 8007ff8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007ffc:	ec55 4b10 	vmov	r4, r5, d0
 8008000:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008002:	9107      	str	r1, [sp, #28]
 8008004:	4681      	mov	r9, r0
 8008006:	920c      	str	r2, [sp, #48]	@ 0x30
 8008008:	9311      	str	r3, [sp, #68]	@ 0x44
 800800a:	b97f      	cbnz	r7, 800802c <_dtoa_r+0x3c>
 800800c:	2010      	movs	r0, #16
 800800e:	f001 f943 	bl	8009298 <malloc>
 8008012:	4602      	mov	r2, r0
 8008014:	f8c9 001c 	str.w	r0, [r9, #28]
 8008018:	b920      	cbnz	r0, 8008024 <_dtoa_r+0x34>
 800801a:	4ba9      	ldr	r3, [pc, #676]	@ (80082c0 <_dtoa_r+0x2d0>)
 800801c:	21ef      	movs	r1, #239	@ 0xef
 800801e:	48a9      	ldr	r0, [pc, #676]	@ (80082c4 <_dtoa_r+0x2d4>)
 8008020:	f7ff ff40 	bl	8007ea4 <__assert_func>
 8008024:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008028:	6007      	str	r7, [r0, #0]
 800802a:	60c7      	str	r7, [r0, #12]
 800802c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008030:	6819      	ldr	r1, [r3, #0]
 8008032:	b159      	cbz	r1, 800804c <_dtoa_r+0x5c>
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	604a      	str	r2, [r1, #4]
 8008038:	2301      	movs	r3, #1
 800803a:	4093      	lsls	r3, r2
 800803c:	608b      	str	r3, [r1, #8]
 800803e:	4648      	mov	r0, r9
 8008040:	f001 fa32 	bl	80094a8 <_Bfree>
 8008044:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	1e2b      	subs	r3, r5, #0
 800804e:	bfb9      	ittee	lt
 8008050:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008054:	9305      	strlt	r3, [sp, #20]
 8008056:	2300      	movge	r3, #0
 8008058:	6033      	strge	r3, [r6, #0]
 800805a:	9f05      	ldr	r7, [sp, #20]
 800805c:	4b9a      	ldr	r3, [pc, #616]	@ (80082c8 <_dtoa_r+0x2d8>)
 800805e:	bfbc      	itt	lt
 8008060:	2201      	movlt	r2, #1
 8008062:	6032      	strlt	r2, [r6, #0]
 8008064:	43bb      	bics	r3, r7
 8008066:	d112      	bne.n	800808e <_dtoa_r+0x9e>
 8008068:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800806a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008074:	4323      	orrs	r3, r4
 8008076:	f000 855a 	beq.w	8008b2e <_dtoa_r+0xb3e>
 800807a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800807c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80082dc <_dtoa_r+0x2ec>
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 855c 	beq.w	8008b3e <_dtoa_r+0xb4e>
 8008086:	f10a 0303 	add.w	r3, sl, #3
 800808a:	f000 bd56 	b.w	8008b3a <_dtoa_r+0xb4a>
 800808e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008092:	2200      	movs	r2, #0
 8008094:	ec51 0b17 	vmov	r0, r1, d7
 8008098:	2300      	movs	r3, #0
 800809a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800809e:	f7f8 fd2b 	bl	8000af8 <__aeabi_dcmpeq>
 80080a2:	4680      	mov	r8, r0
 80080a4:	b158      	cbz	r0, 80080be <_dtoa_r+0xce>
 80080a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080a8:	2301      	movs	r3, #1
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080ae:	b113      	cbz	r3, 80080b6 <_dtoa_r+0xc6>
 80080b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80080b2:	4b86      	ldr	r3, [pc, #536]	@ (80082cc <_dtoa_r+0x2dc>)
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80082e0 <_dtoa_r+0x2f0>
 80080ba:	f000 bd40 	b.w	8008b3e <_dtoa_r+0xb4e>
 80080be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80080c2:	aa14      	add	r2, sp, #80	@ 0x50
 80080c4:	a915      	add	r1, sp, #84	@ 0x54
 80080c6:	4648      	mov	r0, r9
 80080c8:	f001 fd8a 	bl	8009be0 <__d2b>
 80080cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80080d0:	9002      	str	r0, [sp, #8]
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	d078      	beq.n	80081c8 <_dtoa_r+0x1d8>
 80080d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80080dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80080e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80080e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80080ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80080f0:	4619      	mov	r1, r3
 80080f2:	2200      	movs	r2, #0
 80080f4:	4b76      	ldr	r3, [pc, #472]	@ (80082d0 <_dtoa_r+0x2e0>)
 80080f6:	f7f8 f8df 	bl	80002b8 <__aeabi_dsub>
 80080fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80082a8 <_dtoa_r+0x2b8>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 fa92 	bl	8000628 <__aeabi_dmul>
 8008104:	a36a      	add	r3, pc, #424	@ (adr r3, 80082b0 <_dtoa_r+0x2c0>)
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	f7f8 f8d7 	bl	80002bc <__adddf3>
 800810e:	4604      	mov	r4, r0
 8008110:	4630      	mov	r0, r6
 8008112:	460d      	mov	r5, r1
 8008114:	f7f8 fa1e 	bl	8000554 <__aeabi_i2d>
 8008118:	a367      	add	r3, pc, #412	@ (adr r3, 80082b8 <_dtoa_r+0x2c8>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 fa83 	bl	8000628 <__aeabi_dmul>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 f8c7 	bl	80002bc <__adddf3>
 800812e:	4604      	mov	r4, r0
 8008130:	460d      	mov	r5, r1
 8008132:	f7f8 fd29 	bl	8000b88 <__aeabi_d2iz>
 8008136:	2200      	movs	r2, #0
 8008138:	4607      	mov	r7, r0
 800813a:	2300      	movs	r3, #0
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 fce4 	bl	8000b0c <__aeabi_dcmplt>
 8008144:	b140      	cbz	r0, 8008158 <_dtoa_r+0x168>
 8008146:	4638      	mov	r0, r7
 8008148:	f7f8 fa04 	bl	8000554 <__aeabi_i2d>
 800814c:	4622      	mov	r2, r4
 800814e:	462b      	mov	r3, r5
 8008150:	f7f8 fcd2 	bl	8000af8 <__aeabi_dcmpeq>
 8008154:	b900      	cbnz	r0, 8008158 <_dtoa_r+0x168>
 8008156:	3f01      	subs	r7, #1
 8008158:	2f16      	cmp	r7, #22
 800815a:	d852      	bhi.n	8008202 <_dtoa_r+0x212>
 800815c:	4b5d      	ldr	r3, [pc, #372]	@ (80082d4 <_dtoa_r+0x2e4>)
 800815e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800816a:	f7f8 fccf 	bl	8000b0c <__aeabi_dcmplt>
 800816e:	2800      	cmp	r0, #0
 8008170:	d049      	beq.n	8008206 <_dtoa_r+0x216>
 8008172:	3f01      	subs	r7, #1
 8008174:	2300      	movs	r3, #0
 8008176:	9310      	str	r3, [sp, #64]	@ 0x40
 8008178:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800817a:	1b9b      	subs	r3, r3, r6
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	bf45      	ittet	mi
 8008180:	f1c3 0301 	rsbmi	r3, r3, #1
 8008184:	9300      	strmi	r3, [sp, #0]
 8008186:	2300      	movpl	r3, #0
 8008188:	2300      	movmi	r3, #0
 800818a:	9206      	str	r2, [sp, #24]
 800818c:	bf54      	ite	pl
 800818e:	9300      	strpl	r3, [sp, #0]
 8008190:	9306      	strmi	r3, [sp, #24]
 8008192:	2f00      	cmp	r7, #0
 8008194:	db39      	blt.n	800820a <_dtoa_r+0x21a>
 8008196:	9b06      	ldr	r3, [sp, #24]
 8008198:	970d      	str	r7, [sp, #52]	@ 0x34
 800819a:	443b      	add	r3, r7
 800819c:	9306      	str	r3, [sp, #24]
 800819e:	2300      	movs	r3, #0
 80081a0:	9308      	str	r3, [sp, #32]
 80081a2:	9b07      	ldr	r3, [sp, #28]
 80081a4:	2b09      	cmp	r3, #9
 80081a6:	d863      	bhi.n	8008270 <_dtoa_r+0x280>
 80081a8:	2b05      	cmp	r3, #5
 80081aa:	bfc4      	itt	gt
 80081ac:	3b04      	subgt	r3, #4
 80081ae:	9307      	strgt	r3, [sp, #28]
 80081b0:	9b07      	ldr	r3, [sp, #28]
 80081b2:	f1a3 0302 	sub.w	r3, r3, #2
 80081b6:	bfcc      	ite	gt
 80081b8:	2400      	movgt	r4, #0
 80081ba:	2401      	movle	r4, #1
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d863      	bhi.n	8008288 <_dtoa_r+0x298>
 80081c0:	e8df f003 	tbb	[pc, r3]
 80081c4:	2b375452 	.word	0x2b375452
 80081c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80081cc:	441e      	add	r6, r3
 80081ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	bfc1      	itttt	gt
 80081d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80081da:	409f      	lslgt	r7, r3
 80081dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80081e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80081e4:	bfd6      	itet	le
 80081e6:	f1c3 0320 	rsble	r3, r3, #32
 80081ea:	ea47 0003 	orrgt.w	r0, r7, r3
 80081ee:	fa04 f003 	lslle.w	r0, r4, r3
 80081f2:	f7f8 f99f 	bl	8000534 <__aeabi_ui2d>
 80081f6:	2201      	movs	r2, #1
 80081f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081fc:	3e01      	subs	r6, #1
 80081fe:	9212      	str	r2, [sp, #72]	@ 0x48
 8008200:	e776      	b.n	80080f0 <_dtoa_r+0x100>
 8008202:	2301      	movs	r3, #1
 8008204:	e7b7      	b.n	8008176 <_dtoa_r+0x186>
 8008206:	9010      	str	r0, [sp, #64]	@ 0x40
 8008208:	e7b6      	b.n	8008178 <_dtoa_r+0x188>
 800820a:	9b00      	ldr	r3, [sp, #0]
 800820c:	1bdb      	subs	r3, r3, r7
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	427b      	negs	r3, r7
 8008212:	9308      	str	r3, [sp, #32]
 8008214:	2300      	movs	r3, #0
 8008216:	930d      	str	r3, [sp, #52]	@ 0x34
 8008218:	e7c3      	b.n	80081a2 <_dtoa_r+0x1b2>
 800821a:	2301      	movs	r3, #1
 800821c:	9309      	str	r3, [sp, #36]	@ 0x24
 800821e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008220:	eb07 0b03 	add.w	fp, r7, r3
 8008224:	f10b 0301 	add.w	r3, fp, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	9303      	str	r3, [sp, #12]
 800822c:	bfb8      	it	lt
 800822e:	2301      	movlt	r3, #1
 8008230:	e006      	b.n	8008240 <_dtoa_r+0x250>
 8008232:	2301      	movs	r3, #1
 8008234:	9309      	str	r3, [sp, #36]	@ 0x24
 8008236:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008238:	2b00      	cmp	r3, #0
 800823a:	dd28      	ble.n	800828e <_dtoa_r+0x29e>
 800823c:	469b      	mov	fp, r3
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008244:	2100      	movs	r1, #0
 8008246:	2204      	movs	r2, #4
 8008248:	f102 0514 	add.w	r5, r2, #20
 800824c:	429d      	cmp	r5, r3
 800824e:	d926      	bls.n	800829e <_dtoa_r+0x2ae>
 8008250:	6041      	str	r1, [r0, #4]
 8008252:	4648      	mov	r0, r9
 8008254:	f001 f8e8 	bl	8009428 <_Balloc>
 8008258:	4682      	mov	sl, r0
 800825a:	2800      	cmp	r0, #0
 800825c:	d142      	bne.n	80082e4 <_dtoa_r+0x2f4>
 800825e:	4b1e      	ldr	r3, [pc, #120]	@ (80082d8 <_dtoa_r+0x2e8>)
 8008260:	4602      	mov	r2, r0
 8008262:	f240 11af 	movw	r1, #431	@ 0x1af
 8008266:	e6da      	b.n	800801e <_dtoa_r+0x2e>
 8008268:	2300      	movs	r3, #0
 800826a:	e7e3      	b.n	8008234 <_dtoa_r+0x244>
 800826c:	2300      	movs	r3, #0
 800826e:	e7d5      	b.n	800821c <_dtoa_r+0x22c>
 8008270:	2401      	movs	r4, #1
 8008272:	2300      	movs	r3, #0
 8008274:	9307      	str	r3, [sp, #28]
 8008276:	9409      	str	r4, [sp, #36]	@ 0x24
 8008278:	f04f 3bff 	mov.w	fp, #4294967295
 800827c:	2200      	movs	r2, #0
 800827e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008282:	2312      	movs	r3, #18
 8008284:	920c      	str	r2, [sp, #48]	@ 0x30
 8008286:	e7db      	b.n	8008240 <_dtoa_r+0x250>
 8008288:	2301      	movs	r3, #1
 800828a:	9309      	str	r3, [sp, #36]	@ 0x24
 800828c:	e7f4      	b.n	8008278 <_dtoa_r+0x288>
 800828e:	f04f 0b01 	mov.w	fp, #1
 8008292:	f8cd b00c 	str.w	fp, [sp, #12]
 8008296:	465b      	mov	r3, fp
 8008298:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800829c:	e7d0      	b.n	8008240 <_dtoa_r+0x250>
 800829e:	3101      	adds	r1, #1
 80082a0:	0052      	lsls	r2, r2, #1
 80082a2:	e7d1      	b.n	8008248 <_dtoa_r+0x258>
 80082a4:	f3af 8000 	nop.w
 80082a8:	636f4361 	.word	0x636f4361
 80082ac:	3fd287a7 	.word	0x3fd287a7
 80082b0:	8b60c8b3 	.word	0x8b60c8b3
 80082b4:	3fc68a28 	.word	0x3fc68a28
 80082b8:	509f79fb 	.word	0x509f79fb
 80082bc:	3fd34413 	.word	0x3fd34413
 80082c0:	0800aa43 	.word	0x0800aa43
 80082c4:	0800ab05 	.word	0x0800ab05
 80082c8:	7ff00000 	.word	0x7ff00000
 80082cc:	0800aa1b 	.word	0x0800aa1b
 80082d0:	3ff80000 	.word	0x3ff80000
 80082d4:	0800acc0 	.word	0x0800acc0
 80082d8:	0800ab5d 	.word	0x0800ab5d
 80082dc:	0800ab01 	.word	0x0800ab01
 80082e0:	0800aa1a 	.word	0x0800aa1a
 80082e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80082e8:	6018      	str	r0, [r3, #0]
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	2b0e      	cmp	r3, #14
 80082ee:	f200 80a1 	bhi.w	8008434 <_dtoa_r+0x444>
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	f000 809e 	beq.w	8008434 <_dtoa_r+0x444>
 80082f8:	2f00      	cmp	r7, #0
 80082fa:	dd33      	ble.n	8008364 <_dtoa_r+0x374>
 80082fc:	4b9c      	ldr	r3, [pc, #624]	@ (8008570 <_dtoa_r+0x580>)
 80082fe:	f007 020f 	and.w	r2, r7, #15
 8008302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008306:	ed93 7b00 	vldr	d7, [r3]
 800830a:	05f8      	lsls	r0, r7, #23
 800830c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008310:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008314:	d516      	bpl.n	8008344 <_dtoa_r+0x354>
 8008316:	4b97      	ldr	r3, [pc, #604]	@ (8008574 <_dtoa_r+0x584>)
 8008318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800831c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008320:	f7f8 faac 	bl	800087c <__aeabi_ddiv>
 8008324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008328:	f004 040f 	and.w	r4, r4, #15
 800832c:	2603      	movs	r6, #3
 800832e:	4d91      	ldr	r5, [pc, #580]	@ (8008574 <_dtoa_r+0x584>)
 8008330:	b954      	cbnz	r4, 8008348 <_dtoa_r+0x358>
 8008332:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800833a:	f7f8 fa9f 	bl	800087c <__aeabi_ddiv>
 800833e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008342:	e028      	b.n	8008396 <_dtoa_r+0x3a6>
 8008344:	2602      	movs	r6, #2
 8008346:	e7f2      	b.n	800832e <_dtoa_r+0x33e>
 8008348:	07e1      	lsls	r1, r4, #31
 800834a:	d508      	bpl.n	800835e <_dtoa_r+0x36e>
 800834c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008350:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008354:	f7f8 f968 	bl	8000628 <__aeabi_dmul>
 8008358:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800835c:	3601      	adds	r6, #1
 800835e:	1064      	asrs	r4, r4, #1
 8008360:	3508      	adds	r5, #8
 8008362:	e7e5      	b.n	8008330 <_dtoa_r+0x340>
 8008364:	f000 80af 	beq.w	80084c6 <_dtoa_r+0x4d6>
 8008368:	427c      	negs	r4, r7
 800836a:	4b81      	ldr	r3, [pc, #516]	@ (8008570 <_dtoa_r+0x580>)
 800836c:	4d81      	ldr	r5, [pc, #516]	@ (8008574 <_dtoa_r+0x584>)
 800836e:	f004 020f 	and.w	r2, r4, #15
 8008372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800837e:	f7f8 f953 	bl	8000628 <__aeabi_dmul>
 8008382:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008386:	1124      	asrs	r4, r4, #4
 8008388:	2300      	movs	r3, #0
 800838a:	2602      	movs	r6, #2
 800838c:	2c00      	cmp	r4, #0
 800838e:	f040 808f 	bne.w	80084b0 <_dtoa_r+0x4c0>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1d3      	bne.n	800833e <_dtoa_r+0x34e>
 8008396:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008398:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8094 	beq.w	80084ca <_dtoa_r+0x4da>
 80083a2:	4b75      	ldr	r3, [pc, #468]	@ (8008578 <_dtoa_r+0x588>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f8 fbaf 	bl	8000b0c <__aeabi_dcmplt>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f000 808b 	beq.w	80084ca <_dtoa_r+0x4da>
 80083b4:	9b03      	ldr	r3, [sp, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8087 	beq.w	80084ca <_dtoa_r+0x4da>
 80083bc:	f1bb 0f00 	cmp.w	fp, #0
 80083c0:	dd34      	ble.n	800842c <_dtoa_r+0x43c>
 80083c2:	4620      	mov	r0, r4
 80083c4:	4b6d      	ldr	r3, [pc, #436]	@ (800857c <_dtoa_r+0x58c>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f8 f92d 	bl	8000628 <__aeabi_dmul>
 80083ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083d2:	f107 38ff 	add.w	r8, r7, #4294967295
 80083d6:	3601      	adds	r6, #1
 80083d8:	465c      	mov	r4, fp
 80083da:	4630      	mov	r0, r6
 80083dc:	f7f8 f8ba 	bl	8000554 <__aeabi_i2d>
 80083e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083e4:	f7f8 f920 	bl	8000628 <__aeabi_dmul>
 80083e8:	4b65      	ldr	r3, [pc, #404]	@ (8008580 <_dtoa_r+0x590>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	f7f7 ff66 	bl	80002bc <__adddf3>
 80083f0:	4605      	mov	r5, r0
 80083f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d16a      	bne.n	80084d0 <_dtoa_r+0x4e0>
 80083fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083fe:	4b61      	ldr	r3, [pc, #388]	@ (8008584 <_dtoa_r+0x594>)
 8008400:	2200      	movs	r2, #0
 8008402:	f7f7 ff59 	bl	80002b8 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800840e:	462a      	mov	r2, r5
 8008410:	4633      	mov	r3, r6
 8008412:	f7f8 fb99 	bl	8000b48 <__aeabi_dcmpgt>
 8008416:	2800      	cmp	r0, #0
 8008418:	f040 8298 	bne.w	800894c <_dtoa_r+0x95c>
 800841c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008420:	462a      	mov	r2, r5
 8008422:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008426:	f7f8 fb71 	bl	8000b0c <__aeabi_dcmplt>
 800842a:	bb38      	cbnz	r0, 800847c <_dtoa_r+0x48c>
 800842c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008430:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008434:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008436:	2b00      	cmp	r3, #0
 8008438:	f2c0 8157 	blt.w	80086ea <_dtoa_r+0x6fa>
 800843c:	2f0e      	cmp	r7, #14
 800843e:	f300 8154 	bgt.w	80086ea <_dtoa_r+0x6fa>
 8008442:	4b4b      	ldr	r3, [pc, #300]	@ (8008570 <_dtoa_r+0x580>)
 8008444:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008448:	ed93 7b00 	vldr	d7, [r3]
 800844c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800844e:	2b00      	cmp	r3, #0
 8008450:	ed8d 7b00 	vstr	d7, [sp]
 8008454:	f280 80e5 	bge.w	8008622 <_dtoa_r+0x632>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	f300 80e1 	bgt.w	8008622 <_dtoa_r+0x632>
 8008460:	d10c      	bne.n	800847c <_dtoa_r+0x48c>
 8008462:	4b48      	ldr	r3, [pc, #288]	@ (8008584 <_dtoa_r+0x594>)
 8008464:	2200      	movs	r2, #0
 8008466:	ec51 0b17 	vmov	r0, r1, d7
 800846a:	f7f8 f8dd 	bl	8000628 <__aeabi_dmul>
 800846e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008472:	f7f8 fb5f 	bl	8000b34 <__aeabi_dcmpge>
 8008476:	2800      	cmp	r0, #0
 8008478:	f000 8266 	beq.w	8008948 <_dtoa_r+0x958>
 800847c:	2400      	movs	r4, #0
 800847e:	4625      	mov	r5, r4
 8008480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008482:	4656      	mov	r6, sl
 8008484:	ea6f 0803 	mvn.w	r8, r3
 8008488:	2700      	movs	r7, #0
 800848a:	4621      	mov	r1, r4
 800848c:	4648      	mov	r0, r9
 800848e:	f001 f80b 	bl	80094a8 <_Bfree>
 8008492:	2d00      	cmp	r5, #0
 8008494:	f000 80bd 	beq.w	8008612 <_dtoa_r+0x622>
 8008498:	b12f      	cbz	r7, 80084a6 <_dtoa_r+0x4b6>
 800849a:	42af      	cmp	r7, r5
 800849c:	d003      	beq.n	80084a6 <_dtoa_r+0x4b6>
 800849e:	4639      	mov	r1, r7
 80084a0:	4648      	mov	r0, r9
 80084a2:	f001 f801 	bl	80094a8 <_Bfree>
 80084a6:	4629      	mov	r1, r5
 80084a8:	4648      	mov	r0, r9
 80084aa:	f000 fffd 	bl	80094a8 <_Bfree>
 80084ae:	e0b0      	b.n	8008612 <_dtoa_r+0x622>
 80084b0:	07e2      	lsls	r2, r4, #31
 80084b2:	d505      	bpl.n	80084c0 <_dtoa_r+0x4d0>
 80084b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084b8:	f7f8 f8b6 	bl	8000628 <__aeabi_dmul>
 80084bc:	3601      	adds	r6, #1
 80084be:	2301      	movs	r3, #1
 80084c0:	1064      	asrs	r4, r4, #1
 80084c2:	3508      	adds	r5, #8
 80084c4:	e762      	b.n	800838c <_dtoa_r+0x39c>
 80084c6:	2602      	movs	r6, #2
 80084c8:	e765      	b.n	8008396 <_dtoa_r+0x3a6>
 80084ca:	9c03      	ldr	r4, [sp, #12]
 80084cc:	46b8      	mov	r8, r7
 80084ce:	e784      	b.n	80083da <_dtoa_r+0x3ea>
 80084d0:	4b27      	ldr	r3, [pc, #156]	@ (8008570 <_dtoa_r+0x580>)
 80084d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084dc:	4454      	add	r4, sl
 80084de:	2900      	cmp	r1, #0
 80084e0:	d054      	beq.n	800858c <_dtoa_r+0x59c>
 80084e2:	4929      	ldr	r1, [pc, #164]	@ (8008588 <_dtoa_r+0x598>)
 80084e4:	2000      	movs	r0, #0
 80084e6:	f7f8 f9c9 	bl	800087c <__aeabi_ddiv>
 80084ea:	4633      	mov	r3, r6
 80084ec:	462a      	mov	r2, r5
 80084ee:	f7f7 fee3 	bl	80002b8 <__aeabi_dsub>
 80084f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084f6:	4656      	mov	r6, sl
 80084f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084fc:	f7f8 fb44 	bl	8000b88 <__aeabi_d2iz>
 8008500:	4605      	mov	r5, r0
 8008502:	f7f8 f827 	bl	8000554 <__aeabi_i2d>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800850e:	f7f7 fed3 	bl	80002b8 <__aeabi_dsub>
 8008512:	3530      	adds	r5, #48	@ 0x30
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800851c:	f806 5b01 	strb.w	r5, [r6], #1
 8008520:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008524:	f7f8 faf2 	bl	8000b0c <__aeabi_dcmplt>
 8008528:	2800      	cmp	r0, #0
 800852a:	d172      	bne.n	8008612 <_dtoa_r+0x622>
 800852c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008530:	4911      	ldr	r1, [pc, #68]	@ (8008578 <_dtoa_r+0x588>)
 8008532:	2000      	movs	r0, #0
 8008534:	f7f7 fec0 	bl	80002b8 <__aeabi_dsub>
 8008538:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800853c:	f7f8 fae6 	bl	8000b0c <__aeabi_dcmplt>
 8008540:	2800      	cmp	r0, #0
 8008542:	f040 80b4 	bne.w	80086ae <_dtoa_r+0x6be>
 8008546:	42a6      	cmp	r6, r4
 8008548:	f43f af70 	beq.w	800842c <_dtoa_r+0x43c>
 800854c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008550:	4b0a      	ldr	r3, [pc, #40]	@ (800857c <_dtoa_r+0x58c>)
 8008552:	2200      	movs	r2, #0
 8008554:	f7f8 f868 	bl	8000628 <__aeabi_dmul>
 8008558:	4b08      	ldr	r3, [pc, #32]	@ (800857c <_dtoa_r+0x58c>)
 800855a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800855e:	2200      	movs	r2, #0
 8008560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008564:	f7f8 f860 	bl	8000628 <__aeabi_dmul>
 8008568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800856c:	e7c4      	b.n	80084f8 <_dtoa_r+0x508>
 800856e:	bf00      	nop
 8008570:	0800acc0 	.word	0x0800acc0
 8008574:	0800ac98 	.word	0x0800ac98
 8008578:	3ff00000 	.word	0x3ff00000
 800857c:	40240000 	.word	0x40240000
 8008580:	401c0000 	.word	0x401c0000
 8008584:	40140000 	.word	0x40140000
 8008588:	3fe00000 	.word	0x3fe00000
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	f7f8 f84a 	bl	8000628 <__aeabi_dmul>
 8008594:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008598:	9413      	str	r4, [sp, #76]	@ 0x4c
 800859a:	4656      	mov	r6, sl
 800859c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a0:	f7f8 faf2 	bl	8000b88 <__aeabi_d2iz>
 80085a4:	4605      	mov	r5, r0
 80085a6:	f7f7 ffd5 	bl	8000554 <__aeabi_i2d>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085b2:	f7f7 fe81 	bl	80002b8 <__aeabi_dsub>
 80085b6:	3530      	adds	r5, #48	@ 0x30
 80085b8:	f806 5b01 	strb.w	r5, [r6], #1
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	42a6      	cmp	r6, r4
 80085c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	d124      	bne.n	8008616 <_dtoa_r+0x626>
 80085cc:	4baf      	ldr	r3, [pc, #700]	@ (800888c <_dtoa_r+0x89c>)
 80085ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80085d2:	f7f7 fe73 	bl	80002bc <__adddf3>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085de:	f7f8 fab3 	bl	8000b48 <__aeabi_dcmpgt>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d163      	bne.n	80086ae <_dtoa_r+0x6be>
 80085e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085ea:	49a8      	ldr	r1, [pc, #672]	@ (800888c <_dtoa_r+0x89c>)
 80085ec:	2000      	movs	r0, #0
 80085ee:	f7f7 fe63 	bl	80002b8 <__aeabi_dsub>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085fa:	f7f8 fa87 	bl	8000b0c <__aeabi_dcmplt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	f43f af14 	beq.w	800842c <_dtoa_r+0x43c>
 8008604:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008606:	1e73      	subs	r3, r6, #1
 8008608:	9313      	str	r3, [sp, #76]	@ 0x4c
 800860a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800860e:	2b30      	cmp	r3, #48	@ 0x30
 8008610:	d0f8      	beq.n	8008604 <_dtoa_r+0x614>
 8008612:	4647      	mov	r7, r8
 8008614:	e03b      	b.n	800868e <_dtoa_r+0x69e>
 8008616:	4b9e      	ldr	r3, [pc, #632]	@ (8008890 <_dtoa_r+0x8a0>)
 8008618:	f7f8 f806 	bl	8000628 <__aeabi_dmul>
 800861c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008620:	e7bc      	b.n	800859c <_dtoa_r+0x5ac>
 8008622:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008626:	4656      	mov	r6, sl
 8008628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f8 f924 	bl	800087c <__aeabi_ddiv>
 8008634:	f7f8 faa8 	bl	8000b88 <__aeabi_d2iz>
 8008638:	4680      	mov	r8, r0
 800863a:	f7f7 ff8b 	bl	8000554 <__aeabi_i2d>
 800863e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008642:	f7f7 fff1 	bl	8000628 <__aeabi_dmul>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4620      	mov	r0, r4
 800864c:	4629      	mov	r1, r5
 800864e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008652:	f7f7 fe31 	bl	80002b8 <__aeabi_dsub>
 8008656:	f806 4b01 	strb.w	r4, [r6], #1
 800865a:	9d03      	ldr	r5, [sp, #12]
 800865c:	eba6 040a 	sub.w	r4, r6, sl
 8008660:	42a5      	cmp	r5, r4
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	d133      	bne.n	80086d0 <_dtoa_r+0x6e0>
 8008668:	f7f7 fe28 	bl	80002bc <__adddf3>
 800866c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008670:	4604      	mov	r4, r0
 8008672:	460d      	mov	r5, r1
 8008674:	f7f8 fa68 	bl	8000b48 <__aeabi_dcmpgt>
 8008678:	b9c0      	cbnz	r0, 80086ac <_dtoa_r+0x6bc>
 800867a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800867e:	4620      	mov	r0, r4
 8008680:	4629      	mov	r1, r5
 8008682:	f7f8 fa39 	bl	8000af8 <__aeabi_dcmpeq>
 8008686:	b110      	cbz	r0, 800868e <_dtoa_r+0x69e>
 8008688:	f018 0f01 	tst.w	r8, #1
 800868c:	d10e      	bne.n	80086ac <_dtoa_r+0x6bc>
 800868e:	9902      	ldr	r1, [sp, #8]
 8008690:	4648      	mov	r0, r9
 8008692:	f000 ff09 	bl	80094a8 <_Bfree>
 8008696:	2300      	movs	r3, #0
 8008698:	7033      	strb	r3, [r6, #0]
 800869a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800869c:	3701      	adds	r7, #1
 800869e:	601f      	str	r7, [r3, #0]
 80086a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 824b 	beq.w	8008b3e <_dtoa_r+0xb4e>
 80086a8:	601e      	str	r6, [r3, #0]
 80086aa:	e248      	b.n	8008b3e <_dtoa_r+0xb4e>
 80086ac:	46b8      	mov	r8, r7
 80086ae:	4633      	mov	r3, r6
 80086b0:	461e      	mov	r6, r3
 80086b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b6:	2a39      	cmp	r2, #57	@ 0x39
 80086b8:	d106      	bne.n	80086c8 <_dtoa_r+0x6d8>
 80086ba:	459a      	cmp	sl, r3
 80086bc:	d1f8      	bne.n	80086b0 <_dtoa_r+0x6c0>
 80086be:	2230      	movs	r2, #48	@ 0x30
 80086c0:	f108 0801 	add.w	r8, r8, #1
 80086c4:	f88a 2000 	strb.w	r2, [sl]
 80086c8:	781a      	ldrb	r2, [r3, #0]
 80086ca:	3201      	adds	r2, #1
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	e7a0      	b.n	8008612 <_dtoa_r+0x622>
 80086d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008890 <_dtoa_r+0x8a0>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	f7f7 ffa8 	bl	8000628 <__aeabi_dmul>
 80086d8:	2200      	movs	r2, #0
 80086da:	2300      	movs	r3, #0
 80086dc:	4604      	mov	r4, r0
 80086de:	460d      	mov	r5, r1
 80086e0:	f7f8 fa0a 	bl	8000af8 <__aeabi_dcmpeq>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d09f      	beq.n	8008628 <_dtoa_r+0x638>
 80086e8:	e7d1      	b.n	800868e <_dtoa_r+0x69e>
 80086ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	f000 80ea 	beq.w	80088c6 <_dtoa_r+0x8d6>
 80086f2:	9a07      	ldr	r2, [sp, #28]
 80086f4:	2a01      	cmp	r2, #1
 80086f6:	f300 80cd 	bgt.w	8008894 <_dtoa_r+0x8a4>
 80086fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	f000 80c1 	beq.w	8008884 <_dtoa_r+0x894>
 8008702:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008706:	9c08      	ldr	r4, [sp, #32]
 8008708:	9e00      	ldr	r6, [sp, #0]
 800870a:	9a00      	ldr	r2, [sp, #0]
 800870c:	441a      	add	r2, r3
 800870e:	9200      	str	r2, [sp, #0]
 8008710:	9a06      	ldr	r2, [sp, #24]
 8008712:	2101      	movs	r1, #1
 8008714:	441a      	add	r2, r3
 8008716:	4648      	mov	r0, r9
 8008718:	9206      	str	r2, [sp, #24]
 800871a:	f000 ffc3 	bl	80096a4 <__i2b>
 800871e:	4605      	mov	r5, r0
 8008720:	b166      	cbz	r6, 800873c <_dtoa_r+0x74c>
 8008722:	9b06      	ldr	r3, [sp, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd09      	ble.n	800873c <_dtoa_r+0x74c>
 8008728:	42b3      	cmp	r3, r6
 800872a:	9a00      	ldr	r2, [sp, #0]
 800872c:	bfa8      	it	ge
 800872e:	4633      	movge	r3, r6
 8008730:	1ad2      	subs	r2, r2, r3
 8008732:	9200      	str	r2, [sp, #0]
 8008734:	9a06      	ldr	r2, [sp, #24]
 8008736:	1af6      	subs	r6, r6, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	b30b      	cbz	r3, 8008784 <_dtoa_r+0x794>
 8008740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 80c6 	beq.w	80088d4 <_dtoa_r+0x8e4>
 8008748:	2c00      	cmp	r4, #0
 800874a:	f000 80c0 	beq.w	80088ce <_dtoa_r+0x8de>
 800874e:	4629      	mov	r1, r5
 8008750:	4622      	mov	r2, r4
 8008752:	4648      	mov	r0, r9
 8008754:	f001 f85e 	bl	8009814 <__pow5mult>
 8008758:	9a02      	ldr	r2, [sp, #8]
 800875a:	4601      	mov	r1, r0
 800875c:	4605      	mov	r5, r0
 800875e:	4648      	mov	r0, r9
 8008760:	f000 ffb6 	bl	80096d0 <__multiply>
 8008764:	9902      	ldr	r1, [sp, #8]
 8008766:	4680      	mov	r8, r0
 8008768:	4648      	mov	r0, r9
 800876a:	f000 fe9d 	bl	80094a8 <_Bfree>
 800876e:	9b08      	ldr	r3, [sp, #32]
 8008770:	1b1b      	subs	r3, r3, r4
 8008772:	9308      	str	r3, [sp, #32]
 8008774:	f000 80b1 	beq.w	80088da <_dtoa_r+0x8ea>
 8008778:	9a08      	ldr	r2, [sp, #32]
 800877a:	4641      	mov	r1, r8
 800877c:	4648      	mov	r0, r9
 800877e:	f001 f849 	bl	8009814 <__pow5mult>
 8008782:	9002      	str	r0, [sp, #8]
 8008784:	2101      	movs	r1, #1
 8008786:	4648      	mov	r0, r9
 8008788:	f000 ff8c 	bl	80096a4 <__i2b>
 800878c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800878e:	4604      	mov	r4, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 81d8 	beq.w	8008b46 <_dtoa_r+0xb56>
 8008796:	461a      	mov	r2, r3
 8008798:	4601      	mov	r1, r0
 800879a:	4648      	mov	r0, r9
 800879c:	f001 f83a 	bl	8009814 <__pow5mult>
 80087a0:	9b07      	ldr	r3, [sp, #28]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	4604      	mov	r4, r0
 80087a6:	f300 809f 	bgt.w	80088e8 <_dtoa_r+0x8f8>
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f040 8097 	bne.w	80088e0 <_dtoa_r+0x8f0>
 80087b2:	9b05      	ldr	r3, [sp, #20]
 80087b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f040 8093 	bne.w	80088e4 <_dtoa_r+0x8f4>
 80087be:	9b05      	ldr	r3, [sp, #20]
 80087c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087c4:	0d1b      	lsrs	r3, r3, #20
 80087c6:	051b      	lsls	r3, r3, #20
 80087c8:	b133      	cbz	r3, 80087d8 <_dtoa_r+0x7e8>
 80087ca:	9b00      	ldr	r3, [sp, #0]
 80087cc:	3301      	adds	r3, #1
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	9b06      	ldr	r3, [sp, #24]
 80087d2:	3301      	adds	r3, #1
 80087d4:	9306      	str	r3, [sp, #24]
 80087d6:	2301      	movs	r3, #1
 80087d8:	9308      	str	r3, [sp, #32]
 80087da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 81b8 	beq.w	8008b52 <_dtoa_r+0xb62>
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087e8:	6918      	ldr	r0, [r3, #16]
 80087ea:	f000 ff0f 	bl	800960c <__hi0bits>
 80087ee:	f1c0 0020 	rsb	r0, r0, #32
 80087f2:	9b06      	ldr	r3, [sp, #24]
 80087f4:	4418      	add	r0, r3
 80087f6:	f010 001f 	ands.w	r0, r0, #31
 80087fa:	f000 8082 	beq.w	8008902 <_dtoa_r+0x912>
 80087fe:	f1c0 0320 	rsb	r3, r0, #32
 8008802:	2b04      	cmp	r3, #4
 8008804:	dd73      	ble.n	80088ee <_dtoa_r+0x8fe>
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	f1c0 001c 	rsb	r0, r0, #28
 800880c:	4403      	add	r3, r0
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	9b06      	ldr	r3, [sp, #24]
 8008812:	4403      	add	r3, r0
 8008814:	4406      	add	r6, r0
 8008816:	9306      	str	r3, [sp, #24]
 8008818:	9b00      	ldr	r3, [sp, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	dd05      	ble.n	800882a <_dtoa_r+0x83a>
 800881e:	9902      	ldr	r1, [sp, #8]
 8008820:	461a      	mov	r2, r3
 8008822:	4648      	mov	r0, r9
 8008824:	f001 f850 	bl	80098c8 <__lshift>
 8008828:	9002      	str	r0, [sp, #8]
 800882a:	9b06      	ldr	r3, [sp, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	dd05      	ble.n	800883c <_dtoa_r+0x84c>
 8008830:	4621      	mov	r1, r4
 8008832:	461a      	mov	r2, r3
 8008834:	4648      	mov	r0, r9
 8008836:	f001 f847 	bl	80098c8 <__lshift>
 800883a:	4604      	mov	r4, r0
 800883c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d061      	beq.n	8008906 <_dtoa_r+0x916>
 8008842:	9802      	ldr	r0, [sp, #8]
 8008844:	4621      	mov	r1, r4
 8008846:	f001 f8ab 	bl	80099a0 <__mcmp>
 800884a:	2800      	cmp	r0, #0
 800884c:	da5b      	bge.n	8008906 <_dtoa_r+0x916>
 800884e:	2300      	movs	r3, #0
 8008850:	9902      	ldr	r1, [sp, #8]
 8008852:	220a      	movs	r2, #10
 8008854:	4648      	mov	r0, r9
 8008856:	f000 fe49 	bl	80094ec <__multadd>
 800885a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885c:	9002      	str	r0, [sp, #8]
 800885e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 8177 	beq.w	8008b56 <_dtoa_r+0xb66>
 8008868:	4629      	mov	r1, r5
 800886a:	2300      	movs	r3, #0
 800886c:	220a      	movs	r2, #10
 800886e:	4648      	mov	r0, r9
 8008870:	f000 fe3c 	bl	80094ec <__multadd>
 8008874:	f1bb 0f00 	cmp.w	fp, #0
 8008878:	4605      	mov	r5, r0
 800887a:	dc6f      	bgt.n	800895c <_dtoa_r+0x96c>
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	2b02      	cmp	r3, #2
 8008880:	dc49      	bgt.n	8008916 <_dtoa_r+0x926>
 8008882:	e06b      	b.n	800895c <_dtoa_r+0x96c>
 8008884:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800888a:	e73c      	b.n	8008706 <_dtoa_r+0x716>
 800888c:	3fe00000 	.word	0x3fe00000
 8008890:	40240000 	.word	0x40240000
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	1e5c      	subs	r4, r3, #1
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	42a3      	cmp	r3, r4
 800889c:	db09      	blt.n	80088b2 <_dtoa_r+0x8c2>
 800889e:	1b1c      	subs	r4, r3, r4
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f6bf af30 	bge.w	8008708 <_dtoa_r+0x718>
 80088a8:	9b00      	ldr	r3, [sp, #0]
 80088aa:	9a03      	ldr	r2, [sp, #12]
 80088ac:	1a9e      	subs	r6, r3, r2
 80088ae:	2300      	movs	r3, #0
 80088b0:	e72b      	b.n	800870a <_dtoa_r+0x71a>
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088b6:	9408      	str	r4, [sp, #32]
 80088b8:	1ae3      	subs	r3, r4, r3
 80088ba:	441a      	add	r2, r3
 80088bc:	9e00      	ldr	r6, [sp, #0]
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80088c2:	2400      	movs	r4, #0
 80088c4:	e721      	b.n	800870a <_dtoa_r+0x71a>
 80088c6:	9c08      	ldr	r4, [sp, #32]
 80088c8:	9e00      	ldr	r6, [sp, #0]
 80088ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80088cc:	e728      	b.n	8008720 <_dtoa_r+0x730>
 80088ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80088d2:	e751      	b.n	8008778 <_dtoa_r+0x788>
 80088d4:	9a08      	ldr	r2, [sp, #32]
 80088d6:	9902      	ldr	r1, [sp, #8]
 80088d8:	e750      	b.n	800877c <_dtoa_r+0x78c>
 80088da:	f8cd 8008 	str.w	r8, [sp, #8]
 80088de:	e751      	b.n	8008784 <_dtoa_r+0x794>
 80088e0:	2300      	movs	r3, #0
 80088e2:	e779      	b.n	80087d8 <_dtoa_r+0x7e8>
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	e777      	b.n	80087d8 <_dtoa_r+0x7e8>
 80088e8:	2300      	movs	r3, #0
 80088ea:	9308      	str	r3, [sp, #32]
 80088ec:	e779      	b.n	80087e2 <_dtoa_r+0x7f2>
 80088ee:	d093      	beq.n	8008818 <_dtoa_r+0x828>
 80088f0:	9a00      	ldr	r2, [sp, #0]
 80088f2:	331c      	adds	r3, #28
 80088f4:	441a      	add	r2, r3
 80088f6:	9200      	str	r2, [sp, #0]
 80088f8:	9a06      	ldr	r2, [sp, #24]
 80088fa:	441a      	add	r2, r3
 80088fc:	441e      	add	r6, r3
 80088fe:	9206      	str	r2, [sp, #24]
 8008900:	e78a      	b.n	8008818 <_dtoa_r+0x828>
 8008902:	4603      	mov	r3, r0
 8008904:	e7f4      	b.n	80088f0 <_dtoa_r+0x900>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	46b8      	mov	r8, r7
 800890c:	dc20      	bgt.n	8008950 <_dtoa_r+0x960>
 800890e:	469b      	mov	fp, r3
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	2b02      	cmp	r3, #2
 8008914:	dd1e      	ble.n	8008954 <_dtoa_r+0x964>
 8008916:	f1bb 0f00 	cmp.w	fp, #0
 800891a:	f47f adb1 	bne.w	8008480 <_dtoa_r+0x490>
 800891e:	4621      	mov	r1, r4
 8008920:	465b      	mov	r3, fp
 8008922:	2205      	movs	r2, #5
 8008924:	4648      	mov	r0, r9
 8008926:	f000 fde1 	bl	80094ec <__multadd>
 800892a:	4601      	mov	r1, r0
 800892c:	4604      	mov	r4, r0
 800892e:	9802      	ldr	r0, [sp, #8]
 8008930:	f001 f836 	bl	80099a0 <__mcmp>
 8008934:	2800      	cmp	r0, #0
 8008936:	f77f ada3 	ble.w	8008480 <_dtoa_r+0x490>
 800893a:	4656      	mov	r6, sl
 800893c:	2331      	movs	r3, #49	@ 0x31
 800893e:	f806 3b01 	strb.w	r3, [r6], #1
 8008942:	f108 0801 	add.w	r8, r8, #1
 8008946:	e59f      	b.n	8008488 <_dtoa_r+0x498>
 8008948:	9c03      	ldr	r4, [sp, #12]
 800894a:	46b8      	mov	r8, r7
 800894c:	4625      	mov	r5, r4
 800894e:	e7f4      	b.n	800893a <_dtoa_r+0x94a>
 8008950:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8101 	beq.w	8008b5e <_dtoa_r+0xb6e>
 800895c:	2e00      	cmp	r6, #0
 800895e:	dd05      	ble.n	800896c <_dtoa_r+0x97c>
 8008960:	4629      	mov	r1, r5
 8008962:	4632      	mov	r2, r6
 8008964:	4648      	mov	r0, r9
 8008966:	f000 ffaf 	bl	80098c8 <__lshift>
 800896a:	4605      	mov	r5, r0
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d05c      	beq.n	8008a2c <_dtoa_r+0xa3c>
 8008972:	6869      	ldr	r1, [r5, #4]
 8008974:	4648      	mov	r0, r9
 8008976:	f000 fd57 	bl	8009428 <_Balloc>
 800897a:	4606      	mov	r6, r0
 800897c:	b928      	cbnz	r0, 800898a <_dtoa_r+0x99a>
 800897e:	4b82      	ldr	r3, [pc, #520]	@ (8008b88 <_dtoa_r+0xb98>)
 8008980:	4602      	mov	r2, r0
 8008982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008986:	f7ff bb4a 	b.w	800801e <_dtoa_r+0x2e>
 800898a:	692a      	ldr	r2, [r5, #16]
 800898c:	3202      	adds	r2, #2
 800898e:	0092      	lsls	r2, r2, #2
 8008990:	f105 010c 	add.w	r1, r5, #12
 8008994:	300c      	adds	r0, #12
 8008996:	f7ff fa68 	bl	8007e6a <memcpy>
 800899a:	2201      	movs	r2, #1
 800899c:	4631      	mov	r1, r6
 800899e:	4648      	mov	r0, r9
 80089a0:	f000 ff92 	bl	80098c8 <__lshift>
 80089a4:	f10a 0301 	add.w	r3, sl, #1
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	eb0a 030b 	add.w	r3, sl, fp
 80089ae:	9308      	str	r3, [sp, #32]
 80089b0:	9b04      	ldr	r3, [sp, #16]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	462f      	mov	r7, r5
 80089b8:	9306      	str	r3, [sp, #24]
 80089ba:	4605      	mov	r5, r0
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	9802      	ldr	r0, [sp, #8]
 80089c0:	4621      	mov	r1, r4
 80089c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80089c6:	f7ff fa8b 	bl	8007ee0 <quorem>
 80089ca:	4603      	mov	r3, r0
 80089cc:	3330      	adds	r3, #48	@ 0x30
 80089ce:	9003      	str	r0, [sp, #12]
 80089d0:	4639      	mov	r1, r7
 80089d2:	9802      	ldr	r0, [sp, #8]
 80089d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089d6:	f000 ffe3 	bl	80099a0 <__mcmp>
 80089da:	462a      	mov	r2, r5
 80089dc:	9004      	str	r0, [sp, #16]
 80089de:	4621      	mov	r1, r4
 80089e0:	4648      	mov	r0, r9
 80089e2:	f000 fff9 	bl	80099d8 <__mdiff>
 80089e6:	68c2      	ldr	r2, [r0, #12]
 80089e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ea:	4606      	mov	r6, r0
 80089ec:	bb02      	cbnz	r2, 8008a30 <_dtoa_r+0xa40>
 80089ee:	4601      	mov	r1, r0
 80089f0:	9802      	ldr	r0, [sp, #8]
 80089f2:	f000 ffd5 	bl	80099a0 <__mcmp>
 80089f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f8:	4602      	mov	r2, r0
 80089fa:	4631      	mov	r1, r6
 80089fc:	4648      	mov	r0, r9
 80089fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a02:	f000 fd51 	bl	80094a8 <_Bfree>
 8008a06:	9b07      	ldr	r3, [sp, #28]
 8008a08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a0a:	9e00      	ldr	r6, [sp, #0]
 8008a0c:	ea42 0103 	orr.w	r1, r2, r3
 8008a10:	9b06      	ldr	r3, [sp, #24]
 8008a12:	4319      	orrs	r1, r3
 8008a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a16:	d10d      	bne.n	8008a34 <_dtoa_r+0xa44>
 8008a18:	2b39      	cmp	r3, #57	@ 0x39
 8008a1a:	d027      	beq.n	8008a6c <_dtoa_r+0xa7c>
 8008a1c:	9a04      	ldr	r2, [sp, #16]
 8008a1e:	2a00      	cmp	r2, #0
 8008a20:	dd01      	ble.n	8008a26 <_dtoa_r+0xa36>
 8008a22:	9b03      	ldr	r3, [sp, #12]
 8008a24:	3331      	adds	r3, #49	@ 0x31
 8008a26:	f88b 3000 	strb.w	r3, [fp]
 8008a2a:	e52e      	b.n	800848a <_dtoa_r+0x49a>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	e7b9      	b.n	80089a4 <_dtoa_r+0x9b4>
 8008a30:	2201      	movs	r2, #1
 8008a32:	e7e2      	b.n	80089fa <_dtoa_r+0xa0a>
 8008a34:	9904      	ldr	r1, [sp, #16]
 8008a36:	2900      	cmp	r1, #0
 8008a38:	db04      	blt.n	8008a44 <_dtoa_r+0xa54>
 8008a3a:	9807      	ldr	r0, [sp, #28]
 8008a3c:	4301      	orrs	r1, r0
 8008a3e:	9806      	ldr	r0, [sp, #24]
 8008a40:	4301      	orrs	r1, r0
 8008a42:	d120      	bne.n	8008a86 <_dtoa_r+0xa96>
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	ddee      	ble.n	8008a26 <_dtoa_r+0xa36>
 8008a48:	9902      	ldr	r1, [sp, #8]
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	4648      	mov	r0, r9
 8008a50:	f000 ff3a 	bl	80098c8 <__lshift>
 8008a54:	4621      	mov	r1, r4
 8008a56:	9002      	str	r0, [sp, #8]
 8008a58:	f000 ffa2 	bl	80099a0 <__mcmp>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	9b00      	ldr	r3, [sp, #0]
 8008a60:	dc02      	bgt.n	8008a68 <_dtoa_r+0xa78>
 8008a62:	d1e0      	bne.n	8008a26 <_dtoa_r+0xa36>
 8008a64:	07da      	lsls	r2, r3, #31
 8008a66:	d5de      	bpl.n	8008a26 <_dtoa_r+0xa36>
 8008a68:	2b39      	cmp	r3, #57	@ 0x39
 8008a6a:	d1da      	bne.n	8008a22 <_dtoa_r+0xa32>
 8008a6c:	2339      	movs	r3, #57	@ 0x39
 8008a6e:	f88b 3000 	strb.w	r3, [fp]
 8008a72:	4633      	mov	r3, r6
 8008a74:	461e      	mov	r6, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a7c:	2a39      	cmp	r2, #57	@ 0x39
 8008a7e:	d04e      	beq.n	8008b1e <_dtoa_r+0xb2e>
 8008a80:	3201      	adds	r2, #1
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	e501      	b.n	800848a <_dtoa_r+0x49a>
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	dd03      	ble.n	8008a92 <_dtoa_r+0xaa2>
 8008a8a:	2b39      	cmp	r3, #57	@ 0x39
 8008a8c:	d0ee      	beq.n	8008a6c <_dtoa_r+0xa7c>
 8008a8e:	3301      	adds	r3, #1
 8008a90:	e7c9      	b.n	8008a26 <_dtoa_r+0xa36>
 8008a92:	9a00      	ldr	r2, [sp, #0]
 8008a94:	9908      	ldr	r1, [sp, #32]
 8008a96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a9a:	428a      	cmp	r2, r1
 8008a9c:	d028      	beq.n	8008af0 <_dtoa_r+0xb00>
 8008a9e:	9902      	ldr	r1, [sp, #8]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	220a      	movs	r2, #10
 8008aa4:	4648      	mov	r0, r9
 8008aa6:	f000 fd21 	bl	80094ec <__multadd>
 8008aaa:	42af      	cmp	r7, r5
 8008aac:	9002      	str	r0, [sp, #8]
 8008aae:	f04f 0300 	mov.w	r3, #0
 8008ab2:	f04f 020a 	mov.w	r2, #10
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	4648      	mov	r0, r9
 8008aba:	d107      	bne.n	8008acc <_dtoa_r+0xadc>
 8008abc:	f000 fd16 	bl	80094ec <__multadd>
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	9b00      	ldr	r3, [sp, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	e777      	b.n	80089bc <_dtoa_r+0x9cc>
 8008acc:	f000 fd0e 	bl	80094ec <__multadd>
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	220a      	movs	r2, #10
 8008ad8:	4648      	mov	r0, r9
 8008ada:	f000 fd07 	bl	80094ec <__multadd>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	e7f0      	b.n	8008ac4 <_dtoa_r+0xad4>
 8008ae2:	f1bb 0f00 	cmp.w	fp, #0
 8008ae6:	bfcc      	ite	gt
 8008ae8:	465e      	movgt	r6, fp
 8008aea:	2601      	movle	r6, #1
 8008aec:	4456      	add	r6, sl
 8008aee:	2700      	movs	r7, #0
 8008af0:	9902      	ldr	r1, [sp, #8]
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	2201      	movs	r2, #1
 8008af6:	4648      	mov	r0, r9
 8008af8:	f000 fee6 	bl	80098c8 <__lshift>
 8008afc:	4621      	mov	r1, r4
 8008afe:	9002      	str	r0, [sp, #8]
 8008b00:	f000 ff4e 	bl	80099a0 <__mcmp>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	dcb4      	bgt.n	8008a72 <_dtoa_r+0xa82>
 8008b08:	d102      	bne.n	8008b10 <_dtoa_r+0xb20>
 8008b0a:	9b00      	ldr	r3, [sp, #0]
 8008b0c:	07db      	lsls	r3, r3, #31
 8008b0e:	d4b0      	bmi.n	8008a72 <_dtoa_r+0xa82>
 8008b10:	4633      	mov	r3, r6
 8008b12:	461e      	mov	r6, r3
 8008b14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b18:	2a30      	cmp	r2, #48	@ 0x30
 8008b1a:	d0fa      	beq.n	8008b12 <_dtoa_r+0xb22>
 8008b1c:	e4b5      	b.n	800848a <_dtoa_r+0x49a>
 8008b1e:	459a      	cmp	sl, r3
 8008b20:	d1a8      	bne.n	8008a74 <_dtoa_r+0xa84>
 8008b22:	2331      	movs	r3, #49	@ 0x31
 8008b24:	f108 0801 	add.w	r8, r8, #1
 8008b28:	f88a 3000 	strb.w	r3, [sl]
 8008b2c:	e4ad      	b.n	800848a <_dtoa_r+0x49a>
 8008b2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008b8c <_dtoa_r+0xb9c>
 8008b34:	b11b      	cbz	r3, 8008b3e <_dtoa_r+0xb4e>
 8008b36:	f10a 0308 	add.w	r3, sl, #8
 8008b3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	4650      	mov	r0, sl
 8008b40:	b017      	add	sp, #92	@ 0x5c
 8008b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b46:	9b07      	ldr	r3, [sp, #28]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	f77f ae2e 	ble.w	80087aa <_dtoa_r+0x7ba>
 8008b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b50:	9308      	str	r3, [sp, #32]
 8008b52:	2001      	movs	r0, #1
 8008b54:	e64d      	b.n	80087f2 <_dtoa_r+0x802>
 8008b56:	f1bb 0f00 	cmp.w	fp, #0
 8008b5a:	f77f aed9 	ble.w	8008910 <_dtoa_r+0x920>
 8008b5e:	4656      	mov	r6, sl
 8008b60:	9802      	ldr	r0, [sp, #8]
 8008b62:	4621      	mov	r1, r4
 8008b64:	f7ff f9bc 	bl	8007ee0 <quorem>
 8008b68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b70:	eba6 020a 	sub.w	r2, r6, sl
 8008b74:	4593      	cmp	fp, r2
 8008b76:	ddb4      	ble.n	8008ae2 <_dtoa_r+0xaf2>
 8008b78:	9902      	ldr	r1, [sp, #8]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f000 fcb4 	bl	80094ec <__multadd>
 8008b84:	9002      	str	r0, [sp, #8]
 8008b86:	e7eb      	b.n	8008b60 <_dtoa_r+0xb70>
 8008b88:	0800ab5d 	.word	0x0800ab5d
 8008b8c:	0800aaf8 	.word	0x0800aaf8

08008b90 <_free_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4605      	mov	r5, r0
 8008b94:	2900      	cmp	r1, #0
 8008b96:	d041      	beq.n	8008c1c <_free_r+0x8c>
 8008b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9c:	1f0c      	subs	r4, r1, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bfb8      	it	lt
 8008ba2:	18e4      	addlt	r4, r4, r3
 8008ba4:	f000 fc34 	bl	8009410 <__malloc_lock>
 8008ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c20 <_free_r+0x90>)
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	b933      	cbnz	r3, 8008bbc <_free_r+0x2c>
 8008bae:	6063      	str	r3, [r4, #4]
 8008bb0:	6014      	str	r4, [r2, #0]
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb8:	f000 bc30 	b.w	800941c <__malloc_unlock>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d908      	bls.n	8008bd2 <_free_r+0x42>
 8008bc0:	6820      	ldr	r0, [r4, #0]
 8008bc2:	1821      	adds	r1, r4, r0
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf01      	itttt	eq
 8008bc8:	6819      	ldreq	r1, [r3, #0]
 8008bca:	685b      	ldreq	r3, [r3, #4]
 8008bcc:	1809      	addeq	r1, r1, r0
 8008bce:	6021      	streq	r1, [r4, #0]
 8008bd0:	e7ed      	b.n	8008bae <_free_r+0x1e>
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b10b      	cbz	r3, 8008bdc <_free_r+0x4c>
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	d9fa      	bls.n	8008bd2 <_free_r+0x42>
 8008bdc:	6811      	ldr	r1, [r2, #0]
 8008bde:	1850      	adds	r0, r2, r1
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d10b      	bne.n	8008bfc <_free_r+0x6c>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	4401      	add	r1, r0
 8008be8:	1850      	adds	r0, r2, r1
 8008bea:	4283      	cmp	r3, r0
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	d1e0      	bne.n	8008bb2 <_free_r+0x22>
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	6053      	str	r3, [r2, #4]
 8008bf6:	4408      	add	r0, r1
 8008bf8:	6010      	str	r0, [r2, #0]
 8008bfa:	e7da      	b.n	8008bb2 <_free_r+0x22>
 8008bfc:	d902      	bls.n	8008c04 <_free_r+0x74>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	e7d6      	b.n	8008bb2 <_free_r+0x22>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	1821      	adds	r1, r4, r0
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf04      	itt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	bf04      	itt	eq
 8008c14:	1809      	addeq	r1, r1, r0
 8008c16:	6021      	streq	r1, [r4, #0]
 8008c18:	6054      	str	r4, [r2, #4]
 8008c1a:	e7ca      	b.n	8008bb2 <_free_r+0x22>
 8008c1c:	bd38      	pop	{r3, r4, r5, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000668 	.word	0x20000668

08008c24 <rshift>:
 8008c24:	6903      	ldr	r3, [r0, #16]
 8008c26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c32:	f100 0414 	add.w	r4, r0, #20
 8008c36:	dd45      	ble.n	8008cc4 <rshift+0xa0>
 8008c38:	f011 011f 	ands.w	r1, r1, #31
 8008c3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c44:	d10c      	bne.n	8008c60 <rshift+0x3c>
 8008c46:	f100 0710 	add.w	r7, r0, #16
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	42b1      	cmp	r1, r6
 8008c4e:	d334      	bcc.n	8008cba <rshift+0x96>
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	1eea      	subs	r2, r5, #3
 8008c56:	4296      	cmp	r6, r2
 8008c58:	bf38      	it	cc
 8008c5a:	2300      	movcc	r3, #0
 8008c5c:	4423      	add	r3, r4
 8008c5e:	e015      	b.n	8008c8c <rshift+0x68>
 8008c60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c64:	f1c1 0820 	rsb	r8, r1, #32
 8008c68:	40cf      	lsrs	r7, r1
 8008c6a:	f105 0e04 	add.w	lr, r5, #4
 8008c6e:	46a1      	mov	r9, r4
 8008c70:	4576      	cmp	r6, lr
 8008c72:	46f4      	mov	ip, lr
 8008c74:	d815      	bhi.n	8008ca2 <rshift+0x7e>
 8008c76:	1a9a      	subs	r2, r3, r2
 8008c78:	0092      	lsls	r2, r2, #2
 8008c7a:	3a04      	subs	r2, #4
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	42ae      	cmp	r6, r5
 8008c80:	bf38      	it	cc
 8008c82:	2200      	movcc	r2, #0
 8008c84:	18a3      	adds	r3, r4, r2
 8008c86:	50a7      	str	r7, [r4, r2]
 8008c88:	b107      	cbz	r7, 8008c8c <rshift+0x68>
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	1b1a      	subs	r2, r3, r4
 8008c8e:	42a3      	cmp	r3, r4
 8008c90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c94:	bf08      	it	eq
 8008c96:	2300      	moveq	r3, #0
 8008c98:	6102      	str	r2, [r0, #16]
 8008c9a:	bf08      	it	eq
 8008c9c:	6143      	streq	r3, [r0, #20]
 8008c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ca2:	f8dc c000 	ldr.w	ip, [ip]
 8008ca6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008caa:	ea4c 0707 	orr.w	r7, ip, r7
 8008cae:	f849 7b04 	str.w	r7, [r9], #4
 8008cb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cb6:	40cf      	lsrs	r7, r1
 8008cb8:	e7da      	b.n	8008c70 <rshift+0x4c>
 8008cba:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cbe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008cc2:	e7c3      	b.n	8008c4c <rshift+0x28>
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	e7e1      	b.n	8008c8c <rshift+0x68>

08008cc8 <__hexdig_fun>:
 8008cc8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008ccc:	2b09      	cmp	r3, #9
 8008cce:	d802      	bhi.n	8008cd6 <__hexdig_fun+0xe>
 8008cd0:	3820      	subs	r0, #32
 8008cd2:	b2c0      	uxtb	r0, r0
 8008cd4:	4770      	bx	lr
 8008cd6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	d801      	bhi.n	8008ce2 <__hexdig_fun+0x1a>
 8008cde:	3847      	subs	r0, #71	@ 0x47
 8008ce0:	e7f7      	b.n	8008cd2 <__hexdig_fun+0xa>
 8008ce2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	d801      	bhi.n	8008cee <__hexdig_fun+0x26>
 8008cea:	3827      	subs	r0, #39	@ 0x27
 8008cec:	e7f1      	b.n	8008cd2 <__hexdig_fun+0xa>
 8008cee:	2000      	movs	r0, #0
 8008cf0:	4770      	bx	lr
	...

08008cf4 <__gethex>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	468a      	mov	sl, r1
 8008cfc:	9302      	str	r3, [sp, #8]
 8008cfe:	680b      	ldr	r3, [r1, #0]
 8008d00:	9001      	str	r0, [sp, #4]
 8008d02:	4690      	mov	r8, r2
 8008d04:	1c9c      	adds	r4, r3, #2
 8008d06:	46a1      	mov	r9, r4
 8008d08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d0c:	2830      	cmp	r0, #48	@ 0x30
 8008d0e:	d0fa      	beq.n	8008d06 <__gethex+0x12>
 8008d10:	eba9 0303 	sub.w	r3, r9, r3
 8008d14:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d18:	f7ff ffd6 	bl	8008cc8 <__hexdig_fun>
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d168      	bne.n	8008df4 <__gethex+0x100>
 8008d22:	49a0      	ldr	r1, [pc, #640]	@ (8008fa4 <__gethex+0x2b0>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	4648      	mov	r0, r9
 8008d28:	f7fe ffb9 	bl	8007c9e <strncmp>
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d167      	bne.n	8008e02 <__gethex+0x10e>
 8008d32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008d36:	4626      	mov	r6, r4
 8008d38:	f7ff ffc6 	bl	8008cc8 <__hexdig_fun>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d062      	beq.n	8008e06 <__gethex+0x112>
 8008d40:	4623      	mov	r3, r4
 8008d42:	7818      	ldrb	r0, [r3, #0]
 8008d44:	2830      	cmp	r0, #48	@ 0x30
 8008d46:	4699      	mov	r9, r3
 8008d48:	f103 0301 	add.w	r3, r3, #1
 8008d4c:	d0f9      	beq.n	8008d42 <__gethex+0x4e>
 8008d4e:	f7ff ffbb 	bl	8008cc8 <__hexdig_fun>
 8008d52:	fab0 f580 	clz	r5, r0
 8008d56:	096d      	lsrs	r5, r5, #5
 8008d58:	f04f 0b01 	mov.w	fp, #1
 8008d5c:	464a      	mov	r2, r9
 8008d5e:	4616      	mov	r6, r2
 8008d60:	3201      	adds	r2, #1
 8008d62:	7830      	ldrb	r0, [r6, #0]
 8008d64:	f7ff ffb0 	bl	8008cc8 <__hexdig_fun>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d1f8      	bne.n	8008d5e <__gethex+0x6a>
 8008d6c:	498d      	ldr	r1, [pc, #564]	@ (8008fa4 <__gethex+0x2b0>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7fe ff94 	bl	8007c9e <strncmp>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d13f      	bne.n	8008dfa <__gethex+0x106>
 8008d7a:	b944      	cbnz	r4, 8008d8e <__gethex+0x9a>
 8008d7c:	1c74      	adds	r4, r6, #1
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4616      	mov	r6, r2
 8008d82:	3201      	adds	r2, #1
 8008d84:	7830      	ldrb	r0, [r6, #0]
 8008d86:	f7ff ff9f 	bl	8008cc8 <__hexdig_fun>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d1f8      	bne.n	8008d80 <__gethex+0x8c>
 8008d8e:	1ba4      	subs	r4, r4, r6
 8008d90:	00a7      	lsls	r7, r4, #2
 8008d92:	7833      	ldrb	r3, [r6, #0]
 8008d94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008d98:	2b50      	cmp	r3, #80	@ 0x50
 8008d9a:	d13e      	bne.n	8008e1a <__gethex+0x126>
 8008d9c:	7873      	ldrb	r3, [r6, #1]
 8008d9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008da0:	d033      	beq.n	8008e0a <__gethex+0x116>
 8008da2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008da4:	d034      	beq.n	8008e10 <__gethex+0x11c>
 8008da6:	1c71      	adds	r1, r6, #1
 8008da8:	2400      	movs	r4, #0
 8008daa:	7808      	ldrb	r0, [r1, #0]
 8008dac:	f7ff ff8c 	bl	8008cc8 <__hexdig_fun>
 8008db0:	1e43      	subs	r3, r0, #1
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b18      	cmp	r3, #24
 8008db6:	d830      	bhi.n	8008e1a <__gethex+0x126>
 8008db8:	f1a0 0210 	sub.w	r2, r0, #16
 8008dbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008dc0:	f7ff ff82 	bl	8008cc8 <__hexdig_fun>
 8008dc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008dc8:	fa5f fc8c 	uxtb.w	ip, ip
 8008dcc:	f1bc 0f18 	cmp.w	ip, #24
 8008dd0:	f04f 030a 	mov.w	r3, #10
 8008dd4:	d91e      	bls.n	8008e14 <__gethex+0x120>
 8008dd6:	b104      	cbz	r4, 8008dda <__gethex+0xe6>
 8008dd8:	4252      	negs	r2, r2
 8008dda:	4417      	add	r7, r2
 8008ddc:	f8ca 1000 	str.w	r1, [sl]
 8008de0:	b1ed      	cbz	r5, 8008e1e <__gethex+0x12a>
 8008de2:	f1bb 0f00 	cmp.w	fp, #0
 8008de6:	bf0c      	ite	eq
 8008de8:	2506      	moveq	r5, #6
 8008dea:	2500      	movne	r5, #0
 8008dec:	4628      	mov	r0, r5
 8008dee:	b005      	add	sp, #20
 8008df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df4:	2500      	movs	r5, #0
 8008df6:	462c      	mov	r4, r5
 8008df8:	e7b0      	b.n	8008d5c <__gethex+0x68>
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	d1c7      	bne.n	8008d8e <__gethex+0x9a>
 8008dfe:	4627      	mov	r7, r4
 8008e00:	e7c7      	b.n	8008d92 <__gethex+0x9e>
 8008e02:	464e      	mov	r6, r9
 8008e04:	462f      	mov	r7, r5
 8008e06:	2501      	movs	r5, #1
 8008e08:	e7c3      	b.n	8008d92 <__gethex+0x9e>
 8008e0a:	2400      	movs	r4, #0
 8008e0c:	1cb1      	adds	r1, r6, #2
 8008e0e:	e7cc      	b.n	8008daa <__gethex+0xb6>
 8008e10:	2401      	movs	r4, #1
 8008e12:	e7fb      	b.n	8008e0c <__gethex+0x118>
 8008e14:	fb03 0002 	mla	r0, r3, r2, r0
 8008e18:	e7ce      	b.n	8008db8 <__gethex+0xc4>
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	e7de      	b.n	8008ddc <__gethex+0xe8>
 8008e1e:	eba6 0309 	sub.w	r3, r6, r9
 8008e22:	3b01      	subs	r3, #1
 8008e24:	4629      	mov	r1, r5
 8008e26:	2b07      	cmp	r3, #7
 8008e28:	dc0a      	bgt.n	8008e40 <__gethex+0x14c>
 8008e2a:	9801      	ldr	r0, [sp, #4]
 8008e2c:	f000 fafc 	bl	8009428 <_Balloc>
 8008e30:	4604      	mov	r4, r0
 8008e32:	b940      	cbnz	r0, 8008e46 <__gethex+0x152>
 8008e34:	4b5c      	ldr	r3, [pc, #368]	@ (8008fa8 <__gethex+0x2b4>)
 8008e36:	4602      	mov	r2, r0
 8008e38:	21e4      	movs	r1, #228	@ 0xe4
 8008e3a:	485c      	ldr	r0, [pc, #368]	@ (8008fac <__gethex+0x2b8>)
 8008e3c:	f7ff f832 	bl	8007ea4 <__assert_func>
 8008e40:	3101      	adds	r1, #1
 8008e42:	105b      	asrs	r3, r3, #1
 8008e44:	e7ef      	b.n	8008e26 <__gethex+0x132>
 8008e46:	f100 0a14 	add.w	sl, r0, #20
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4655      	mov	r5, sl
 8008e4e:	469b      	mov	fp, r3
 8008e50:	45b1      	cmp	r9, r6
 8008e52:	d337      	bcc.n	8008ec4 <__gethex+0x1d0>
 8008e54:	f845 bb04 	str.w	fp, [r5], #4
 8008e58:	eba5 050a 	sub.w	r5, r5, sl
 8008e5c:	10ad      	asrs	r5, r5, #2
 8008e5e:	6125      	str	r5, [r4, #16]
 8008e60:	4658      	mov	r0, fp
 8008e62:	f000 fbd3 	bl	800960c <__hi0bits>
 8008e66:	016d      	lsls	r5, r5, #5
 8008e68:	f8d8 6000 	ldr.w	r6, [r8]
 8008e6c:	1a2d      	subs	r5, r5, r0
 8008e6e:	42b5      	cmp	r5, r6
 8008e70:	dd54      	ble.n	8008f1c <__gethex+0x228>
 8008e72:	1bad      	subs	r5, r5, r6
 8008e74:	4629      	mov	r1, r5
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 ff5f 	bl	8009d3a <__any_on>
 8008e7c:	4681      	mov	r9, r0
 8008e7e:	b178      	cbz	r0, 8008ea0 <__gethex+0x1ac>
 8008e80:	1e6b      	subs	r3, r5, #1
 8008e82:	1159      	asrs	r1, r3, #5
 8008e84:	f003 021f 	and.w	r2, r3, #31
 8008e88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e8c:	f04f 0901 	mov.w	r9, #1
 8008e90:	fa09 f202 	lsl.w	r2, r9, r2
 8008e94:	420a      	tst	r2, r1
 8008e96:	d003      	beq.n	8008ea0 <__gethex+0x1ac>
 8008e98:	454b      	cmp	r3, r9
 8008e9a:	dc36      	bgt.n	8008f0a <__gethex+0x216>
 8008e9c:	f04f 0902 	mov.w	r9, #2
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f7ff febe 	bl	8008c24 <rshift>
 8008ea8:	442f      	add	r7, r5
 8008eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008eae:	42bb      	cmp	r3, r7
 8008eb0:	da42      	bge.n	8008f38 <__gethex+0x244>
 8008eb2:	9801      	ldr	r0, [sp, #4]
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f000 faf7 	bl	80094a8 <_Bfree>
 8008eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	25a3      	movs	r5, #163	@ 0xa3
 8008ec2:	e793      	b.n	8008dec <__gethex+0xf8>
 8008ec4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ec8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008eca:	d012      	beq.n	8008ef2 <__gethex+0x1fe>
 8008ecc:	2b20      	cmp	r3, #32
 8008ece:	d104      	bne.n	8008eda <__gethex+0x1e6>
 8008ed0:	f845 bb04 	str.w	fp, [r5], #4
 8008ed4:	f04f 0b00 	mov.w	fp, #0
 8008ed8:	465b      	mov	r3, fp
 8008eda:	7830      	ldrb	r0, [r6, #0]
 8008edc:	9303      	str	r3, [sp, #12]
 8008ede:	f7ff fef3 	bl	8008cc8 <__hexdig_fun>
 8008ee2:	9b03      	ldr	r3, [sp, #12]
 8008ee4:	f000 000f 	and.w	r0, r0, #15
 8008ee8:	4098      	lsls	r0, r3
 8008eea:	ea4b 0b00 	orr.w	fp, fp, r0
 8008eee:	3304      	adds	r3, #4
 8008ef0:	e7ae      	b.n	8008e50 <__gethex+0x15c>
 8008ef2:	45b1      	cmp	r9, r6
 8008ef4:	d8ea      	bhi.n	8008ecc <__gethex+0x1d8>
 8008ef6:	492b      	ldr	r1, [pc, #172]	@ (8008fa4 <__gethex+0x2b0>)
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	2201      	movs	r2, #1
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7fe fece 	bl	8007c9e <strncmp>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d1e1      	bne.n	8008ecc <__gethex+0x1d8>
 8008f08:	e7a2      	b.n	8008e50 <__gethex+0x15c>
 8008f0a:	1ea9      	subs	r1, r5, #2
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 ff14 	bl	8009d3a <__any_on>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d0c2      	beq.n	8008e9c <__gethex+0x1a8>
 8008f16:	f04f 0903 	mov.w	r9, #3
 8008f1a:	e7c1      	b.n	8008ea0 <__gethex+0x1ac>
 8008f1c:	da09      	bge.n	8008f32 <__gethex+0x23e>
 8008f1e:	1b75      	subs	r5, r6, r5
 8008f20:	4621      	mov	r1, r4
 8008f22:	9801      	ldr	r0, [sp, #4]
 8008f24:	462a      	mov	r2, r5
 8008f26:	f000 fccf 	bl	80098c8 <__lshift>
 8008f2a:	1b7f      	subs	r7, r7, r5
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	f100 0a14 	add.w	sl, r0, #20
 8008f32:	f04f 0900 	mov.w	r9, #0
 8008f36:	e7b8      	b.n	8008eaa <__gethex+0x1b6>
 8008f38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f3c:	42bd      	cmp	r5, r7
 8008f3e:	dd6f      	ble.n	8009020 <__gethex+0x32c>
 8008f40:	1bed      	subs	r5, r5, r7
 8008f42:	42ae      	cmp	r6, r5
 8008f44:	dc34      	bgt.n	8008fb0 <__gethex+0x2bc>
 8008f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d022      	beq.n	8008f94 <__gethex+0x2a0>
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d024      	beq.n	8008f9c <__gethex+0x2a8>
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d115      	bne.n	8008f82 <__gethex+0x28e>
 8008f56:	42ae      	cmp	r6, r5
 8008f58:	d113      	bne.n	8008f82 <__gethex+0x28e>
 8008f5a:	2e01      	cmp	r6, #1
 8008f5c:	d10b      	bne.n	8008f76 <__gethex+0x282>
 8008f5e:	9a02      	ldr	r2, [sp, #8]
 8008f60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	2301      	movs	r3, #1
 8008f68:	6123      	str	r3, [r4, #16]
 8008f6a:	f8ca 3000 	str.w	r3, [sl]
 8008f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f70:	2562      	movs	r5, #98	@ 0x62
 8008f72:	601c      	str	r4, [r3, #0]
 8008f74:	e73a      	b.n	8008dec <__gethex+0xf8>
 8008f76:	1e71      	subs	r1, r6, #1
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fede 	bl	8009d3a <__any_on>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d1ed      	bne.n	8008f5e <__gethex+0x26a>
 8008f82:	9801      	ldr	r0, [sp, #4]
 8008f84:	4621      	mov	r1, r4
 8008f86:	f000 fa8f 	bl	80094a8 <_Bfree>
 8008f8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	2550      	movs	r5, #80	@ 0x50
 8008f92:	e72b      	b.n	8008dec <__gethex+0xf8>
 8008f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f3      	bne.n	8008f82 <__gethex+0x28e>
 8008f9a:	e7e0      	b.n	8008f5e <__gethex+0x26a>
 8008f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1dd      	bne.n	8008f5e <__gethex+0x26a>
 8008fa2:	e7ee      	b.n	8008f82 <__gethex+0x28e>
 8008fa4:	0800aa08 	.word	0x0800aa08
 8008fa8:	0800ab5d 	.word	0x0800ab5d
 8008fac:	0800ab6e 	.word	0x0800ab6e
 8008fb0:	1e6f      	subs	r7, r5, #1
 8008fb2:	f1b9 0f00 	cmp.w	r9, #0
 8008fb6:	d130      	bne.n	800901a <__gethex+0x326>
 8008fb8:	b127      	cbz	r7, 8008fc4 <__gethex+0x2d0>
 8008fba:	4639      	mov	r1, r7
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 febc 	bl	8009d3a <__any_on>
 8008fc2:	4681      	mov	r9, r0
 8008fc4:	117a      	asrs	r2, r7, #5
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008fcc:	f007 071f 	and.w	r7, r7, #31
 8008fd0:	40bb      	lsls	r3, r7
 8008fd2:	4213      	tst	r3, r2
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	bf18      	it	ne
 8008fda:	f049 0902 	orrne.w	r9, r9, #2
 8008fde:	f7ff fe21 	bl	8008c24 <rshift>
 8008fe2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008fe6:	1b76      	subs	r6, r6, r5
 8008fe8:	2502      	movs	r5, #2
 8008fea:	f1b9 0f00 	cmp.w	r9, #0
 8008fee:	d047      	beq.n	8009080 <__gethex+0x38c>
 8008ff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d015      	beq.n	8009024 <__gethex+0x330>
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d017      	beq.n	800902c <__gethex+0x338>
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d109      	bne.n	8009014 <__gethex+0x320>
 8009000:	f019 0f02 	tst.w	r9, #2
 8009004:	d006      	beq.n	8009014 <__gethex+0x320>
 8009006:	f8da 3000 	ldr.w	r3, [sl]
 800900a:	ea49 0903 	orr.w	r9, r9, r3
 800900e:	f019 0f01 	tst.w	r9, #1
 8009012:	d10e      	bne.n	8009032 <__gethex+0x33e>
 8009014:	f045 0510 	orr.w	r5, r5, #16
 8009018:	e032      	b.n	8009080 <__gethex+0x38c>
 800901a:	f04f 0901 	mov.w	r9, #1
 800901e:	e7d1      	b.n	8008fc4 <__gethex+0x2d0>
 8009020:	2501      	movs	r5, #1
 8009022:	e7e2      	b.n	8008fea <__gethex+0x2f6>
 8009024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009026:	f1c3 0301 	rsb	r3, r3, #1
 800902a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800902c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0f0      	beq.n	8009014 <__gethex+0x320>
 8009032:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009036:	f104 0314 	add.w	r3, r4, #20
 800903a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800903e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009042:	f04f 0c00 	mov.w	ip, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f853 2b04 	ldr.w	r2, [r3], #4
 800904c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009050:	d01b      	beq.n	800908a <__gethex+0x396>
 8009052:	3201      	adds	r2, #1
 8009054:	6002      	str	r2, [r0, #0]
 8009056:	2d02      	cmp	r5, #2
 8009058:	f104 0314 	add.w	r3, r4, #20
 800905c:	d13c      	bne.n	80090d8 <__gethex+0x3e4>
 800905e:	f8d8 2000 	ldr.w	r2, [r8]
 8009062:	3a01      	subs	r2, #1
 8009064:	42b2      	cmp	r2, r6
 8009066:	d109      	bne.n	800907c <__gethex+0x388>
 8009068:	1171      	asrs	r1, r6, #5
 800906a:	2201      	movs	r2, #1
 800906c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009070:	f006 061f 	and.w	r6, r6, #31
 8009074:	fa02 f606 	lsl.w	r6, r2, r6
 8009078:	421e      	tst	r6, r3
 800907a:	d13a      	bne.n	80090f2 <__gethex+0x3fe>
 800907c:	f045 0520 	orr.w	r5, r5, #32
 8009080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009082:	601c      	str	r4, [r3, #0]
 8009084:	9b02      	ldr	r3, [sp, #8]
 8009086:	601f      	str	r7, [r3, #0]
 8009088:	e6b0      	b.n	8008dec <__gethex+0xf8>
 800908a:	4299      	cmp	r1, r3
 800908c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009090:	d8d9      	bhi.n	8009046 <__gethex+0x352>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	459b      	cmp	fp, r3
 8009096:	db17      	blt.n	80090c8 <__gethex+0x3d4>
 8009098:	6861      	ldr	r1, [r4, #4]
 800909a:	9801      	ldr	r0, [sp, #4]
 800909c:	3101      	adds	r1, #1
 800909e:	f000 f9c3 	bl	8009428 <_Balloc>
 80090a2:	4681      	mov	r9, r0
 80090a4:	b918      	cbnz	r0, 80090ae <__gethex+0x3ba>
 80090a6:	4b1a      	ldr	r3, [pc, #104]	@ (8009110 <__gethex+0x41c>)
 80090a8:	4602      	mov	r2, r0
 80090aa:	2184      	movs	r1, #132	@ 0x84
 80090ac:	e6c5      	b.n	8008e3a <__gethex+0x146>
 80090ae:	6922      	ldr	r2, [r4, #16]
 80090b0:	3202      	adds	r2, #2
 80090b2:	f104 010c 	add.w	r1, r4, #12
 80090b6:	0092      	lsls	r2, r2, #2
 80090b8:	300c      	adds	r0, #12
 80090ba:	f7fe fed6 	bl	8007e6a <memcpy>
 80090be:	4621      	mov	r1, r4
 80090c0:	9801      	ldr	r0, [sp, #4]
 80090c2:	f000 f9f1 	bl	80094a8 <_Bfree>
 80090c6:	464c      	mov	r4, r9
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090d0:	6122      	str	r2, [r4, #16]
 80090d2:	2201      	movs	r2, #1
 80090d4:	615a      	str	r2, [r3, #20]
 80090d6:	e7be      	b.n	8009056 <__gethex+0x362>
 80090d8:	6922      	ldr	r2, [r4, #16]
 80090da:	455a      	cmp	r2, fp
 80090dc:	dd0b      	ble.n	80090f6 <__gethex+0x402>
 80090de:	2101      	movs	r1, #1
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff fd9f 	bl	8008c24 <rshift>
 80090e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ea:	3701      	adds	r7, #1
 80090ec:	42bb      	cmp	r3, r7
 80090ee:	f6ff aee0 	blt.w	8008eb2 <__gethex+0x1be>
 80090f2:	2501      	movs	r5, #1
 80090f4:	e7c2      	b.n	800907c <__gethex+0x388>
 80090f6:	f016 061f 	ands.w	r6, r6, #31
 80090fa:	d0fa      	beq.n	80090f2 <__gethex+0x3fe>
 80090fc:	4453      	add	r3, sl
 80090fe:	f1c6 0620 	rsb	r6, r6, #32
 8009102:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009106:	f000 fa81 	bl	800960c <__hi0bits>
 800910a:	42b0      	cmp	r0, r6
 800910c:	dbe7      	blt.n	80090de <__gethex+0x3ea>
 800910e:	e7f0      	b.n	80090f2 <__gethex+0x3fe>
 8009110:	0800ab5d 	.word	0x0800ab5d

08009114 <L_shift>:
 8009114:	f1c2 0208 	rsb	r2, r2, #8
 8009118:	0092      	lsls	r2, r2, #2
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	f1c2 0620 	rsb	r6, r2, #32
 8009120:	6843      	ldr	r3, [r0, #4]
 8009122:	6804      	ldr	r4, [r0, #0]
 8009124:	fa03 f506 	lsl.w	r5, r3, r6
 8009128:	432c      	orrs	r4, r5
 800912a:	40d3      	lsrs	r3, r2
 800912c:	6004      	str	r4, [r0, #0]
 800912e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009132:	4288      	cmp	r0, r1
 8009134:	d3f4      	bcc.n	8009120 <L_shift+0xc>
 8009136:	bd70      	pop	{r4, r5, r6, pc}

08009138 <__match>:
 8009138:	b530      	push	{r4, r5, lr}
 800913a:	6803      	ldr	r3, [r0, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009142:	b914      	cbnz	r4, 800914a <__match+0x12>
 8009144:	6003      	str	r3, [r0, #0]
 8009146:	2001      	movs	r0, #1
 8009148:	bd30      	pop	{r4, r5, pc}
 800914a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800914e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009152:	2d19      	cmp	r5, #25
 8009154:	bf98      	it	ls
 8009156:	3220      	addls	r2, #32
 8009158:	42a2      	cmp	r2, r4
 800915a:	d0f0      	beq.n	800913e <__match+0x6>
 800915c:	2000      	movs	r0, #0
 800915e:	e7f3      	b.n	8009148 <__match+0x10>

08009160 <__hexnan>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	680b      	ldr	r3, [r1, #0]
 8009166:	6801      	ldr	r1, [r0, #0]
 8009168:	115e      	asrs	r6, r3, #5
 800916a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800916e:	f013 031f 	ands.w	r3, r3, #31
 8009172:	b087      	sub	sp, #28
 8009174:	bf18      	it	ne
 8009176:	3604      	addne	r6, #4
 8009178:	2500      	movs	r5, #0
 800917a:	1f37      	subs	r7, r6, #4
 800917c:	4682      	mov	sl, r0
 800917e:	4690      	mov	r8, r2
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	f846 5c04 	str.w	r5, [r6, #-4]
 8009186:	46b9      	mov	r9, r7
 8009188:	463c      	mov	r4, r7
 800918a:	9502      	str	r5, [sp, #8]
 800918c:	46ab      	mov	fp, r5
 800918e:	784a      	ldrb	r2, [r1, #1]
 8009190:	1c4b      	adds	r3, r1, #1
 8009192:	9303      	str	r3, [sp, #12]
 8009194:	b342      	cbz	r2, 80091e8 <__hexnan+0x88>
 8009196:	4610      	mov	r0, r2
 8009198:	9105      	str	r1, [sp, #20]
 800919a:	9204      	str	r2, [sp, #16]
 800919c:	f7ff fd94 	bl	8008cc8 <__hexdig_fun>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d151      	bne.n	8009248 <__hexnan+0xe8>
 80091a4:	9a04      	ldr	r2, [sp, #16]
 80091a6:	9905      	ldr	r1, [sp, #20]
 80091a8:	2a20      	cmp	r2, #32
 80091aa:	d818      	bhi.n	80091de <__hexnan+0x7e>
 80091ac:	9b02      	ldr	r3, [sp, #8]
 80091ae:	459b      	cmp	fp, r3
 80091b0:	dd13      	ble.n	80091da <__hexnan+0x7a>
 80091b2:	454c      	cmp	r4, r9
 80091b4:	d206      	bcs.n	80091c4 <__hexnan+0x64>
 80091b6:	2d07      	cmp	r5, #7
 80091b8:	dc04      	bgt.n	80091c4 <__hexnan+0x64>
 80091ba:	462a      	mov	r2, r5
 80091bc:	4649      	mov	r1, r9
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff ffa8 	bl	8009114 <L_shift>
 80091c4:	4544      	cmp	r4, r8
 80091c6:	d952      	bls.n	800926e <__hexnan+0x10e>
 80091c8:	2300      	movs	r3, #0
 80091ca:	f1a4 0904 	sub.w	r9, r4, #4
 80091ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80091d2:	f8cd b008 	str.w	fp, [sp, #8]
 80091d6:	464c      	mov	r4, r9
 80091d8:	461d      	mov	r5, r3
 80091da:	9903      	ldr	r1, [sp, #12]
 80091dc:	e7d7      	b.n	800918e <__hexnan+0x2e>
 80091de:	2a29      	cmp	r2, #41	@ 0x29
 80091e0:	d157      	bne.n	8009292 <__hexnan+0x132>
 80091e2:	3102      	adds	r1, #2
 80091e4:	f8ca 1000 	str.w	r1, [sl]
 80091e8:	f1bb 0f00 	cmp.w	fp, #0
 80091ec:	d051      	beq.n	8009292 <__hexnan+0x132>
 80091ee:	454c      	cmp	r4, r9
 80091f0:	d206      	bcs.n	8009200 <__hexnan+0xa0>
 80091f2:	2d07      	cmp	r5, #7
 80091f4:	dc04      	bgt.n	8009200 <__hexnan+0xa0>
 80091f6:	462a      	mov	r2, r5
 80091f8:	4649      	mov	r1, r9
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff ff8a 	bl	8009114 <L_shift>
 8009200:	4544      	cmp	r4, r8
 8009202:	d936      	bls.n	8009272 <__hexnan+0x112>
 8009204:	f1a8 0204 	sub.w	r2, r8, #4
 8009208:	4623      	mov	r3, r4
 800920a:	f853 1b04 	ldr.w	r1, [r3], #4
 800920e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009212:	429f      	cmp	r7, r3
 8009214:	d2f9      	bcs.n	800920a <__hexnan+0xaa>
 8009216:	1b3b      	subs	r3, r7, r4
 8009218:	f023 0303 	bic.w	r3, r3, #3
 800921c:	3304      	adds	r3, #4
 800921e:	3401      	adds	r4, #1
 8009220:	3e03      	subs	r6, #3
 8009222:	42b4      	cmp	r4, r6
 8009224:	bf88      	it	hi
 8009226:	2304      	movhi	r3, #4
 8009228:	4443      	add	r3, r8
 800922a:	2200      	movs	r2, #0
 800922c:	f843 2b04 	str.w	r2, [r3], #4
 8009230:	429f      	cmp	r7, r3
 8009232:	d2fb      	bcs.n	800922c <__hexnan+0xcc>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	b91b      	cbnz	r3, 8009240 <__hexnan+0xe0>
 8009238:	4547      	cmp	r7, r8
 800923a:	d128      	bne.n	800928e <__hexnan+0x12e>
 800923c:	2301      	movs	r3, #1
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	2005      	movs	r0, #5
 8009242:	b007      	add	sp, #28
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	3501      	adds	r5, #1
 800924a:	2d08      	cmp	r5, #8
 800924c:	f10b 0b01 	add.w	fp, fp, #1
 8009250:	dd06      	ble.n	8009260 <__hexnan+0x100>
 8009252:	4544      	cmp	r4, r8
 8009254:	d9c1      	bls.n	80091da <__hexnan+0x7a>
 8009256:	2300      	movs	r3, #0
 8009258:	f844 3c04 	str.w	r3, [r4, #-4]
 800925c:	2501      	movs	r5, #1
 800925e:	3c04      	subs	r4, #4
 8009260:	6822      	ldr	r2, [r4, #0]
 8009262:	f000 000f 	and.w	r0, r0, #15
 8009266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800926a:	6020      	str	r0, [r4, #0]
 800926c:	e7b5      	b.n	80091da <__hexnan+0x7a>
 800926e:	2508      	movs	r5, #8
 8009270:	e7b3      	b.n	80091da <__hexnan+0x7a>
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0dd      	beq.n	8009234 <__hexnan+0xd4>
 8009278:	f1c3 0320 	rsb	r3, r3, #32
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	40da      	lsrs	r2, r3
 8009282:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009286:	4013      	ands	r3, r2
 8009288:	f846 3c04 	str.w	r3, [r6, #-4]
 800928c:	e7d2      	b.n	8009234 <__hexnan+0xd4>
 800928e:	3f04      	subs	r7, #4
 8009290:	e7d0      	b.n	8009234 <__hexnan+0xd4>
 8009292:	2004      	movs	r0, #4
 8009294:	e7d5      	b.n	8009242 <__hexnan+0xe2>
	...

08009298 <malloc>:
 8009298:	4b02      	ldr	r3, [pc, #8]	@ (80092a4 <malloc+0xc>)
 800929a:	4601      	mov	r1, r0
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f000 b825 	b.w	80092ec <_malloc_r>
 80092a2:	bf00      	nop
 80092a4:	20000188 	.word	0x20000188

080092a8 <sbrk_aligned>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	4e0f      	ldr	r6, [pc, #60]	@ (80092e8 <sbrk_aligned+0x40>)
 80092ac:	460c      	mov	r4, r1
 80092ae:	6831      	ldr	r1, [r6, #0]
 80092b0:	4605      	mov	r5, r0
 80092b2:	b911      	cbnz	r1, 80092ba <sbrk_aligned+0x12>
 80092b4:	f001 fa24 	bl	800a700 <_sbrk_r>
 80092b8:	6030      	str	r0, [r6, #0]
 80092ba:	4621      	mov	r1, r4
 80092bc:	4628      	mov	r0, r5
 80092be:	f001 fa1f 	bl	800a700 <_sbrk_r>
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	d103      	bne.n	80092ce <sbrk_aligned+0x26>
 80092c6:	f04f 34ff 	mov.w	r4, #4294967295
 80092ca:	4620      	mov	r0, r4
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
 80092ce:	1cc4      	adds	r4, r0, #3
 80092d0:	f024 0403 	bic.w	r4, r4, #3
 80092d4:	42a0      	cmp	r0, r4
 80092d6:	d0f8      	beq.n	80092ca <sbrk_aligned+0x22>
 80092d8:	1a21      	subs	r1, r4, r0
 80092da:	4628      	mov	r0, r5
 80092dc:	f001 fa10 	bl	800a700 <_sbrk_r>
 80092e0:	3001      	adds	r0, #1
 80092e2:	d1f2      	bne.n	80092ca <sbrk_aligned+0x22>
 80092e4:	e7ef      	b.n	80092c6 <sbrk_aligned+0x1e>
 80092e6:	bf00      	nop
 80092e8:	20000664 	.word	0x20000664

080092ec <_malloc_r>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	1ccd      	adds	r5, r1, #3
 80092f2:	f025 0503 	bic.w	r5, r5, #3
 80092f6:	3508      	adds	r5, #8
 80092f8:	2d0c      	cmp	r5, #12
 80092fa:	bf38      	it	cc
 80092fc:	250c      	movcc	r5, #12
 80092fe:	2d00      	cmp	r5, #0
 8009300:	4606      	mov	r6, r0
 8009302:	db01      	blt.n	8009308 <_malloc_r+0x1c>
 8009304:	42a9      	cmp	r1, r5
 8009306:	d904      	bls.n	8009312 <_malloc_r+0x26>
 8009308:	230c      	movs	r3, #12
 800930a:	6033      	str	r3, [r6, #0]
 800930c:	2000      	movs	r0, #0
 800930e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009312:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093e8 <_malloc_r+0xfc>
 8009316:	f000 f87b 	bl	8009410 <__malloc_lock>
 800931a:	f8d8 3000 	ldr.w	r3, [r8]
 800931e:	461c      	mov	r4, r3
 8009320:	bb44      	cbnz	r4, 8009374 <_malloc_r+0x88>
 8009322:	4629      	mov	r1, r5
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff ffbf 	bl	80092a8 <sbrk_aligned>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	4604      	mov	r4, r0
 800932e:	d158      	bne.n	80093e2 <_malloc_r+0xf6>
 8009330:	f8d8 4000 	ldr.w	r4, [r8]
 8009334:	4627      	mov	r7, r4
 8009336:	2f00      	cmp	r7, #0
 8009338:	d143      	bne.n	80093c2 <_malloc_r+0xd6>
 800933a:	2c00      	cmp	r4, #0
 800933c:	d04b      	beq.n	80093d6 <_malloc_r+0xea>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	4639      	mov	r1, r7
 8009342:	4630      	mov	r0, r6
 8009344:	eb04 0903 	add.w	r9, r4, r3
 8009348:	f001 f9da 	bl	800a700 <_sbrk_r>
 800934c:	4581      	cmp	r9, r0
 800934e:	d142      	bne.n	80093d6 <_malloc_r+0xea>
 8009350:	6821      	ldr	r1, [r4, #0]
 8009352:	1a6d      	subs	r5, r5, r1
 8009354:	4629      	mov	r1, r5
 8009356:	4630      	mov	r0, r6
 8009358:	f7ff ffa6 	bl	80092a8 <sbrk_aligned>
 800935c:	3001      	adds	r0, #1
 800935e:	d03a      	beq.n	80093d6 <_malloc_r+0xea>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	442b      	add	r3, r5
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	f8d8 3000 	ldr.w	r3, [r8]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	bb62      	cbnz	r2, 80093c8 <_malloc_r+0xdc>
 800936e:	f8c8 7000 	str.w	r7, [r8]
 8009372:	e00f      	b.n	8009394 <_malloc_r+0xa8>
 8009374:	6822      	ldr	r2, [r4, #0]
 8009376:	1b52      	subs	r2, r2, r5
 8009378:	d420      	bmi.n	80093bc <_malloc_r+0xd0>
 800937a:	2a0b      	cmp	r2, #11
 800937c:	d917      	bls.n	80093ae <_malloc_r+0xc2>
 800937e:	1961      	adds	r1, r4, r5
 8009380:	42a3      	cmp	r3, r4
 8009382:	6025      	str	r5, [r4, #0]
 8009384:	bf18      	it	ne
 8009386:	6059      	strne	r1, [r3, #4]
 8009388:	6863      	ldr	r3, [r4, #4]
 800938a:	bf08      	it	eq
 800938c:	f8c8 1000 	streq.w	r1, [r8]
 8009390:	5162      	str	r2, [r4, r5]
 8009392:	604b      	str	r3, [r1, #4]
 8009394:	4630      	mov	r0, r6
 8009396:	f000 f841 	bl	800941c <__malloc_unlock>
 800939a:	f104 000b 	add.w	r0, r4, #11
 800939e:	1d23      	adds	r3, r4, #4
 80093a0:	f020 0007 	bic.w	r0, r0, #7
 80093a4:	1ac2      	subs	r2, r0, r3
 80093a6:	bf1c      	itt	ne
 80093a8:	1a1b      	subne	r3, r3, r0
 80093aa:	50a3      	strne	r3, [r4, r2]
 80093ac:	e7af      	b.n	800930e <_malloc_r+0x22>
 80093ae:	6862      	ldr	r2, [r4, #4]
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	bf0c      	ite	eq
 80093b4:	f8c8 2000 	streq.w	r2, [r8]
 80093b8:	605a      	strne	r2, [r3, #4]
 80093ba:	e7eb      	b.n	8009394 <_malloc_r+0xa8>
 80093bc:	4623      	mov	r3, r4
 80093be:	6864      	ldr	r4, [r4, #4]
 80093c0:	e7ae      	b.n	8009320 <_malloc_r+0x34>
 80093c2:	463c      	mov	r4, r7
 80093c4:	687f      	ldr	r7, [r7, #4]
 80093c6:	e7b6      	b.n	8009336 <_malloc_r+0x4a>
 80093c8:	461a      	mov	r2, r3
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	d1fb      	bne.n	80093c8 <_malloc_r+0xdc>
 80093d0:	2300      	movs	r3, #0
 80093d2:	6053      	str	r3, [r2, #4]
 80093d4:	e7de      	b.n	8009394 <_malloc_r+0xa8>
 80093d6:	230c      	movs	r3, #12
 80093d8:	6033      	str	r3, [r6, #0]
 80093da:	4630      	mov	r0, r6
 80093dc:	f000 f81e 	bl	800941c <__malloc_unlock>
 80093e0:	e794      	b.n	800930c <_malloc_r+0x20>
 80093e2:	6005      	str	r5, [r0, #0]
 80093e4:	e7d6      	b.n	8009394 <_malloc_r+0xa8>
 80093e6:	bf00      	nop
 80093e8:	20000668 	.word	0x20000668

080093ec <__ascii_mbtowc>:
 80093ec:	b082      	sub	sp, #8
 80093ee:	b901      	cbnz	r1, 80093f2 <__ascii_mbtowc+0x6>
 80093f0:	a901      	add	r1, sp, #4
 80093f2:	b142      	cbz	r2, 8009406 <__ascii_mbtowc+0x1a>
 80093f4:	b14b      	cbz	r3, 800940a <__ascii_mbtowc+0x1e>
 80093f6:	7813      	ldrb	r3, [r2, #0]
 80093f8:	600b      	str	r3, [r1, #0]
 80093fa:	7812      	ldrb	r2, [r2, #0]
 80093fc:	1e10      	subs	r0, r2, #0
 80093fe:	bf18      	it	ne
 8009400:	2001      	movne	r0, #1
 8009402:	b002      	add	sp, #8
 8009404:	4770      	bx	lr
 8009406:	4610      	mov	r0, r2
 8009408:	e7fb      	b.n	8009402 <__ascii_mbtowc+0x16>
 800940a:	f06f 0001 	mvn.w	r0, #1
 800940e:	e7f8      	b.n	8009402 <__ascii_mbtowc+0x16>

08009410 <__malloc_lock>:
 8009410:	4801      	ldr	r0, [pc, #4]	@ (8009418 <__malloc_lock+0x8>)
 8009412:	f7fe bd28 	b.w	8007e66 <__retarget_lock_acquire_recursive>
 8009416:	bf00      	nop
 8009418:	20000660 	.word	0x20000660

0800941c <__malloc_unlock>:
 800941c:	4801      	ldr	r0, [pc, #4]	@ (8009424 <__malloc_unlock+0x8>)
 800941e:	f7fe bd23 	b.w	8007e68 <__retarget_lock_release_recursive>
 8009422:	bf00      	nop
 8009424:	20000660 	.word	0x20000660

08009428 <_Balloc>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	69c6      	ldr	r6, [r0, #28]
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	b976      	cbnz	r6, 8009450 <_Balloc+0x28>
 8009432:	2010      	movs	r0, #16
 8009434:	f7ff ff30 	bl	8009298 <malloc>
 8009438:	4602      	mov	r2, r0
 800943a:	61e0      	str	r0, [r4, #28]
 800943c:	b920      	cbnz	r0, 8009448 <_Balloc+0x20>
 800943e:	4b18      	ldr	r3, [pc, #96]	@ (80094a0 <_Balloc+0x78>)
 8009440:	4818      	ldr	r0, [pc, #96]	@ (80094a4 <_Balloc+0x7c>)
 8009442:	216b      	movs	r1, #107	@ 0x6b
 8009444:	f7fe fd2e 	bl	8007ea4 <__assert_func>
 8009448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800944c:	6006      	str	r6, [r0, #0]
 800944e:	60c6      	str	r6, [r0, #12]
 8009450:	69e6      	ldr	r6, [r4, #28]
 8009452:	68f3      	ldr	r3, [r6, #12]
 8009454:	b183      	cbz	r3, 8009478 <_Balloc+0x50>
 8009456:	69e3      	ldr	r3, [r4, #28]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800945e:	b9b8      	cbnz	r0, 8009490 <_Balloc+0x68>
 8009460:	2101      	movs	r1, #1
 8009462:	fa01 f605 	lsl.w	r6, r1, r5
 8009466:	1d72      	adds	r2, r6, #5
 8009468:	0092      	lsls	r2, r2, #2
 800946a:	4620      	mov	r0, r4
 800946c:	f001 f95f 	bl	800a72e <_calloc_r>
 8009470:	b160      	cbz	r0, 800948c <_Balloc+0x64>
 8009472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009476:	e00e      	b.n	8009496 <_Balloc+0x6e>
 8009478:	2221      	movs	r2, #33	@ 0x21
 800947a:	2104      	movs	r1, #4
 800947c:	4620      	mov	r0, r4
 800947e:	f001 f956 	bl	800a72e <_calloc_r>
 8009482:	69e3      	ldr	r3, [r4, #28]
 8009484:	60f0      	str	r0, [r6, #12]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e4      	bne.n	8009456 <_Balloc+0x2e>
 800948c:	2000      	movs	r0, #0
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	6802      	ldr	r2, [r0, #0]
 8009492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009496:	2300      	movs	r3, #0
 8009498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800949c:	e7f7      	b.n	800948e <_Balloc+0x66>
 800949e:	bf00      	nop
 80094a0:	0800aa43 	.word	0x0800aa43
 80094a4:	0800abce 	.word	0x0800abce

080094a8 <_Bfree>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	69c6      	ldr	r6, [r0, #28]
 80094ac:	4605      	mov	r5, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b976      	cbnz	r6, 80094d0 <_Bfree+0x28>
 80094b2:	2010      	movs	r0, #16
 80094b4:	f7ff fef0 	bl	8009298 <malloc>
 80094b8:	4602      	mov	r2, r0
 80094ba:	61e8      	str	r0, [r5, #28]
 80094bc:	b920      	cbnz	r0, 80094c8 <_Bfree+0x20>
 80094be:	4b09      	ldr	r3, [pc, #36]	@ (80094e4 <_Bfree+0x3c>)
 80094c0:	4809      	ldr	r0, [pc, #36]	@ (80094e8 <_Bfree+0x40>)
 80094c2:	218f      	movs	r1, #143	@ 0x8f
 80094c4:	f7fe fcee 	bl	8007ea4 <__assert_func>
 80094c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094cc:	6006      	str	r6, [r0, #0]
 80094ce:	60c6      	str	r6, [r0, #12]
 80094d0:	b13c      	cbz	r4, 80094e2 <_Bfree+0x3a>
 80094d2:	69eb      	ldr	r3, [r5, #28]
 80094d4:	6862      	ldr	r2, [r4, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094dc:	6021      	str	r1, [r4, #0]
 80094de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	0800aa43 	.word	0x0800aa43
 80094e8:	0800abce 	.word	0x0800abce

080094ec <__multadd>:
 80094ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	690d      	ldr	r5, [r1, #16]
 80094f2:	4607      	mov	r7, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	461e      	mov	r6, r3
 80094f8:	f101 0c14 	add.w	ip, r1, #20
 80094fc:	2000      	movs	r0, #0
 80094fe:	f8dc 3000 	ldr.w	r3, [ip]
 8009502:	b299      	uxth	r1, r3
 8009504:	fb02 6101 	mla	r1, r2, r1, r6
 8009508:	0c1e      	lsrs	r6, r3, #16
 800950a:	0c0b      	lsrs	r3, r1, #16
 800950c:	fb02 3306 	mla	r3, r2, r6, r3
 8009510:	b289      	uxth	r1, r1
 8009512:	3001      	adds	r0, #1
 8009514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009518:	4285      	cmp	r5, r0
 800951a:	f84c 1b04 	str.w	r1, [ip], #4
 800951e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009522:	dcec      	bgt.n	80094fe <__multadd+0x12>
 8009524:	b30e      	cbz	r6, 800956a <__multadd+0x7e>
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	42ab      	cmp	r3, r5
 800952a:	dc19      	bgt.n	8009560 <__multadd+0x74>
 800952c:	6861      	ldr	r1, [r4, #4]
 800952e:	4638      	mov	r0, r7
 8009530:	3101      	adds	r1, #1
 8009532:	f7ff ff79 	bl	8009428 <_Balloc>
 8009536:	4680      	mov	r8, r0
 8009538:	b928      	cbnz	r0, 8009546 <__multadd+0x5a>
 800953a:	4602      	mov	r2, r0
 800953c:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <__multadd+0x84>)
 800953e:	480d      	ldr	r0, [pc, #52]	@ (8009574 <__multadd+0x88>)
 8009540:	21ba      	movs	r1, #186	@ 0xba
 8009542:	f7fe fcaf 	bl	8007ea4 <__assert_func>
 8009546:	6922      	ldr	r2, [r4, #16]
 8009548:	3202      	adds	r2, #2
 800954a:	f104 010c 	add.w	r1, r4, #12
 800954e:	0092      	lsls	r2, r2, #2
 8009550:	300c      	adds	r0, #12
 8009552:	f7fe fc8a 	bl	8007e6a <memcpy>
 8009556:	4621      	mov	r1, r4
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ffa5 	bl	80094a8 <_Bfree>
 800955e:	4644      	mov	r4, r8
 8009560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009564:	3501      	adds	r5, #1
 8009566:	615e      	str	r6, [r3, #20]
 8009568:	6125      	str	r5, [r4, #16]
 800956a:	4620      	mov	r0, r4
 800956c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009570:	0800ab5d 	.word	0x0800ab5d
 8009574:	0800abce 	.word	0x0800abce

08009578 <__s2b>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	460c      	mov	r4, r1
 800957e:	4615      	mov	r5, r2
 8009580:	461f      	mov	r7, r3
 8009582:	2209      	movs	r2, #9
 8009584:	3308      	adds	r3, #8
 8009586:	4606      	mov	r6, r0
 8009588:	fb93 f3f2 	sdiv	r3, r3, r2
 800958c:	2100      	movs	r1, #0
 800958e:	2201      	movs	r2, #1
 8009590:	429a      	cmp	r2, r3
 8009592:	db09      	blt.n	80095a8 <__s2b+0x30>
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff ff47 	bl	8009428 <_Balloc>
 800959a:	b940      	cbnz	r0, 80095ae <__s2b+0x36>
 800959c:	4602      	mov	r2, r0
 800959e:	4b19      	ldr	r3, [pc, #100]	@ (8009604 <__s2b+0x8c>)
 80095a0:	4819      	ldr	r0, [pc, #100]	@ (8009608 <__s2b+0x90>)
 80095a2:	21d3      	movs	r1, #211	@ 0xd3
 80095a4:	f7fe fc7e 	bl	8007ea4 <__assert_func>
 80095a8:	0052      	lsls	r2, r2, #1
 80095aa:	3101      	adds	r1, #1
 80095ac:	e7f0      	b.n	8009590 <__s2b+0x18>
 80095ae:	9b08      	ldr	r3, [sp, #32]
 80095b0:	6143      	str	r3, [r0, #20]
 80095b2:	2d09      	cmp	r5, #9
 80095b4:	f04f 0301 	mov.w	r3, #1
 80095b8:	6103      	str	r3, [r0, #16]
 80095ba:	dd16      	ble.n	80095ea <__s2b+0x72>
 80095bc:	f104 0909 	add.w	r9, r4, #9
 80095c0:	46c8      	mov	r8, r9
 80095c2:	442c      	add	r4, r5
 80095c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095c8:	4601      	mov	r1, r0
 80095ca:	3b30      	subs	r3, #48	@ 0x30
 80095cc:	220a      	movs	r2, #10
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ff8c 	bl	80094ec <__multadd>
 80095d4:	45a0      	cmp	r8, r4
 80095d6:	d1f5      	bne.n	80095c4 <__s2b+0x4c>
 80095d8:	f1a5 0408 	sub.w	r4, r5, #8
 80095dc:	444c      	add	r4, r9
 80095de:	1b2d      	subs	r5, r5, r4
 80095e0:	1963      	adds	r3, r4, r5
 80095e2:	42bb      	cmp	r3, r7
 80095e4:	db04      	blt.n	80095f0 <__s2b+0x78>
 80095e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ea:	340a      	adds	r4, #10
 80095ec:	2509      	movs	r5, #9
 80095ee:	e7f6      	b.n	80095de <__s2b+0x66>
 80095f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095f4:	4601      	mov	r1, r0
 80095f6:	3b30      	subs	r3, #48	@ 0x30
 80095f8:	220a      	movs	r2, #10
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff ff76 	bl	80094ec <__multadd>
 8009600:	e7ee      	b.n	80095e0 <__s2b+0x68>
 8009602:	bf00      	nop
 8009604:	0800ab5d 	.word	0x0800ab5d
 8009608:	0800abce 	.word	0x0800abce

0800960c <__hi0bits>:
 800960c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009610:	4603      	mov	r3, r0
 8009612:	bf36      	itet	cc
 8009614:	0403      	lslcc	r3, r0, #16
 8009616:	2000      	movcs	r0, #0
 8009618:	2010      	movcc	r0, #16
 800961a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800961e:	bf3c      	itt	cc
 8009620:	021b      	lslcc	r3, r3, #8
 8009622:	3008      	addcc	r0, #8
 8009624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009628:	bf3c      	itt	cc
 800962a:	011b      	lslcc	r3, r3, #4
 800962c:	3004      	addcc	r0, #4
 800962e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009632:	bf3c      	itt	cc
 8009634:	009b      	lslcc	r3, r3, #2
 8009636:	3002      	addcc	r0, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	db05      	blt.n	8009648 <__hi0bits+0x3c>
 800963c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009640:	f100 0001 	add.w	r0, r0, #1
 8009644:	bf08      	it	eq
 8009646:	2020      	moveq	r0, #32
 8009648:	4770      	bx	lr

0800964a <__lo0bits>:
 800964a:	6803      	ldr	r3, [r0, #0]
 800964c:	4602      	mov	r2, r0
 800964e:	f013 0007 	ands.w	r0, r3, #7
 8009652:	d00b      	beq.n	800966c <__lo0bits+0x22>
 8009654:	07d9      	lsls	r1, r3, #31
 8009656:	d421      	bmi.n	800969c <__lo0bits+0x52>
 8009658:	0798      	lsls	r0, r3, #30
 800965a:	bf49      	itett	mi
 800965c:	085b      	lsrmi	r3, r3, #1
 800965e:	089b      	lsrpl	r3, r3, #2
 8009660:	2001      	movmi	r0, #1
 8009662:	6013      	strmi	r3, [r2, #0]
 8009664:	bf5c      	itt	pl
 8009666:	6013      	strpl	r3, [r2, #0]
 8009668:	2002      	movpl	r0, #2
 800966a:	4770      	bx	lr
 800966c:	b299      	uxth	r1, r3
 800966e:	b909      	cbnz	r1, 8009674 <__lo0bits+0x2a>
 8009670:	0c1b      	lsrs	r3, r3, #16
 8009672:	2010      	movs	r0, #16
 8009674:	b2d9      	uxtb	r1, r3
 8009676:	b909      	cbnz	r1, 800967c <__lo0bits+0x32>
 8009678:	3008      	adds	r0, #8
 800967a:	0a1b      	lsrs	r3, r3, #8
 800967c:	0719      	lsls	r1, r3, #28
 800967e:	bf04      	itt	eq
 8009680:	091b      	lsreq	r3, r3, #4
 8009682:	3004      	addeq	r0, #4
 8009684:	0799      	lsls	r1, r3, #30
 8009686:	bf04      	itt	eq
 8009688:	089b      	lsreq	r3, r3, #2
 800968a:	3002      	addeq	r0, #2
 800968c:	07d9      	lsls	r1, r3, #31
 800968e:	d403      	bmi.n	8009698 <__lo0bits+0x4e>
 8009690:	085b      	lsrs	r3, r3, #1
 8009692:	f100 0001 	add.w	r0, r0, #1
 8009696:	d003      	beq.n	80096a0 <__lo0bits+0x56>
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	4770      	bx	lr
 800969c:	2000      	movs	r0, #0
 800969e:	4770      	bx	lr
 80096a0:	2020      	movs	r0, #32
 80096a2:	4770      	bx	lr

080096a4 <__i2b>:
 80096a4:	b510      	push	{r4, lr}
 80096a6:	460c      	mov	r4, r1
 80096a8:	2101      	movs	r1, #1
 80096aa:	f7ff febd 	bl	8009428 <_Balloc>
 80096ae:	4602      	mov	r2, r0
 80096b0:	b928      	cbnz	r0, 80096be <__i2b+0x1a>
 80096b2:	4b05      	ldr	r3, [pc, #20]	@ (80096c8 <__i2b+0x24>)
 80096b4:	4805      	ldr	r0, [pc, #20]	@ (80096cc <__i2b+0x28>)
 80096b6:	f240 1145 	movw	r1, #325	@ 0x145
 80096ba:	f7fe fbf3 	bl	8007ea4 <__assert_func>
 80096be:	2301      	movs	r3, #1
 80096c0:	6144      	str	r4, [r0, #20]
 80096c2:	6103      	str	r3, [r0, #16]
 80096c4:	bd10      	pop	{r4, pc}
 80096c6:	bf00      	nop
 80096c8:	0800ab5d 	.word	0x0800ab5d
 80096cc:	0800abce 	.word	0x0800abce

080096d0 <__multiply>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	4617      	mov	r7, r2
 80096d6:	690a      	ldr	r2, [r1, #16]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	429a      	cmp	r2, r3
 80096dc:	bfa8      	it	ge
 80096de:	463b      	movge	r3, r7
 80096e0:	4689      	mov	r9, r1
 80096e2:	bfa4      	itt	ge
 80096e4:	460f      	movge	r7, r1
 80096e6:	4699      	movge	r9, r3
 80096e8:	693d      	ldr	r5, [r7, #16]
 80096ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	eb05 060a 	add.w	r6, r5, sl
 80096f6:	42b3      	cmp	r3, r6
 80096f8:	b085      	sub	sp, #20
 80096fa:	bfb8      	it	lt
 80096fc:	3101      	addlt	r1, #1
 80096fe:	f7ff fe93 	bl	8009428 <_Balloc>
 8009702:	b930      	cbnz	r0, 8009712 <__multiply+0x42>
 8009704:	4602      	mov	r2, r0
 8009706:	4b41      	ldr	r3, [pc, #260]	@ (800980c <__multiply+0x13c>)
 8009708:	4841      	ldr	r0, [pc, #260]	@ (8009810 <__multiply+0x140>)
 800970a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800970e:	f7fe fbc9 	bl	8007ea4 <__assert_func>
 8009712:	f100 0414 	add.w	r4, r0, #20
 8009716:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800971a:	4623      	mov	r3, r4
 800971c:	2200      	movs	r2, #0
 800971e:	4573      	cmp	r3, lr
 8009720:	d320      	bcc.n	8009764 <__multiply+0x94>
 8009722:	f107 0814 	add.w	r8, r7, #20
 8009726:	f109 0114 	add.w	r1, r9, #20
 800972a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800972e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009732:	9302      	str	r3, [sp, #8]
 8009734:	1beb      	subs	r3, r5, r7
 8009736:	3b15      	subs	r3, #21
 8009738:	f023 0303 	bic.w	r3, r3, #3
 800973c:	3304      	adds	r3, #4
 800973e:	3715      	adds	r7, #21
 8009740:	42bd      	cmp	r5, r7
 8009742:	bf38      	it	cc
 8009744:	2304      	movcc	r3, #4
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	9b02      	ldr	r3, [sp, #8]
 800974a:	9103      	str	r1, [sp, #12]
 800974c:	428b      	cmp	r3, r1
 800974e:	d80c      	bhi.n	800976a <__multiply+0x9a>
 8009750:	2e00      	cmp	r6, #0
 8009752:	dd03      	ble.n	800975c <__multiply+0x8c>
 8009754:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009758:	2b00      	cmp	r3, #0
 800975a:	d055      	beq.n	8009808 <__multiply+0x138>
 800975c:	6106      	str	r6, [r0, #16]
 800975e:	b005      	add	sp, #20
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	f843 2b04 	str.w	r2, [r3], #4
 8009768:	e7d9      	b.n	800971e <__multiply+0x4e>
 800976a:	f8b1 a000 	ldrh.w	sl, [r1]
 800976e:	f1ba 0f00 	cmp.w	sl, #0
 8009772:	d01f      	beq.n	80097b4 <__multiply+0xe4>
 8009774:	46c4      	mov	ip, r8
 8009776:	46a1      	mov	r9, r4
 8009778:	2700      	movs	r7, #0
 800977a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800977e:	f8d9 3000 	ldr.w	r3, [r9]
 8009782:	fa1f fb82 	uxth.w	fp, r2
 8009786:	b29b      	uxth	r3, r3
 8009788:	fb0a 330b 	mla	r3, sl, fp, r3
 800978c:	443b      	add	r3, r7
 800978e:	f8d9 7000 	ldr.w	r7, [r9]
 8009792:	0c12      	lsrs	r2, r2, #16
 8009794:	0c3f      	lsrs	r7, r7, #16
 8009796:	fb0a 7202 	mla	r2, sl, r2, r7
 800979a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a4:	4565      	cmp	r5, ip
 80097a6:	f849 3b04 	str.w	r3, [r9], #4
 80097aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80097ae:	d8e4      	bhi.n	800977a <__multiply+0xaa>
 80097b0:	9b01      	ldr	r3, [sp, #4]
 80097b2:	50e7      	str	r7, [r4, r3]
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097ba:	3104      	adds	r1, #4
 80097bc:	f1b9 0f00 	cmp.w	r9, #0
 80097c0:	d020      	beq.n	8009804 <__multiply+0x134>
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	4647      	mov	r7, r8
 80097c6:	46a4      	mov	ip, r4
 80097c8:	f04f 0a00 	mov.w	sl, #0
 80097cc:	f8b7 b000 	ldrh.w	fp, [r7]
 80097d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80097d4:	fb09 220b 	mla	r2, r9, fp, r2
 80097d8:	4452      	add	r2, sl
 80097da:	b29b      	uxth	r3, r3
 80097dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097e0:	f84c 3b04 	str.w	r3, [ip], #4
 80097e4:	f857 3b04 	ldr.w	r3, [r7], #4
 80097e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097ec:	f8bc 3000 	ldrh.w	r3, [ip]
 80097f0:	fb09 330a 	mla	r3, r9, sl, r3
 80097f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80097f8:	42bd      	cmp	r5, r7
 80097fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097fe:	d8e5      	bhi.n	80097cc <__multiply+0xfc>
 8009800:	9a01      	ldr	r2, [sp, #4]
 8009802:	50a3      	str	r3, [r4, r2]
 8009804:	3404      	adds	r4, #4
 8009806:	e79f      	b.n	8009748 <__multiply+0x78>
 8009808:	3e01      	subs	r6, #1
 800980a:	e7a1      	b.n	8009750 <__multiply+0x80>
 800980c:	0800ab5d 	.word	0x0800ab5d
 8009810:	0800abce 	.word	0x0800abce

08009814 <__pow5mult>:
 8009814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009818:	4615      	mov	r5, r2
 800981a:	f012 0203 	ands.w	r2, r2, #3
 800981e:	4607      	mov	r7, r0
 8009820:	460e      	mov	r6, r1
 8009822:	d007      	beq.n	8009834 <__pow5mult+0x20>
 8009824:	4c25      	ldr	r4, [pc, #148]	@ (80098bc <__pow5mult+0xa8>)
 8009826:	3a01      	subs	r2, #1
 8009828:	2300      	movs	r3, #0
 800982a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800982e:	f7ff fe5d 	bl	80094ec <__multadd>
 8009832:	4606      	mov	r6, r0
 8009834:	10ad      	asrs	r5, r5, #2
 8009836:	d03d      	beq.n	80098b4 <__pow5mult+0xa0>
 8009838:	69fc      	ldr	r4, [r7, #28]
 800983a:	b97c      	cbnz	r4, 800985c <__pow5mult+0x48>
 800983c:	2010      	movs	r0, #16
 800983e:	f7ff fd2b 	bl	8009298 <malloc>
 8009842:	4602      	mov	r2, r0
 8009844:	61f8      	str	r0, [r7, #28]
 8009846:	b928      	cbnz	r0, 8009854 <__pow5mult+0x40>
 8009848:	4b1d      	ldr	r3, [pc, #116]	@ (80098c0 <__pow5mult+0xac>)
 800984a:	481e      	ldr	r0, [pc, #120]	@ (80098c4 <__pow5mult+0xb0>)
 800984c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009850:	f7fe fb28 	bl	8007ea4 <__assert_func>
 8009854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009858:	6004      	str	r4, [r0, #0]
 800985a:	60c4      	str	r4, [r0, #12]
 800985c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009864:	b94c      	cbnz	r4, 800987a <__pow5mult+0x66>
 8009866:	f240 2171 	movw	r1, #625	@ 0x271
 800986a:	4638      	mov	r0, r7
 800986c:	f7ff ff1a 	bl	80096a4 <__i2b>
 8009870:	2300      	movs	r3, #0
 8009872:	f8c8 0008 	str.w	r0, [r8, #8]
 8009876:	4604      	mov	r4, r0
 8009878:	6003      	str	r3, [r0, #0]
 800987a:	f04f 0900 	mov.w	r9, #0
 800987e:	07eb      	lsls	r3, r5, #31
 8009880:	d50a      	bpl.n	8009898 <__pow5mult+0x84>
 8009882:	4631      	mov	r1, r6
 8009884:	4622      	mov	r2, r4
 8009886:	4638      	mov	r0, r7
 8009888:	f7ff ff22 	bl	80096d0 <__multiply>
 800988c:	4631      	mov	r1, r6
 800988e:	4680      	mov	r8, r0
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff fe09 	bl	80094a8 <_Bfree>
 8009896:	4646      	mov	r6, r8
 8009898:	106d      	asrs	r5, r5, #1
 800989a:	d00b      	beq.n	80098b4 <__pow5mult+0xa0>
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	b938      	cbnz	r0, 80098b0 <__pow5mult+0x9c>
 80098a0:	4622      	mov	r2, r4
 80098a2:	4621      	mov	r1, r4
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff ff13 	bl	80096d0 <__multiply>
 80098aa:	6020      	str	r0, [r4, #0]
 80098ac:	f8c0 9000 	str.w	r9, [r0]
 80098b0:	4604      	mov	r4, r0
 80098b2:	e7e4      	b.n	800987e <__pow5mult+0x6a>
 80098b4:	4630      	mov	r0, r6
 80098b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ba:	bf00      	nop
 80098bc:	0800ac88 	.word	0x0800ac88
 80098c0:	0800aa43 	.word	0x0800aa43
 80098c4:	0800abce 	.word	0x0800abce

080098c8 <__lshift>:
 80098c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098cc:	460c      	mov	r4, r1
 80098ce:	6849      	ldr	r1, [r1, #4]
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	4607      	mov	r7, r0
 80098da:	4691      	mov	r9, r2
 80098dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098e0:	f108 0601 	add.w	r6, r8, #1
 80098e4:	42b3      	cmp	r3, r6
 80098e6:	db0b      	blt.n	8009900 <__lshift+0x38>
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7ff fd9d 	bl	8009428 <_Balloc>
 80098ee:	4605      	mov	r5, r0
 80098f0:	b948      	cbnz	r0, 8009906 <__lshift+0x3e>
 80098f2:	4602      	mov	r2, r0
 80098f4:	4b28      	ldr	r3, [pc, #160]	@ (8009998 <__lshift+0xd0>)
 80098f6:	4829      	ldr	r0, [pc, #164]	@ (800999c <__lshift+0xd4>)
 80098f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098fc:	f7fe fad2 	bl	8007ea4 <__assert_func>
 8009900:	3101      	adds	r1, #1
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	e7ee      	b.n	80098e4 <__lshift+0x1c>
 8009906:	2300      	movs	r3, #0
 8009908:	f100 0114 	add.w	r1, r0, #20
 800990c:	f100 0210 	add.w	r2, r0, #16
 8009910:	4618      	mov	r0, r3
 8009912:	4553      	cmp	r3, sl
 8009914:	db33      	blt.n	800997e <__lshift+0xb6>
 8009916:	6920      	ldr	r0, [r4, #16]
 8009918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800991c:	f104 0314 	add.w	r3, r4, #20
 8009920:	f019 091f 	ands.w	r9, r9, #31
 8009924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009928:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800992c:	d02b      	beq.n	8009986 <__lshift+0xbe>
 800992e:	f1c9 0e20 	rsb	lr, r9, #32
 8009932:	468a      	mov	sl, r1
 8009934:	2200      	movs	r2, #0
 8009936:	6818      	ldr	r0, [r3, #0]
 8009938:	fa00 f009 	lsl.w	r0, r0, r9
 800993c:	4310      	orrs	r0, r2
 800993e:	f84a 0b04 	str.w	r0, [sl], #4
 8009942:	f853 2b04 	ldr.w	r2, [r3], #4
 8009946:	459c      	cmp	ip, r3
 8009948:	fa22 f20e 	lsr.w	r2, r2, lr
 800994c:	d8f3      	bhi.n	8009936 <__lshift+0x6e>
 800994e:	ebac 0304 	sub.w	r3, ip, r4
 8009952:	3b15      	subs	r3, #21
 8009954:	f023 0303 	bic.w	r3, r3, #3
 8009958:	3304      	adds	r3, #4
 800995a:	f104 0015 	add.w	r0, r4, #21
 800995e:	4560      	cmp	r0, ip
 8009960:	bf88      	it	hi
 8009962:	2304      	movhi	r3, #4
 8009964:	50ca      	str	r2, [r1, r3]
 8009966:	b10a      	cbz	r2, 800996c <__lshift+0xa4>
 8009968:	f108 0602 	add.w	r6, r8, #2
 800996c:	3e01      	subs	r6, #1
 800996e:	4638      	mov	r0, r7
 8009970:	612e      	str	r6, [r5, #16]
 8009972:	4621      	mov	r1, r4
 8009974:	f7ff fd98 	bl	80094a8 <_Bfree>
 8009978:	4628      	mov	r0, r5
 800997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009982:	3301      	adds	r3, #1
 8009984:	e7c5      	b.n	8009912 <__lshift+0x4a>
 8009986:	3904      	subs	r1, #4
 8009988:	f853 2b04 	ldr.w	r2, [r3], #4
 800998c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009990:	459c      	cmp	ip, r3
 8009992:	d8f9      	bhi.n	8009988 <__lshift+0xc0>
 8009994:	e7ea      	b.n	800996c <__lshift+0xa4>
 8009996:	bf00      	nop
 8009998:	0800ab5d 	.word	0x0800ab5d
 800999c:	0800abce 	.word	0x0800abce

080099a0 <__mcmp>:
 80099a0:	690a      	ldr	r2, [r1, #16]
 80099a2:	4603      	mov	r3, r0
 80099a4:	6900      	ldr	r0, [r0, #16]
 80099a6:	1a80      	subs	r0, r0, r2
 80099a8:	b530      	push	{r4, r5, lr}
 80099aa:	d10e      	bne.n	80099ca <__mcmp+0x2a>
 80099ac:	3314      	adds	r3, #20
 80099ae:	3114      	adds	r1, #20
 80099b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099c0:	4295      	cmp	r5, r2
 80099c2:	d003      	beq.n	80099cc <__mcmp+0x2c>
 80099c4:	d205      	bcs.n	80099d2 <__mcmp+0x32>
 80099c6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ca:	bd30      	pop	{r4, r5, pc}
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	d3f3      	bcc.n	80099b8 <__mcmp+0x18>
 80099d0:	e7fb      	b.n	80099ca <__mcmp+0x2a>
 80099d2:	2001      	movs	r0, #1
 80099d4:	e7f9      	b.n	80099ca <__mcmp+0x2a>
	...

080099d8 <__mdiff>:
 80099d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	4689      	mov	r9, r1
 80099de:	4606      	mov	r6, r0
 80099e0:	4611      	mov	r1, r2
 80099e2:	4648      	mov	r0, r9
 80099e4:	4614      	mov	r4, r2
 80099e6:	f7ff ffdb 	bl	80099a0 <__mcmp>
 80099ea:	1e05      	subs	r5, r0, #0
 80099ec:	d112      	bne.n	8009a14 <__mdiff+0x3c>
 80099ee:	4629      	mov	r1, r5
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff fd19 	bl	8009428 <_Balloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	b928      	cbnz	r0, 8009a06 <__mdiff+0x2e>
 80099fa:	4b3f      	ldr	r3, [pc, #252]	@ (8009af8 <__mdiff+0x120>)
 80099fc:	f240 2137 	movw	r1, #567	@ 0x237
 8009a00:	483e      	ldr	r0, [pc, #248]	@ (8009afc <__mdiff+0x124>)
 8009a02:	f7fe fa4f 	bl	8007ea4 <__assert_func>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	b003      	add	sp, #12
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	bfbc      	itt	lt
 8009a16:	464b      	movlt	r3, r9
 8009a18:	46a1      	movlt	r9, r4
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a20:	bfba      	itte	lt
 8009a22:	461c      	movlt	r4, r3
 8009a24:	2501      	movlt	r5, #1
 8009a26:	2500      	movge	r5, #0
 8009a28:	f7ff fcfe 	bl	8009428 <_Balloc>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	b918      	cbnz	r0, 8009a38 <__mdiff+0x60>
 8009a30:	4b31      	ldr	r3, [pc, #196]	@ (8009af8 <__mdiff+0x120>)
 8009a32:	f240 2145 	movw	r1, #581	@ 0x245
 8009a36:	e7e3      	b.n	8009a00 <__mdiff+0x28>
 8009a38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a3c:	6926      	ldr	r6, [r4, #16]
 8009a3e:	60c5      	str	r5, [r0, #12]
 8009a40:	f109 0310 	add.w	r3, r9, #16
 8009a44:	f109 0514 	add.w	r5, r9, #20
 8009a48:	f104 0e14 	add.w	lr, r4, #20
 8009a4c:	f100 0b14 	add.w	fp, r0, #20
 8009a50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	46d9      	mov	r9, fp
 8009a5c:	f04f 0c00 	mov.w	ip, #0
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	fa1f f38a 	uxth.w	r3, sl
 8009a70:	4619      	mov	r1, r3
 8009a72:	b283      	uxth	r3, r0
 8009a74:	1acb      	subs	r3, r1, r3
 8009a76:	0c00      	lsrs	r0, r0, #16
 8009a78:	4463      	add	r3, ip
 8009a7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a88:	4576      	cmp	r6, lr
 8009a8a:	f849 3b04 	str.w	r3, [r9], #4
 8009a8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a92:	d8e5      	bhi.n	8009a60 <__mdiff+0x88>
 8009a94:	1b33      	subs	r3, r6, r4
 8009a96:	3b15      	subs	r3, #21
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	3415      	adds	r4, #21
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	42a6      	cmp	r6, r4
 8009aa2:	bf38      	it	cc
 8009aa4:	2304      	movcc	r3, #4
 8009aa6:	441d      	add	r5, r3
 8009aa8:	445b      	add	r3, fp
 8009aaa:	461e      	mov	r6, r3
 8009aac:	462c      	mov	r4, r5
 8009aae:	4544      	cmp	r4, r8
 8009ab0:	d30e      	bcc.n	8009ad0 <__mdiff+0xf8>
 8009ab2:	f108 0103 	add.w	r1, r8, #3
 8009ab6:	1b49      	subs	r1, r1, r5
 8009ab8:	f021 0103 	bic.w	r1, r1, #3
 8009abc:	3d03      	subs	r5, #3
 8009abe:	45a8      	cmp	r8, r5
 8009ac0:	bf38      	it	cc
 8009ac2:	2100      	movcc	r1, #0
 8009ac4:	440b      	add	r3, r1
 8009ac6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009aca:	b191      	cbz	r1, 8009af2 <__mdiff+0x11a>
 8009acc:	6117      	str	r7, [r2, #16]
 8009ace:	e79d      	b.n	8009a0c <__mdiff+0x34>
 8009ad0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ad4:	46e6      	mov	lr, ip
 8009ad6:	0c08      	lsrs	r0, r1, #16
 8009ad8:	fa1c fc81 	uxtah	ip, ip, r1
 8009adc:	4471      	add	r1, lr
 8009ade:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ae2:	b289      	uxth	r1, r1
 8009ae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ae8:	f846 1b04 	str.w	r1, [r6], #4
 8009aec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009af0:	e7dd      	b.n	8009aae <__mdiff+0xd6>
 8009af2:	3f01      	subs	r7, #1
 8009af4:	e7e7      	b.n	8009ac6 <__mdiff+0xee>
 8009af6:	bf00      	nop
 8009af8:	0800ab5d 	.word	0x0800ab5d
 8009afc:	0800abce 	.word	0x0800abce

08009b00 <__ulp>:
 8009b00:	b082      	sub	sp, #8
 8009b02:	ed8d 0b00 	vstr	d0, [sp]
 8009b06:	9a01      	ldr	r2, [sp, #4]
 8009b08:	4b0f      	ldr	r3, [pc, #60]	@ (8009b48 <__ulp+0x48>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dc08      	bgt.n	8009b26 <__ulp+0x26>
 8009b14:	425b      	negs	r3, r3
 8009b16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b1e:	da04      	bge.n	8009b2a <__ulp+0x2a>
 8009b20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b24:	4113      	asrs	r3, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	e008      	b.n	8009b3c <__ulp+0x3c>
 8009b2a:	f1a2 0314 	sub.w	r3, r2, #20
 8009b2e:	2b1e      	cmp	r3, #30
 8009b30:	bfda      	itte	le
 8009b32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b36:	40da      	lsrle	r2, r3
 8009b38:	2201      	movgt	r2, #1
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	ec41 0b10 	vmov	d0, r0, r1
 8009b44:	b002      	add	sp, #8
 8009b46:	4770      	bx	lr
 8009b48:	7ff00000 	.word	0x7ff00000

08009b4c <__b2d>:
 8009b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b50:	6906      	ldr	r6, [r0, #16]
 8009b52:	f100 0814 	add.w	r8, r0, #20
 8009b56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b5a:	1f37      	subs	r7, r6, #4
 8009b5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b60:	4610      	mov	r0, r2
 8009b62:	f7ff fd53 	bl	800960c <__hi0bits>
 8009b66:	f1c0 0320 	rsb	r3, r0, #32
 8009b6a:	280a      	cmp	r0, #10
 8009b6c:	600b      	str	r3, [r1, #0]
 8009b6e:	491b      	ldr	r1, [pc, #108]	@ (8009bdc <__b2d+0x90>)
 8009b70:	dc15      	bgt.n	8009b9e <__b2d+0x52>
 8009b72:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b76:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b7a:	45b8      	cmp	r8, r7
 8009b7c:	ea43 0501 	orr.w	r5, r3, r1
 8009b80:	bf34      	ite	cc
 8009b82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b86:	2300      	movcs	r3, #0
 8009b88:	3015      	adds	r0, #21
 8009b8a:	fa02 f000 	lsl.w	r0, r2, r0
 8009b8e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b92:	4303      	orrs	r3, r0
 8009b94:	461c      	mov	r4, r3
 8009b96:	ec45 4b10 	vmov	d0, r4, r5
 8009b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9e:	45b8      	cmp	r8, r7
 8009ba0:	bf3a      	itte	cc
 8009ba2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ba6:	f1a6 0708 	subcc.w	r7, r6, #8
 8009baa:	2300      	movcs	r3, #0
 8009bac:	380b      	subs	r0, #11
 8009bae:	d012      	beq.n	8009bd6 <__b2d+0x8a>
 8009bb0:	f1c0 0120 	rsb	r1, r0, #32
 8009bb4:	fa23 f401 	lsr.w	r4, r3, r1
 8009bb8:	4082      	lsls	r2, r0
 8009bba:	4322      	orrs	r2, r4
 8009bbc:	4547      	cmp	r7, r8
 8009bbe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009bc2:	bf8c      	ite	hi
 8009bc4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009bc8:	2200      	movls	r2, #0
 8009bca:	4083      	lsls	r3, r0
 8009bcc:	40ca      	lsrs	r2, r1
 8009bce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	e7de      	b.n	8009b94 <__b2d+0x48>
 8009bd6:	ea42 0501 	orr.w	r5, r2, r1
 8009bda:	e7db      	b.n	8009b94 <__b2d+0x48>
 8009bdc:	3ff00000 	.word	0x3ff00000

08009be0 <__d2b>:
 8009be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009be4:	460f      	mov	r7, r1
 8009be6:	2101      	movs	r1, #1
 8009be8:	ec59 8b10 	vmov	r8, r9, d0
 8009bec:	4616      	mov	r6, r2
 8009bee:	f7ff fc1b 	bl	8009428 <_Balloc>
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	b930      	cbnz	r0, 8009c04 <__d2b+0x24>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	4b23      	ldr	r3, [pc, #140]	@ (8009c88 <__d2b+0xa8>)
 8009bfa:	4824      	ldr	r0, [pc, #144]	@ (8009c8c <__d2b+0xac>)
 8009bfc:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c00:	f7fe f950 	bl	8007ea4 <__assert_func>
 8009c04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c0c:	b10d      	cbz	r5, 8009c12 <__d2b+0x32>
 8009c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	f1b8 0300 	subs.w	r3, r8, #0
 8009c18:	d023      	beq.n	8009c62 <__d2b+0x82>
 8009c1a:	4668      	mov	r0, sp
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	f7ff fd14 	bl	800964a <__lo0bits>
 8009c22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c26:	b1d0      	cbz	r0, 8009c5e <__d2b+0x7e>
 8009c28:	f1c0 0320 	rsb	r3, r0, #32
 8009c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c30:	430b      	orrs	r3, r1
 8009c32:	40c2      	lsrs	r2, r0
 8009c34:	6163      	str	r3, [r4, #20]
 8009c36:	9201      	str	r2, [sp, #4]
 8009c38:	9b01      	ldr	r3, [sp, #4]
 8009c3a:	61a3      	str	r3, [r4, #24]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	bf0c      	ite	eq
 8009c40:	2201      	moveq	r2, #1
 8009c42:	2202      	movne	r2, #2
 8009c44:	6122      	str	r2, [r4, #16]
 8009c46:	b1a5      	cbz	r5, 8009c72 <__d2b+0x92>
 8009c48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c4c:	4405      	add	r5, r0
 8009c4e:	603d      	str	r5, [r7, #0]
 8009c50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c54:	6030      	str	r0, [r6, #0]
 8009c56:	4620      	mov	r0, r4
 8009c58:	b003      	add	sp, #12
 8009c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c5e:	6161      	str	r1, [r4, #20]
 8009c60:	e7ea      	b.n	8009c38 <__d2b+0x58>
 8009c62:	a801      	add	r0, sp, #4
 8009c64:	f7ff fcf1 	bl	800964a <__lo0bits>
 8009c68:	9b01      	ldr	r3, [sp, #4]
 8009c6a:	6163      	str	r3, [r4, #20]
 8009c6c:	3020      	adds	r0, #32
 8009c6e:	2201      	movs	r2, #1
 8009c70:	e7e8      	b.n	8009c44 <__d2b+0x64>
 8009c72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c7a:	6038      	str	r0, [r7, #0]
 8009c7c:	6918      	ldr	r0, [r3, #16]
 8009c7e:	f7ff fcc5 	bl	800960c <__hi0bits>
 8009c82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c86:	e7e5      	b.n	8009c54 <__d2b+0x74>
 8009c88:	0800ab5d 	.word	0x0800ab5d
 8009c8c:	0800abce 	.word	0x0800abce

08009c90 <__ratio>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	b085      	sub	sp, #20
 8009c96:	e9cd 1000 	strd	r1, r0, [sp]
 8009c9a:	a902      	add	r1, sp, #8
 8009c9c:	f7ff ff56 	bl	8009b4c <__b2d>
 8009ca0:	9800      	ldr	r0, [sp, #0]
 8009ca2:	a903      	add	r1, sp, #12
 8009ca4:	ec55 4b10 	vmov	r4, r5, d0
 8009ca8:	f7ff ff50 	bl	8009b4c <__b2d>
 8009cac:	9b01      	ldr	r3, [sp, #4]
 8009cae:	6919      	ldr	r1, [r3, #16]
 8009cb0:	9b00      	ldr	r3, [sp, #0]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	1ac9      	subs	r1, r1, r3
 8009cb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	ec5b ab10 	vmov	sl, fp, d0
 8009cc0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfce      	itee	gt
 8009cc8:	462a      	movgt	r2, r5
 8009cca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cce:	465a      	movle	r2, fp
 8009cd0:	462f      	mov	r7, r5
 8009cd2:	46d9      	mov	r9, fp
 8009cd4:	bfcc      	ite	gt
 8009cd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cda:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009cde:	464b      	mov	r3, r9
 8009ce0:	4652      	mov	r2, sl
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 fdc9 	bl	800087c <__aeabi_ddiv>
 8009cea:	ec41 0b10 	vmov	d0, r0, r1
 8009cee:	b005      	add	sp, #20
 8009cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cf4 <__copybits>:
 8009cf4:	3901      	subs	r1, #1
 8009cf6:	b570      	push	{r4, r5, r6, lr}
 8009cf8:	1149      	asrs	r1, r1, #5
 8009cfa:	6914      	ldr	r4, [r2, #16]
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	f102 0314 	add.w	r3, r2, #20
 8009d02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d0a:	1f05      	subs	r5, r0, #4
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	d30c      	bcc.n	8009d2a <__copybits+0x36>
 8009d10:	1aa3      	subs	r3, r4, r2
 8009d12:	3b11      	subs	r3, #17
 8009d14:	f023 0303 	bic.w	r3, r3, #3
 8009d18:	3211      	adds	r2, #17
 8009d1a:	42a2      	cmp	r2, r4
 8009d1c:	bf88      	it	hi
 8009d1e:	2300      	movhi	r3, #0
 8009d20:	4418      	add	r0, r3
 8009d22:	2300      	movs	r3, #0
 8009d24:	4288      	cmp	r0, r1
 8009d26:	d305      	bcc.n	8009d34 <__copybits+0x40>
 8009d28:	bd70      	pop	{r4, r5, r6, pc}
 8009d2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d32:	e7eb      	b.n	8009d0c <__copybits+0x18>
 8009d34:	f840 3b04 	str.w	r3, [r0], #4
 8009d38:	e7f4      	b.n	8009d24 <__copybits+0x30>

08009d3a <__any_on>:
 8009d3a:	f100 0214 	add.w	r2, r0, #20
 8009d3e:	6900      	ldr	r0, [r0, #16]
 8009d40:	114b      	asrs	r3, r1, #5
 8009d42:	4298      	cmp	r0, r3
 8009d44:	b510      	push	{r4, lr}
 8009d46:	db11      	blt.n	8009d6c <__any_on+0x32>
 8009d48:	dd0a      	ble.n	8009d60 <__any_on+0x26>
 8009d4a:	f011 011f 	ands.w	r1, r1, #31
 8009d4e:	d007      	beq.n	8009d60 <__any_on+0x26>
 8009d50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d54:	fa24 f001 	lsr.w	r0, r4, r1
 8009d58:	fa00 f101 	lsl.w	r1, r0, r1
 8009d5c:	428c      	cmp	r4, r1
 8009d5e:	d10b      	bne.n	8009d78 <__any_on+0x3e>
 8009d60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d803      	bhi.n	8009d70 <__any_on+0x36>
 8009d68:	2000      	movs	r0, #0
 8009d6a:	bd10      	pop	{r4, pc}
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	e7f7      	b.n	8009d60 <__any_on+0x26>
 8009d70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d0f5      	beq.n	8009d64 <__any_on+0x2a>
 8009d78:	2001      	movs	r0, #1
 8009d7a:	e7f6      	b.n	8009d6a <__any_on+0x30>

08009d7c <_strtol_l.isra.0>:
 8009d7c:	2b24      	cmp	r3, #36	@ 0x24
 8009d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d82:	4686      	mov	lr, r0
 8009d84:	4690      	mov	r8, r2
 8009d86:	d801      	bhi.n	8009d8c <_strtol_l.isra.0+0x10>
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d106      	bne.n	8009d9a <_strtol_l.isra.0+0x1e>
 8009d8c:	f7fe f840 	bl	8007e10 <__errno>
 8009d90:	2316      	movs	r3, #22
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	2000      	movs	r0, #0
 8009d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9a:	4834      	ldr	r0, [pc, #208]	@ (8009e6c <_strtol_l.isra.0+0xf0>)
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	462a      	mov	r2, r5
 8009da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009da4:	5d06      	ldrb	r6, [r0, r4]
 8009da6:	f016 0608 	ands.w	r6, r6, #8
 8009daa:	d1f8      	bne.n	8009d9e <_strtol_l.isra.0+0x22>
 8009dac:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dae:	d110      	bne.n	8009dd2 <_strtol_l.isra.0+0x56>
 8009db0:	782c      	ldrb	r4, [r5, #0]
 8009db2:	2601      	movs	r6, #1
 8009db4:	1c95      	adds	r5, r2, #2
 8009db6:	f033 0210 	bics.w	r2, r3, #16
 8009dba:	d115      	bne.n	8009de8 <_strtol_l.isra.0+0x6c>
 8009dbc:	2c30      	cmp	r4, #48	@ 0x30
 8009dbe:	d10d      	bne.n	8009ddc <_strtol_l.isra.0+0x60>
 8009dc0:	782a      	ldrb	r2, [r5, #0]
 8009dc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dc6:	2a58      	cmp	r2, #88	@ 0x58
 8009dc8:	d108      	bne.n	8009ddc <_strtol_l.isra.0+0x60>
 8009dca:	786c      	ldrb	r4, [r5, #1]
 8009dcc:	3502      	adds	r5, #2
 8009dce:	2310      	movs	r3, #16
 8009dd0:	e00a      	b.n	8009de8 <_strtol_l.isra.0+0x6c>
 8009dd2:	2c2b      	cmp	r4, #43	@ 0x2b
 8009dd4:	bf04      	itt	eq
 8009dd6:	782c      	ldrbeq	r4, [r5, #0]
 8009dd8:	1c95      	addeq	r5, r2, #2
 8009dda:	e7ec      	b.n	8009db6 <_strtol_l.isra.0+0x3a>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f6      	bne.n	8009dce <_strtol_l.isra.0+0x52>
 8009de0:	2c30      	cmp	r4, #48	@ 0x30
 8009de2:	bf14      	ite	ne
 8009de4:	230a      	movne	r3, #10
 8009de6:	2308      	moveq	r3, #8
 8009de8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009dec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009df0:	2200      	movs	r2, #0
 8009df2:	fbbc f9f3 	udiv	r9, ip, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009dfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e00:	2f09      	cmp	r7, #9
 8009e02:	d80f      	bhi.n	8009e24 <_strtol_l.isra.0+0xa8>
 8009e04:	463c      	mov	r4, r7
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	dd1b      	ble.n	8009e42 <_strtol_l.isra.0+0xc6>
 8009e0a:	1c57      	adds	r7, r2, #1
 8009e0c:	d007      	beq.n	8009e1e <_strtol_l.isra.0+0xa2>
 8009e0e:	4581      	cmp	r9, r0
 8009e10:	d314      	bcc.n	8009e3c <_strtol_l.isra.0+0xc0>
 8009e12:	d101      	bne.n	8009e18 <_strtol_l.isra.0+0x9c>
 8009e14:	45a2      	cmp	sl, r4
 8009e16:	db11      	blt.n	8009e3c <_strtol_l.isra.0+0xc0>
 8009e18:	fb00 4003 	mla	r0, r0, r3, r4
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e22:	e7eb      	b.n	8009dfc <_strtol_l.isra.0+0x80>
 8009e24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e28:	2f19      	cmp	r7, #25
 8009e2a:	d801      	bhi.n	8009e30 <_strtol_l.isra.0+0xb4>
 8009e2c:	3c37      	subs	r4, #55	@ 0x37
 8009e2e:	e7ea      	b.n	8009e06 <_strtol_l.isra.0+0x8a>
 8009e30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e34:	2f19      	cmp	r7, #25
 8009e36:	d804      	bhi.n	8009e42 <_strtol_l.isra.0+0xc6>
 8009e38:	3c57      	subs	r4, #87	@ 0x57
 8009e3a:	e7e4      	b.n	8009e06 <_strtol_l.isra.0+0x8a>
 8009e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e40:	e7ed      	b.n	8009e1e <_strtol_l.isra.0+0xa2>
 8009e42:	1c53      	adds	r3, r2, #1
 8009e44:	d108      	bne.n	8009e58 <_strtol_l.isra.0+0xdc>
 8009e46:	2322      	movs	r3, #34	@ 0x22
 8009e48:	f8ce 3000 	str.w	r3, [lr]
 8009e4c:	4660      	mov	r0, ip
 8009e4e:	f1b8 0f00 	cmp.w	r8, #0
 8009e52:	d0a0      	beq.n	8009d96 <_strtol_l.isra.0+0x1a>
 8009e54:	1e69      	subs	r1, r5, #1
 8009e56:	e006      	b.n	8009e66 <_strtol_l.isra.0+0xea>
 8009e58:	b106      	cbz	r6, 8009e5c <_strtol_l.isra.0+0xe0>
 8009e5a:	4240      	negs	r0, r0
 8009e5c:	f1b8 0f00 	cmp.w	r8, #0
 8009e60:	d099      	beq.n	8009d96 <_strtol_l.isra.0+0x1a>
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	d1f6      	bne.n	8009e54 <_strtol_l.isra.0+0xd8>
 8009e66:	f8c8 1000 	str.w	r1, [r8]
 8009e6a:	e794      	b.n	8009d96 <_strtol_l.isra.0+0x1a>
 8009e6c:	0800ad89 	.word	0x0800ad89

08009e70 <_strtol_r>:
 8009e70:	f7ff bf84 	b.w	8009d7c <_strtol_l.isra.0>

08009e74 <__ascii_wctomb>:
 8009e74:	4603      	mov	r3, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	b141      	cbz	r1, 8009e8c <__ascii_wctomb+0x18>
 8009e7a:	2aff      	cmp	r2, #255	@ 0xff
 8009e7c:	d904      	bls.n	8009e88 <__ascii_wctomb+0x14>
 8009e7e:	228a      	movs	r2, #138	@ 0x8a
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	f04f 30ff 	mov.w	r0, #4294967295
 8009e86:	4770      	bx	lr
 8009e88:	700a      	strb	r2, [r1, #0]
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	4770      	bx	lr

08009e8e <__ssputs_r>:
 8009e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e92:	688e      	ldr	r6, [r1, #8]
 8009e94:	461f      	mov	r7, r3
 8009e96:	42be      	cmp	r6, r7
 8009e98:	680b      	ldr	r3, [r1, #0]
 8009e9a:	4682      	mov	sl, r0
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	4690      	mov	r8, r2
 8009ea0:	d82d      	bhi.n	8009efe <__ssputs_r+0x70>
 8009ea2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ea6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009eaa:	d026      	beq.n	8009efa <__ssputs_r+0x6c>
 8009eac:	6965      	ldr	r5, [r4, #20]
 8009eae:	6909      	ldr	r1, [r1, #16]
 8009eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009eb4:	eba3 0901 	sub.w	r9, r3, r1
 8009eb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ebc:	1c7b      	adds	r3, r7, #1
 8009ebe:	444b      	add	r3, r9
 8009ec0:	106d      	asrs	r5, r5, #1
 8009ec2:	429d      	cmp	r5, r3
 8009ec4:	bf38      	it	cc
 8009ec6:	461d      	movcc	r5, r3
 8009ec8:	0553      	lsls	r3, r2, #21
 8009eca:	d527      	bpl.n	8009f1c <__ssputs_r+0x8e>
 8009ecc:	4629      	mov	r1, r5
 8009ece:	f7ff fa0d 	bl	80092ec <_malloc_r>
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	b360      	cbz	r0, 8009f30 <__ssputs_r+0xa2>
 8009ed6:	6921      	ldr	r1, [r4, #16]
 8009ed8:	464a      	mov	r2, r9
 8009eda:	f7fd ffc6 	bl	8007e6a <memcpy>
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	6126      	str	r6, [r4, #16]
 8009eec:	6165      	str	r5, [r4, #20]
 8009eee:	444e      	add	r6, r9
 8009ef0:	eba5 0509 	sub.w	r5, r5, r9
 8009ef4:	6026      	str	r6, [r4, #0]
 8009ef6:	60a5      	str	r5, [r4, #8]
 8009ef8:	463e      	mov	r6, r7
 8009efa:	42be      	cmp	r6, r7
 8009efc:	d900      	bls.n	8009f00 <__ssputs_r+0x72>
 8009efe:	463e      	mov	r6, r7
 8009f00:	6820      	ldr	r0, [r4, #0]
 8009f02:	4632      	mov	r2, r6
 8009f04:	4641      	mov	r1, r8
 8009f06:	f000 fbe1 	bl	800a6cc <memmove>
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	1b9b      	subs	r3, r3, r6
 8009f0e:	60a3      	str	r3, [r4, #8]
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	4433      	add	r3, r6
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	2000      	movs	r0, #0
 8009f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1c:	462a      	mov	r2, r5
 8009f1e:	f000 fc1a 	bl	800a756 <_realloc_r>
 8009f22:	4606      	mov	r6, r0
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1e0      	bne.n	8009eea <__ssputs_r+0x5c>
 8009f28:	6921      	ldr	r1, [r4, #16]
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	f7fe fe30 	bl	8008b90 <_free_r>
 8009f30:	230c      	movs	r3, #12
 8009f32:	f8ca 3000 	str.w	r3, [sl]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f42:	e7e9      	b.n	8009f18 <__ssputs_r+0x8a>

08009f44 <_svfiprintf_r>:
 8009f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	4698      	mov	r8, r3
 8009f4a:	898b      	ldrh	r3, [r1, #12]
 8009f4c:	061b      	lsls	r3, r3, #24
 8009f4e:	b09d      	sub	sp, #116	@ 0x74
 8009f50:	4607      	mov	r7, r0
 8009f52:	460d      	mov	r5, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	d510      	bpl.n	8009f7a <_svfiprintf_r+0x36>
 8009f58:	690b      	ldr	r3, [r1, #16]
 8009f5a:	b973      	cbnz	r3, 8009f7a <_svfiprintf_r+0x36>
 8009f5c:	2140      	movs	r1, #64	@ 0x40
 8009f5e:	f7ff f9c5 	bl	80092ec <_malloc_r>
 8009f62:	6028      	str	r0, [r5, #0]
 8009f64:	6128      	str	r0, [r5, #16]
 8009f66:	b930      	cbnz	r0, 8009f76 <_svfiprintf_r+0x32>
 8009f68:	230c      	movs	r3, #12
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b01d      	add	sp, #116	@ 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	2340      	movs	r3, #64	@ 0x40
 8009f78:	616b      	str	r3, [r5, #20]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f7e:	2320      	movs	r3, #32
 8009f80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f88:	2330      	movs	r3, #48	@ 0x30
 8009f8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a128 <_svfiprintf_r+0x1e4>
 8009f8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f92:	f04f 0901 	mov.w	r9, #1
 8009f96:	4623      	mov	r3, r4
 8009f98:	469a      	mov	sl, r3
 8009f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f9e:	b10a      	cbz	r2, 8009fa4 <_svfiprintf_r+0x60>
 8009fa0:	2a25      	cmp	r2, #37	@ 0x25
 8009fa2:	d1f9      	bne.n	8009f98 <_svfiprintf_r+0x54>
 8009fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fa8:	d00b      	beq.n	8009fc2 <_svfiprintf_r+0x7e>
 8009faa:	465b      	mov	r3, fp
 8009fac:	4622      	mov	r2, r4
 8009fae:	4629      	mov	r1, r5
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f7ff ff6c 	bl	8009e8e <__ssputs_r>
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	f000 80a7 	beq.w	800a10a <_svfiprintf_r+0x1c6>
 8009fbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fbe:	445a      	add	r2, fp
 8009fc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 809f 	beq.w	800a10a <_svfiprintf_r+0x1c6>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fd6:	f10a 0a01 	add.w	sl, sl, #1
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	9307      	str	r3, [sp, #28]
 8009fde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fe2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fe4:	4654      	mov	r4, sl
 8009fe6:	2205      	movs	r2, #5
 8009fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fec:	484e      	ldr	r0, [pc, #312]	@ (800a128 <_svfiprintf_r+0x1e4>)
 8009fee:	f7f6 f907 	bl	8000200 <memchr>
 8009ff2:	9a04      	ldr	r2, [sp, #16]
 8009ff4:	b9d8      	cbnz	r0, 800a02e <_svfiprintf_r+0xea>
 8009ff6:	06d0      	lsls	r0, r2, #27
 8009ff8:	bf44      	itt	mi
 8009ffa:	2320      	movmi	r3, #32
 8009ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a000:	0711      	lsls	r1, r2, #28
 800a002:	bf44      	itt	mi
 800a004:	232b      	movmi	r3, #43	@ 0x2b
 800a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a00a:	f89a 3000 	ldrb.w	r3, [sl]
 800a00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a010:	d015      	beq.n	800a03e <_svfiprintf_r+0xfa>
 800a012:	9a07      	ldr	r2, [sp, #28]
 800a014:	4654      	mov	r4, sl
 800a016:	2000      	movs	r0, #0
 800a018:	f04f 0c0a 	mov.w	ip, #10
 800a01c:	4621      	mov	r1, r4
 800a01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a022:	3b30      	subs	r3, #48	@ 0x30
 800a024:	2b09      	cmp	r3, #9
 800a026:	d94b      	bls.n	800a0c0 <_svfiprintf_r+0x17c>
 800a028:	b1b0      	cbz	r0, 800a058 <_svfiprintf_r+0x114>
 800a02a:	9207      	str	r2, [sp, #28]
 800a02c:	e014      	b.n	800a058 <_svfiprintf_r+0x114>
 800a02e:	eba0 0308 	sub.w	r3, r0, r8
 800a032:	fa09 f303 	lsl.w	r3, r9, r3
 800a036:	4313      	orrs	r3, r2
 800a038:	9304      	str	r3, [sp, #16]
 800a03a:	46a2      	mov	sl, r4
 800a03c:	e7d2      	b.n	8009fe4 <_svfiprintf_r+0xa0>
 800a03e:	9b03      	ldr	r3, [sp, #12]
 800a040:	1d19      	adds	r1, r3, #4
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	9103      	str	r1, [sp, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	bfbb      	ittet	lt
 800a04a:	425b      	neglt	r3, r3
 800a04c:	f042 0202 	orrlt.w	r2, r2, #2
 800a050:	9307      	strge	r3, [sp, #28]
 800a052:	9307      	strlt	r3, [sp, #28]
 800a054:	bfb8      	it	lt
 800a056:	9204      	strlt	r2, [sp, #16]
 800a058:	7823      	ldrb	r3, [r4, #0]
 800a05a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a05c:	d10a      	bne.n	800a074 <_svfiprintf_r+0x130>
 800a05e:	7863      	ldrb	r3, [r4, #1]
 800a060:	2b2a      	cmp	r3, #42	@ 0x2a
 800a062:	d132      	bne.n	800a0ca <_svfiprintf_r+0x186>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	1d1a      	adds	r2, r3, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	9203      	str	r2, [sp, #12]
 800a06c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a070:	3402      	adds	r4, #2
 800a072:	9305      	str	r3, [sp, #20]
 800a074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a138 <_svfiprintf_r+0x1f4>
 800a078:	7821      	ldrb	r1, [r4, #0]
 800a07a:	2203      	movs	r2, #3
 800a07c:	4650      	mov	r0, sl
 800a07e:	f7f6 f8bf 	bl	8000200 <memchr>
 800a082:	b138      	cbz	r0, 800a094 <_svfiprintf_r+0x150>
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	eba0 000a 	sub.w	r0, r0, sl
 800a08a:	2240      	movs	r2, #64	@ 0x40
 800a08c:	4082      	lsls	r2, r0
 800a08e:	4313      	orrs	r3, r2
 800a090:	3401      	adds	r4, #1
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a098:	4824      	ldr	r0, [pc, #144]	@ (800a12c <_svfiprintf_r+0x1e8>)
 800a09a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a09e:	2206      	movs	r2, #6
 800a0a0:	f7f6 f8ae 	bl	8000200 <memchr>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d036      	beq.n	800a116 <_svfiprintf_r+0x1d2>
 800a0a8:	4b21      	ldr	r3, [pc, #132]	@ (800a130 <_svfiprintf_r+0x1ec>)
 800a0aa:	bb1b      	cbnz	r3, 800a0f4 <_svfiprintf_r+0x1b0>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	3307      	adds	r3, #7
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	9303      	str	r3, [sp, #12]
 800a0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ba:	4433      	add	r3, r6
 800a0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0be:	e76a      	b.n	8009f96 <_svfiprintf_r+0x52>
 800a0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	e7a8      	b.n	800a01c <_svfiprintf_r+0xd8>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	3401      	adds	r4, #1
 800a0ce:	9305      	str	r3, [sp, #20]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	f04f 0c0a 	mov.w	ip, #10
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0dc:	3a30      	subs	r2, #48	@ 0x30
 800a0de:	2a09      	cmp	r2, #9
 800a0e0:	d903      	bls.n	800a0ea <_svfiprintf_r+0x1a6>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0c6      	beq.n	800a074 <_svfiprintf_r+0x130>
 800a0e6:	9105      	str	r1, [sp, #20]
 800a0e8:	e7c4      	b.n	800a074 <_svfiprintf_r+0x130>
 800a0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e7f0      	b.n	800a0d6 <_svfiprintf_r+0x192>
 800a0f4:	ab03      	add	r3, sp, #12
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a134 <_svfiprintf_r+0x1f0>)
 800a0fc:	a904      	add	r1, sp, #16
 800a0fe:	4638      	mov	r0, r7
 800a100:	f7fc fec0 	bl	8006e84 <_printf_float>
 800a104:	1c42      	adds	r2, r0, #1
 800a106:	4606      	mov	r6, r0
 800a108:	d1d6      	bne.n	800a0b8 <_svfiprintf_r+0x174>
 800a10a:	89ab      	ldrh	r3, [r5, #12]
 800a10c:	065b      	lsls	r3, r3, #25
 800a10e:	f53f af2d 	bmi.w	8009f6c <_svfiprintf_r+0x28>
 800a112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a114:	e72c      	b.n	8009f70 <_svfiprintf_r+0x2c>
 800a116:	ab03      	add	r3, sp, #12
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	462a      	mov	r2, r5
 800a11c:	4b05      	ldr	r3, [pc, #20]	@ (800a134 <_svfiprintf_r+0x1f0>)
 800a11e:	a904      	add	r1, sp, #16
 800a120:	4638      	mov	r0, r7
 800a122:	f7fd f947 	bl	80073b4 <_printf_i>
 800a126:	e7ed      	b.n	800a104 <_svfiprintf_r+0x1c0>
 800a128:	0800ac27 	.word	0x0800ac27
 800a12c:	0800ac31 	.word	0x0800ac31
 800a130:	08006e85 	.word	0x08006e85
 800a134:	08009e8f 	.word	0x08009e8f
 800a138:	0800ac2d 	.word	0x0800ac2d

0800a13c <__sfputc_r>:
 800a13c:	6893      	ldr	r3, [r2, #8]
 800a13e:	3b01      	subs	r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	b410      	push	{r4}
 800a144:	6093      	str	r3, [r2, #8]
 800a146:	da08      	bge.n	800a15a <__sfputc_r+0x1e>
 800a148:	6994      	ldr	r4, [r2, #24]
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	db01      	blt.n	800a152 <__sfputc_r+0x16>
 800a14e:	290a      	cmp	r1, #10
 800a150:	d103      	bne.n	800a15a <__sfputc_r+0x1e>
 800a152:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a156:	f000 ba25 	b.w	800a5a4 <__swbuf_r>
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	1c58      	adds	r0, r3, #1
 800a15e:	6010      	str	r0, [r2, #0]
 800a160:	7019      	strb	r1, [r3, #0]
 800a162:	4608      	mov	r0, r1
 800a164:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <__sfputs_r>:
 800a16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	4614      	mov	r4, r2
 800a172:	18d5      	adds	r5, r2, r3
 800a174:	42ac      	cmp	r4, r5
 800a176:	d101      	bne.n	800a17c <__sfputs_r+0x12>
 800a178:	2000      	movs	r0, #0
 800a17a:	e007      	b.n	800a18c <__sfputs_r+0x22>
 800a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a180:	463a      	mov	r2, r7
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ffda 	bl	800a13c <__sfputc_r>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d1f3      	bne.n	800a174 <__sfputs_r+0xa>
 800a18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a190 <_vfiprintf_r>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	460d      	mov	r5, r1
 800a196:	b09d      	sub	sp, #116	@ 0x74
 800a198:	4614      	mov	r4, r2
 800a19a:	4698      	mov	r8, r3
 800a19c:	4606      	mov	r6, r0
 800a19e:	b118      	cbz	r0, 800a1a8 <_vfiprintf_r+0x18>
 800a1a0:	6a03      	ldr	r3, [r0, #32]
 800a1a2:	b90b      	cbnz	r3, 800a1a8 <_vfiprintf_r+0x18>
 800a1a4:	f7fd fcbe 	bl	8007b24 <__sinit>
 800a1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1aa:	07d9      	lsls	r1, r3, #31
 800a1ac:	d405      	bmi.n	800a1ba <_vfiprintf_r+0x2a>
 800a1ae:	89ab      	ldrh	r3, [r5, #12]
 800a1b0:	059a      	lsls	r2, r3, #22
 800a1b2:	d402      	bmi.n	800a1ba <_vfiprintf_r+0x2a>
 800a1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1b6:	f7fd fe56 	bl	8007e66 <__retarget_lock_acquire_recursive>
 800a1ba:	89ab      	ldrh	r3, [r5, #12]
 800a1bc:	071b      	lsls	r3, r3, #28
 800a1be:	d501      	bpl.n	800a1c4 <_vfiprintf_r+0x34>
 800a1c0:	692b      	ldr	r3, [r5, #16]
 800a1c2:	b99b      	cbnz	r3, 800a1ec <_vfiprintf_r+0x5c>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 fa2a 	bl	800a620 <__swsetup_r>
 800a1cc:	b170      	cbz	r0, 800a1ec <_vfiprintf_r+0x5c>
 800a1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1d0:	07dc      	lsls	r4, r3, #31
 800a1d2:	d504      	bpl.n	800a1de <_vfiprintf_r+0x4e>
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	b01d      	add	sp, #116	@ 0x74
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	0598      	lsls	r0, r3, #22
 800a1e2:	d4f7      	bmi.n	800a1d4 <_vfiprintf_r+0x44>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1e6:	f7fd fe3f 	bl	8007e68 <__retarget_lock_release_recursive>
 800a1ea:	e7f3      	b.n	800a1d4 <_vfiprintf_r+0x44>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1fa:	2330      	movs	r3, #48	@ 0x30
 800a1fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3ac <_vfiprintf_r+0x21c>
 800a200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a204:	f04f 0901 	mov.w	r9, #1
 800a208:	4623      	mov	r3, r4
 800a20a:	469a      	mov	sl, r3
 800a20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a210:	b10a      	cbz	r2, 800a216 <_vfiprintf_r+0x86>
 800a212:	2a25      	cmp	r2, #37	@ 0x25
 800a214:	d1f9      	bne.n	800a20a <_vfiprintf_r+0x7a>
 800a216:	ebba 0b04 	subs.w	fp, sl, r4
 800a21a:	d00b      	beq.n	800a234 <_vfiprintf_r+0xa4>
 800a21c:	465b      	mov	r3, fp
 800a21e:	4622      	mov	r2, r4
 800a220:	4629      	mov	r1, r5
 800a222:	4630      	mov	r0, r6
 800a224:	f7ff ffa1 	bl	800a16a <__sfputs_r>
 800a228:	3001      	adds	r0, #1
 800a22a:	f000 80a7 	beq.w	800a37c <_vfiprintf_r+0x1ec>
 800a22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a230:	445a      	add	r2, fp
 800a232:	9209      	str	r2, [sp, #36]	@ 0x24
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 809f 	beq.w	800a37c <_vfiprintf_r+0x1ec>
 800a23e:	2300      	movs	r3, #0
 800a240:	f04f 32ff 	mov.w	r2, #4294967295
 800a244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a254:	931a      	str	r3, [sp, #104]	@ 0x68
 800a256:	4654      	mov	r4, sl
 800a258:	2205      	movs	r2, #5
 800a25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25e:	4853      	ldr	r0, [pc, #332]	@ (800a3ac <_vfiprintf_r+0x21c>)
 800a260:	f7f5 ffce 	bl	8000200 <memchr>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	b9d8      	cbnz	r0, 800a2a0 <_vfiprintf_r+0x110>
 800a268:	06d1      	lsls	r1, r2, #27
 800a26a:	bf44      	itt	mi
 800a26c:	2320      	movmi	r3, #32
 800a26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a272:	0713      	lsls	r3, r2, #28
 800a274:	bf44      	itt	mi
 800a276:	232b      	movmi	r3, #43	@ 0x2b
 800a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a27c:	f89a 3000 	ldrb.w	r3, [sl]
 800a280:	2b2a      	cmp	r3, #42	@ 0x2a
 800a282:	d015      	beq.n	800a2b0 <_vfiprintf_r+0x120>
 800a284:	9a07      	ldr	r2, [sp, #28]
 800a286:	4654      	mov	r4, sl
 800a288:	2000      	movs	r0, #0
 800a28a:	f04f 0c0a 	mov.w	ip, #10
 800a28e:	4621      	mov	r1, r4
 800a290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a294:	3b30      	subs	r3, #48	@ 0x30
 800a296:	2b09      	cmp	r3, #9
 800a298:	d94b      	bls.n	800a332 <_vfiprintf_r+0x1a2>
 800a29a:	b1b0      	cbz	r0, 800a2ca <_vfiprintf_r+0x13a>
 800a29c:	9207      	str	r2, [sp, #28]
 800a29e:	e014      	b.n	800a2ca <_vfiprintf_r+0x13a>
 800a2a0:	eba0 0308 	sub.w	r3, r0, r8
 800a2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	46a2      	mov	sl, r4
 800a2ae:	e7d2      	b.n	800a256 <_vfiprintf_r+0xc6>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	1d19      	adds	r1, r3, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	9103      	str	r1, [sp, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfbb      	ittet	lt
 800a2bc:	425b      	neglt	r3, r3
 800a2be:	f042 0202 	orrlt.w	r2, r2, #2
 800a2c2:	9307      	strge	r3, [sp, #28]
 800a2c4:	9307      	strlt	r3, [sp, #28]
 800a2c6:	bfb8      	it	lt
 800a2c8:	9204      	strlt	r2, [sp, #16]
 800a2ca:	7823      	ldrb	r3, [r4, #0]
 800a2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ce:	d10a      	bne.n	800a2e6 <_vfiprintf_r+0x156>
 800a2d0:	7863      	ldrb	r3, [r4, #1]
 800a2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2d4:	d132      	bne.n	800a33c <_vfiprintf_r+0x1ac>
 800a2d6:	9b03      	ldr	r3, [sp, #12]
 800a2d8:	1d1a      	adds	r2, r3, #4
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	9203      	str	r2, [sp, #12]
 800a2de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2e2:	3402      	adds	r4, #2
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3bc <_vfiprintf_r+0x22c>
 800a2ea:	7821      	ldrb	r1, [r4, #0]
 800a2ec:	2203      	movs	r2, #3
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	f7f5 ff86 	bl	8000200 <memchr>
 800a2f4:	b138      	cbz	r0, 800a306 <_vfiprintf_r+0x176>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	eba0 000a 	sub.w	r0, r0, sl
 800a2fc:	2240      	movs	r2, #64	@ 0x40
 800a2fe:	4082      	lsls	r2, r0
 800a300:	4313      	orrs	r3, r2
 800a302:	3401      	adds	r4, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30a:	4829      	ldr	r0, [pc, #164]	@ (800a3b0 <_vfiprintf_r+0x220>)
 800a30c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a310:	2206      	movs	r2, #6
 800a312:	f7f5 ff75 	bl	8000200 <memchr>
 800a316:	2800      	cmp	r0, #0
 800a318:	d03f      	beq.n	800a39a <_vfiprintf_r+0x20a>
 800a31a:	4b26      	ldr	r3, [pc, #152]	@ (800a3b4 <_vfiprintf_r+0x224>)
 800a31c:	bb1b      	cbnz	r3, 800a366 <_vfiprintf_r+0x1d6>
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	3307      	adds	r3, #7
 800a322:	f023 0307 	bic.w	r3, r3, #7
 800a326:	3308      	adds	r3, #8
 800a328:	9303      	str	r3, [sp, #12]
 800a32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32c:	443b      	add	r3, r7
 800a32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a330:	e76a      	b.n	800a208 <_vfiprintf_r+0x78>
 800a332:	fb0c 3202 	mla	r2, ip, r2, r3
 800a336:	460c      	mov	r4, r1
 800a338:	2001      	movs	r0, #1
 800a33a:	e7a8      	b.n	800a28e <_vfiprintf_r+0xfe>
 800a33c:	2300      	movs	r3, #0
 800a33e:	3401      	adds	r4, #1
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	4619      	mov	r1, r3
 800a344:	f04f 0c0a 	mov.w	ip, #10
 800a348:	4620      	mov	r0, r4
 800a34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34e:	3a30      	subs	r2, #48	@ 0x30
 800a350:	2a09      	cmp	r2, #9
 800a352:	d903      	bls.n	800a35c <_vfiprintf_r+0x1cc>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0c6      	beq.n	800a2e6 <_vfiprintf_r+0x156>
 800a358:	9105      	str	r1, [sp, #20]
 800a35a:	e7c4      	b.n	800a2e6 <_vfiprintf_r+0x156>
 800a35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a360:	4604      	mov	r4, r0
 800a362:	2301      	movs	r3, #1
 800a364:	e7f0      	b.n	800a348 <_vfiprintf_r+0x1b8>
 800a366:	ab03      	add	r3, sp, #12
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	462a      	mov	r2, r5
 800a36c:	4b12      	ldr	r3, [pc, #72]	@ (800a3b8 <_vfiprintf_r+0x228>)
 800a36e:	a904      	add	r1, sp, #16
 800a370:	4630      	mov	r0, r6
 800a372:	f7fc fd87 	bl	8006e84 <_printf_float>
 800a376:	4607      	mov	r7, r0
 800a378:	1c78      	adds	r0, r7, #1
 800a37a:	d1d6      	bne.n	800a32a <_vfiprintf_r+0x19a>
 800a37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a37e:	07d9      	lsls	r1, r3, #31
 800a380:	d405      	bmi.n	800a38e <_vfiprintf_r+0x1fe>
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	059a      	lsls	r2, r3, #22
 800a386:	d402      	bmi.n	800a38e <_vfiprintf_r+0x1fe>
 800a388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a38a:	f7fd fd6d 	bl	8007e68 <__retarget_lock_release_recursive>
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	065b      	lsls	r3, r3, #25
 800a392:	f53f af1f 	bmi.w	800a1d4 <_vfiprintf_r+0x44>
 800a396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a398:	e71e      	b.n	800a1d8 <_vfiprintf_r+0x48>
 800a39a:	ab03      	add	r3, sp, #12
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	462a      	mov	r2, r5
 800a3a0:	4b05      	ldr	r3, [pc, #20]	@ (800a3b8 <_vfiprintf_r+0x228>)
 800a3a2:	a904      	add	r1, sp, #16
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7fd f805 	bl	80073b4 <_printf_i>
 800a3aa:	e7e4      	b.n	800a376 <_vfiprintf_r+0x1e6>
 800a3ac:	0800ac27 	.word	0x0800ac27
 800a3b0:	0800ac31 	.word	0x0800ac31
 800a3b4:	08006e85 	.word	0x08006e85
 800a3b8:	0800a16b 	.word	0x0800a16b
 800a3bc:	0800ac2d 	.word	0x0800ac2d

0800a3c0 <__sflush_r>:
 800a3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c8:	0716      	lsls	r6, r2, #28
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	d454      	bmi.n	800a47a <__sflush_r+0xba>
 800a3d0:	684b      	ldr	r3, [r1, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dc02      	bgt.n	800a3dc <__sflush_r+0x1c>
 800a3d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	dd48      	ble.n	800a46e <__sflush_r+0xae>
 800a3dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	d045      	beq.n	800a46e <__sflush_r+0xae>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3e8:	682f      	ldr	r7, [r5, #0]
 800a3ea:	6a21      	ldr	r1, [r4, #32]
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	d030      	beq.n	800a452 <__sflush_r+0x92>
 800a3f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	0759      	lsls	r1, r3, #29
 800a3f6:	d505      	bpl.n	800a404 <__sflush_r+0x44>
 800a3f8:	6863      	ldr	r3, [r4, #4]
 800a3fa:	1ad2      	subs	r2, r2, r3
 800a3fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3fe:	b10b      	cbz	r3, 800a404 <__sflush_r+0x44>
 800a400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a402:	1ad2      	subs	r2, r2, r3
 800a404:	2300      	movs	r3, #0
 800a406:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a408:	6a21      	ldr	r1, [r4, #32]
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b0      	blx	r6
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	d106      	bne.n	800a422 <__sflush_r+0x62>
 800a414:	6829      	ldr	r1, [r5, #0]
 800a416:	291d      	cmp	r1, #29
 800a418:	d82b      	bhi.n	800a472 <__sflush_r+0xb2>
 800a41a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c4 <__sflush_r+0x104>)
 800a41c:	40ca      	lsrs	r2, r1
 800a41e:	07d6      	lsls	r6, r2, #31
 800a420:	d527      	bpl.n	800a472 <__sflush_r+0xb2>
 800a422:	2200      	movs	r2, #0
 800a424:	6062      	str	r2, [r4, #4]
 800a426:	04d9      	lsls	r1, r3, #19
 800a428:	6922      	ldr	r2, [r4, #16]
 800a42a:	6022      	str	r2, [r4, #0]
 800a42c:	d504      	bpl.n	800a438 <__sflush_r+0x78>
 800a42e:	1c42      	adds	r2, r0, #1
 800a430:	d101      	bne.n	800a436 <__sflush_r+0x76>
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	b903      	cbnz	r3, 800a438 <__sflush_r+0x78>
 800a436:	6560      	str	r0, [r4, #84]	@ 0x54
 800a438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a43a:	602f      	str	r7, [r5, #0]
 800a43c:	b1b9      	cbz	r1, 800a46e <__sflush_r+0xae>
 800a43e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a442:	4299      	cmp	r1, r3
 800a444:	d002      	beq.n	800a44c <__sflush_r+0x8c>
 800a446:	4628      	mov	r0, r5
 800a448:	f7fe fba2 	bl	8008b90 <_free_r>
 800a44c:	2300      	movs	r3, #0
 800a44e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a450:	e00d      	b.n	800a46e <__sflush_r+0xae>
 800a452:	2301      	movs	r3, #1
 800a454:	4628      	mov	r0, r5
 800a456:	47b0      	blx	r6
 800a458:	4602      	mov	r2, r0
 800a45a:	1c50      	adds	r0, r2, #1
 800a45c:	d1c9      	bne.n	800a3f2 <__sflush_r+0x32>
 800a45e:	682b      	ldr	r3, [r5, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0c6      	beq.n	800a3f2 <__sflush_r+0x32>
 800a464:	2b1d      	cmp	r3, #29
 800a466:	d001      	beq.n	800a46c <__sflush_r+0xac>
 800a468:	2b16      	cmp	r3, #22
 800a46a:	d11e      	bne.n	800a4aa <__sflush_r+0xea>
 800a46c:	602f      	str	r7, [r5, #0]
 800a46e:	2000      	movs	r0, #0
 800a470:	e022      	b.n	800a4b8 <__sflush_r+0xf8>
 800a472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a476:	b21b      	sxth	r3, r3
 800a478:	e01b      	b.n	800a4b2 <__sflush_r+0xf2>
 800a47a:	690f      	ldr	r7, [r1, #16]
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	d0f6      	beq.n	800a46e <__sflush_r+0xae>
 800a480:	0793      	lsls	r3, r2, #30
 800a482:	680e      	ldr	r6, [r1, #0]
 800a484:	bf08      	it	eq
 800a486:	694b      	ldreq	r3, [r1, #20]
 800a488:	600f      	str	r7, [r1, #0]
 800a48a:	bf18      	it	ne
 800a48c:	2300      	movne	r3, #0
 800a48e:	eba6 0807 	sub.w	r8, r6, r7
 800a492:	608b      	str	r3, [r1, #8]
 800a494:	f1b8 0f00 	cmp.w	r8, #0
 800a498:	dde9      	ble.n	800a46e <__sflush_r+0xae>
 800a49a:	6a21      	ldr	r1, [r4, #32]
 800a49c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a49e:	4643      	mov	r3, r8
 800a4a0:	463a      	mov	r2, r7
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b0      	blx	r6
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	dc08      	bgt.n	800a4bc <__sflush_r+0xfc>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4bc:	4407      	add	r7, r0
 800a4be:	eba8 0800 	sub.w	r8, r8, r0
 800a4c2:	e7e7      	b.n	800a494 <__sflush_r+0xd4>
 800a4c4:	20400001 	.word	0x20400001

0800a4c8 <_fflush_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	690b      	ldr	r3, [r1, #16]
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	b913      	cbnz	r3, 800a4d8 <_fflush_r+0x10>
 800a4d2:	2500      	movs	r5, #0
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	b118      	cbz	r0, 800a4e2 <_fflush_r+0x1a>
 800a4da:	6a03      	ldr	r3, [r0, #32]
 800a4dc:	b90b      	cbnz	r3, 800a4e2 <_fflush_r+0x1a>
 800a4de:	f7fd fb21 	bl	8007b24 <__sinit>
 800a4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0f3      	beq.n	800a4d2 <_fflush_r+0xa>
 800a4ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4ec:	07d0      	lsls	r0, r2, #31
 800a4ee:	d404      	bmi.n	800a4fa <_fflush_r+0x32>
 800a4f0:	0599      	lsls	r1, r3, #22
 800a4f2:	d402      	bmi.n	800a4fa <_fflush_r+0x32>
 800a4f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4f6:	f7fd fcb6 	bl	8007e66 <__retarget_lock_acquire_recursive>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	f7ff ff5f 	bl	800a3c0 <__sflush_r>
 800a502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a504:	07da      	lsls	r2, r3, #31
 800a506:	4605      	mov	r5, r0
 800a508:	d4e4      	bmi.n	800a4d4 <_fflush_r+0xc>
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	059b      	lsls	r3, r3, #22
 800a50e:	d4e1      	bmi.n	800a4d4 <_fflush_r+0xc>
 800a510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a512:	f7fd fca9 	bl	8007e68 <__retarget_lock_release_recursive>
 800a516:	e7dd      	b.n	800a4d4 <_fflush_r+0xc>

0800a518 <fiprintf>:
 800a518:	b40e      	push	{r1, r2, r3}
 800a51a:	b503      	push	{r0, r1, lr}
 800a51c:	4601      	mov	r1, r0
 800a51e:	ab03      	add	r3, sp, #12
 800a520:	4805      	ldr	r0, [pc, #20]	@ (800a538 <fiprintf+0x20>)
 800a522:	f853 2b04 	ldr.w	r2, [r3], #4
 800a526:	6800      	ldr	r0, [r0, #0]
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	f7ff fe31 	bl	800a190 <_vfiprintf_r>
 800a52e:	b002      	add	sp, #8
 800a530:	f85d eb04 	ldr.w	lr, [sp], #4
 800a534:	b003      	add	sp, #12
 800a536:	4770      	bx	lr
 800a538:	20000188 	.word	0x20000188

0800a53c <_putc_r>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	460d      	mov	r5, r1
 800a540:	4614      	mov	r4, r2
 800a542:	4606      	mov	r6, r0
 800a544:	b118      	cbz	r0, 800a54e <_putc_r+0x12>
 800a546:	6a03      	ldr	r3, [r0, #32]
 800a548:	b90b      	cbnz	r3, 800a54e <_putc_r+0x12>
 800a54a:	f7fd faeb 	bl	8007b24 <__sinit>
 800a54e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a550:	07d8      	lsls	r0, r3, #31
 800a552:	d405      	bmi.n	800a560 <_putc_r+0x24>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	0599      	lsls	r1, r3, #22
 800a558:	d402      	bmi.n	800a560 <_putc_r+0x24>
 800a55a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a55c:	f7fd fc83 	bl	8007e66 <__retarget_lock_acquire_recursive>
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	3b01      	subs	r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	60a3      	str	r3, [r4, #8]
 800a568:	da05      	bge.n	800a576 <_putc_r+0x3a>
 800a56a:	69a2      	ldr	r2, [r4, #24]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	db12      	blt.n	800a596 <_putc_r+0x5a>
 800a570:	b2eb      	uxtb	r3, r5
 800a572:	2b0a      	cmp	r3, #10
 800a574:	d00f      	beq.n	800a596 <_putc_r+0x5a>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	6022      	str	r2, [r4, #0]
 800a57c:	701d      	strb	r5, [r3, #0]
 800a57e:	b2ed      	uxtb	r5, r5
 800a580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a582:	07da      	lsls	r2, r3, #31
 800a584:	d405      	bmi.n	800a592 <_putc_r+0x56>
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	059b      	lsls	r3, r3, #22
 800a58a:	d402      	bmi.n	800a592 <_putc_r+0x56>
 800a58c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a58e:	f7fd fc6b 	bl	8007e68 <__retarget_lock_release_recursive>
 800a592:	4628      	mov	r0, r5
 800a594:	bd70      	pop	{r4, r5, r6, pc}
 800a596:	4629      	mov	r1, r5
 800a598:	4622      	mov	r2, r4
 800a59a:	4630      	mov	r0, r6
 800a59c:	f000 f802 	bl	800a5a4 <__swbuf_r>
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	e7ed      	b.n	800a580 <_putc_r+0x44>

0800a5a4 <__swbuf_r>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	460e      	mov	r6, r1
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	b118      	cbz	r0, 800a5b6 <__swbuf_r+0x12>
 800a5ae:	6a03      	ldr	r3, [r0, #32]
 800a5b0:	b90b      	cbnz	r3, 800a5b6 <__swbuf_r+0x12>
 800a5b2:	f7fd fab7 	bl	8007b24 <__sinit>
 800a5b6:	69a3      	ldr	r3, [r4, #24]
 800a5b8:	60a3      	str	r3, [r4, #8]
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	071a      	lsls	r2, r3, #28
 800a5be:	d501      	bpl.n	800a5c4 <__swbuf_r+0x20>
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	b943      	cbnz	r3, 800a5d6 <__swbuf_r+0x32>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 f82a 	bl	800a620 <__swsetup_r>
 800a5cc:	b118      	cbz	r0, 800a5d6 <__swbuf_r+0x32>
 800a5ce:	f04f 37ff 	mov.w	r7, #4294967295
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	1a98      	subs	r0, r3, r2
 800a5dc:	6963      	ldr	r3, [r4, #20]
 800a5de:	b2f6      	uxtb	r6, r6
 800a5e0:	4283      	cmp	r3, r0
 800a5e2:	4637      	mov	r7, r6
 800a5e4:	dc05      	bgt.n	800a5f2 <__swbuf_r+0x4e>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f7ff ff6d 	bl	800a4c8 <_fflush_r>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d1ed      	bne.n	800a5ce <__swbuf_r+0x2a>
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	60a3      	str	r3, [r4, #8]
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	6022      	str	r2, [r4, #0]
 800a5fe:	701e      	strb	r6, [r3, #0]
 800a600:	6962      	ldr	r2, [r4, #20]
 800a602:	1c43      	adds	r3, r0, #1
 800a604:	429a      	cmp	r2, r3
 800a606:	d004      	beq.n	800a612 <__swbuf_r+0x6e>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	07db      	lsls	r3, r3, #31
 800a60c:	d5e1      	bpl.n	800a5d2 <__swbuf_r+0x2e>
 800a60e:	2e0a      	cmp	r6, #10
 800a610:	d1df      	bne.n	800a5d2 <__swbuf_r+0x2e>
 800a612:	4621      	mov	r1, r4
 800a614:	4628      	mov	r0, r5
 800a616:	f7ff ff57 	bl	800a4c8 <_fflush_r>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d0d9      	beq.n	800a5d2 <__swbuf_r+0x2e>
 800a61e:	e7d6      	b.n	800a5ce <__swbuf_r+0x2a>

0800a620 <__swsetup_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4b29      	ldr	r3, [pc, #164]	@ (800a6c8 <__swsetup_r+0xa8>)
 800a624:	4605      	mov	r5, r0
 800a626:	6818      	ldr	r0, [r3, #0]
 800a628:	460c      	mov	r4, r1
 800a62a:	b118      	cbz	r0, 800a634 <__swsetup_r+0x14>
 800a62c:	6a03      	ldr	r3, [r0, #32]
 800a62e:	b90b      	cbnz	r3, 800a634 <__swsetup_r+0x14>
 800a630:	f7fd fa78 	bl	8007b24 <__sinit>
 800a634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a638:	0719      	lsls	r1, r3, #28
 800a63a:	d422      	bmi.n	800a682 <__swsetup_r+0x62>
 800a63c:	06da      	lsls	r2, r3, #27
 800a63e:	d407      	bmi.n	800a650 <__swsetup_r+0x30>
 800a640:	2209      	movs	r2, #9
 800a642:	602a      	str	r2, [r5, #0]
 800a644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	f04f 30ff 	mov.w	r0, #4294967295
 800a64e:	e033      	b.n	800a6b8 <__swsetup_r+0x98>
 800a650:	0758      	lsls	r0, r3, #29
 800a652:	d512      	bpl.n	800a67a <__swsetup_r+0x5a>
 800a654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a656:	b141      	cbz	r1, 800a66a <__swsetup_r+0x4a>
 800a658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a65c:	4299      	cmp	r1, r3
 800a65e:	d002      	beq.n	800a666 <__swsetup_r+0x46>
 800a660:	4628      	mov	r0, r5
 800a662:	f7fe fa95 	bl	8008b90 <_free_r>
 800a666:	2300      	movs	r3, #0
 800a668:	6363      	str	r3, [r4, #52]	@ 0x34
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a670:	81a3      	strh	r3, [r4, #12]
 800a672:	2300      	movs	r3, #0
 800a674:	6063      	str	r3, [r4, #4]
 800a676:	6923      	ldr	r3, [r4, #16]
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	f043 0308 	orr.w	r3, r3, #8
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	b94b      	cbnz	r3, 800a69a <__swsetup_r+0x7a>
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a68c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a690:	d003      	beq.n	800a69a <__swsetup_r+0x7a>
 800a692:	4621      	mov	r1, r4
 800a694:	4628      	mov	r0, r5
 800a696:	f000 f8b2 	bl	800a7fe <__smakebuf_r>
 800a69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a69e:	f013 0201 	ands.w	r2, r3, #1
 800a6a2:	d00a      	beq.n	800a6ba <__swsetup_r+0x9a>
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	60a2      	str	r2, [r4, #8]
 800a6a8:	6962      	ldr	r2, [r4, #20]
 800a6aa:	4252      	negs	r2, r2
 800a6ac:	61a2      	str	r2, [r4, #24]
 800a6ae:	6922      	ldr	r2, [r4, #16]
 800a6b0:	b942      	cbnz	r2, 800a6c4 <__swsetup_r+0xa4>
 800a6b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6b6:	d1c5      	bne.n	800a644 <__swsetup_r+0x24>
 800a6b8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ba:	0799      	lsls	r1, r3, #30
 800a6bc:	bf58      	it	pl
 800a6be:	6962      	ldrpl	r2, [r4, #20]
 800a6c0:	60a2      	str	r2, [r4, #8]
 800a6c2:	e7f4      	b.n	800a6ae <__swsetup_r+0x8e>
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	e7f7      	b.n	800a6b8 <__swsetup_r+0x98>
 800a6c8:	20000188 	.word	0x20000188

0800a6cc <memmove>:
 800a6cc:	4288      	cmp	r0, r1
 800a6ce:	b510      	push	{r4, lr}
 800a6d0:	eb01 0402 	add.w	r4, r1, r2
 800a6d4:	d902      	bls.n	800a6dc <memmove+0x10>
 800a6d6:	4284      	cmp	r4, r0
 800a6d8:	4623      	mov	r3, r4
 800a6da:	d807      	bhi.n	800a6ec <memmove+0x20>
 800a6dc:	1e43      	subs	r3, r0, #1
 800a6de:	42a1      	cmp	r1, r4
 800a6e0:	d008      	beq.n	800a6f4 <memmove+0x28>
 800a6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ea:	e7f8      	b.n	800a6de <memmove+0x12>
 800a6ec:	4402      	add	r2, r0
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	428a      	cmp	r2, r1
 800a6f2:	d100      	bne.n	800a6f6 <memmove+0x2a>
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6fe:	e7f7      	b.n	800a6f0 <memmove+0x24>

0800a700 <_sbrk_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d06      	ldr	r5, [pc, #24]	@ (800a71c <_sbrk_r+0x1c>)
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f7 f9ec 	bl	8001ae8 <_sbrk>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_sbrk_r+0x1a>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_sbrk_r+0x1a>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	2000065c 	.word	0x2000065c

0800a720 <abort>:
 800a720:	b508      	push	{r3, lr}
 800a722:	2006      	movs	r0, #6
 800a724:	f000 f8d0 	bl	800a8c8 <raise>
 800a728:	2001      	movs	r0, #1
 800a72a:	f7f7 f965 	bl	80019f8 <_exit>

0800a72e <_calloc_r>:
 800a72e:	b570      	push	{r4, r5, r6, lr}
 800a730:	fba1 5402 	umull	r5, r4, r1, r2
 800a734:	b934      	cbnz	r4, 800a744 <_calloc_r+0x16>
 800a736:	4629      	mov	r1, r5
 800a738:	f7fe fdd8 	bl	80092ec <_malloc_r>
 800a73c:	4606      	mov	r6, r0
 800a73e:	b928      	cbnz	r0, 800a74c <_calloc_r+0x1e>
 800a740:	4630      	mov	r0, r6
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	220c      	movs	r2, #12
 800a746:	6002      	str	r2, [r0, #0]
 800a748:	2600      	movs	r6, #0
 800a74a:	e7f9      	b.n	800a740 <_calloc_r+0x12>
 800a74c:	462a      	mov	r2, r5
 800a74e:	4621      	mov	r1, r4
 800a750:	f7fd fa9d 	bl	8007c8e <memset>
 800a754:	e7f4      	b.n	800a740 <_calloc_r+0x12>

0800a756 <_realloc_r>:
 800a756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75a:	4607      	mov	r7, r0
 800a75c:	4614      	mov	r4, r2
 800a75e:	460d      	mov	r5, r1
 800a760:	b921      	cbnz	r1, 800a76c <_realloc_r+0x16>
 800a762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	4611      	mov	r1, r2
 800a768:	f7fe bdc0 	b.w	80092ec <_malloc_r>
 800a76c:	b92a      	cbnz	r2, 800a77a <_realloc_r+0x24>
 800a76e:	f7fe fa0f 	bl	8008b90 <_free_r>
 800a772:	4625      	mov	r5, r4
 800a774:	4628      	mov	r0, r5
 800a776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77a:	f000 f8e3 	bl	800a944 <_malloc_usable_size_r>
 800a77e:	4284      	cmp	r4, r0
 800a780:	4606      	mov	r6, r0
 800a782:	d802      	bhi.n	800a78a <_realloc_r+0x34>
 800a784:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a788:	d8f4      	bhi.n	800a774 <_realloc_r+0x1e>
 800a78a:	4621      	mov	r1, r4
 800a78c:	4638      	mov	r0, r7
 800a78e:	f7fe fdad 	bl	80092ec <_malloc_r>
 800a792:	4680      	mov	r8, r0
 800a794:	b908      	cbnz	r0, 800a79a <_realloc_r+0x44>
 800a796:	4645      	mov	r5, r8
 800a798:	e7ec      	b.n	800a774 <_realloc_r+0x1e>
 800a79a:	42b4      	cmp	r4, r6
 800a79c:	4622      	mov	r2, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	bf28      	it	cs
 800a7a2:	4632      	movcs	r2, r6
 800a7a4:	f7fd fb61 	bl	8007e6a <memcpy>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	f7fe f9f0 	bl	8008b90 <_free_r>
 800a7b0:	e7f1      	b.n	800a796 <_realloc_r+0x40>

0800a7b2 <__swhatbuf_r>:
 800a7b2:	b570      	push	{r4, r5, r6, lr}
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	b096      	sub	sp, #88	@ 0x58
 800a7be:	4615      	mov	r5, r2
 800a7c0:	461e      	mov	r6, r3
 800a7c2:	da0d      	bge.n	800a7e0 <__swhatbuf_r+0x2e>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7ca:	f04f 0100 	mov.w	r1, #0
 800a7ce:	bf14      	ite	ne
 800a7d0:	2340      	movne	r3, #64	@ 0x40
 800a7d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	6031      	str	r1, [r6, #0]
 800a7da:	602b      	str	r3, [r5, #0]
 800a7dc:	b016      	add	sp, #88	@ 0x58
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	466a      	mov	r2, sp
 800a7e2:	f000 f879 	bl	800a8d8 <_fstat_r>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	dbec      	blt.n	800a7c4 <__swhatbuf_r+0x12>
 800a7ea:	9901      	ldr	r1, [sp, #4]
 800a7ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7f4:	4259      	negs	r1, r3
 800a7f6:	4159      	adcs	r1, r3
 800a7f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7fc:	e7eb      	b.n	800a7d6 <__swhatbuf_r+0x24>

0800a7fe <__smakebuf_r>:
 800a7fe:	898b      	ldrh	r3, [r1, #12]
 800a800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a802:	079d      	lsls	r5, r3, #30
 800a804:	4606      	mov	r6, r0
 800a806:	460c      	mov	r4, r1
 800a808:	d507      	bpl.n	800a81a <__smakebuf_r+0x1c>
 800a80a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a80e:	6023      	str	r3, [r4, #0]
 800a810:	6123      	str	r3, [r4, #16]
 800a812:	2301      	movs	r3, #1
 800a814:	6163      	str	r3, [r4, #20]
 800a816:	b003      	add	sp, #12
 800a818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a81a:	ab01      	add	r3, sp, #4
 800a81c:	466a      	mov	r2, sp
 800a81e:	f7ff ffc8 	bl	800a7b2 <__swhatbuf_r>
 800a822:	9f00      	ldr	r7, [sp, #0]
 800a824:	4605      	mov	r5, r0
 800a826:	4639      	mov	r1, r7
 800a828:	4630      	mov	r0, r6
 800a82a:	f7fe fd5f 	bl	80092ec <_malloc_r>
 800a82e:	b948      	cbnz	r0, 800a844 <__smakebuf_r+0x46>
 800a830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a834:	059a      	lsls	r2, r3, #22
 800a836:	d4ee      	bmi.n	800a816 <__smakebuf_r+0x18>
 800a838:	f023 0303 	bic.w	r3, r3, #3
 800a83c:	f043 0302 	orr.w	r3, r3, #2
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	e7e2      	b.n	800a80a <__smakebuf_r+0xc>
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	6020      	str	r0, [r4, #0]
 800a848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a854:	b15b      	cbz	r3, 800a86e <__smakebuf_r+0x70>
 800a856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a85a:	4630      	mov	r0, r6
 800a85c:	f000 f84e 	bl	800a8fc <_isatty_r>
 800a860:	b128      	cbz	r0, 800a86e <__smakebuf_r+0x70>
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	f023 0303 	bic.w	r3, r3, #3
 800a868:	f043 0301 	orr.w	r3, r3, #1
 800a86c:	81a3      	strh	r3, [r4, #12]
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	431d      	orrs	r5, r3
 800a872:	81a5      	strh	r5, [r4, #12]
 800a874:	e7cf      	b.n	800a816 <__smakebuf_r+0x18>

0800a876 <_raise_r>:
 800a876:	291f      	cmp	r1, #31
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4605      	mov	r5, r0
 800a87c:	460c      	mov	r4, r1
 800a87e:	d904      	bls.n	800a88a <_raise_r+0x14>
 800a880:	2316      	movs	r3, #22
 800a882:	6003      	str	r3, [r0, #0]
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a88c:	b112      	cbz	r2, 800a894 <_raise_r+0x1e>
 800a88e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a892:	b94b      	cbnz	r3, 800a8a8 <_raise_r+0x32>
 800a894:	4628      	mov	r0, r5
 800a896:	f000 f853 	bl	800a940 <_getpid_r>
 800a89a:	4622      	mov	r2, r4
 800a89c:	4601      	mov	r1, r0
 800a89e:	4628      	mov	r0, r5
 800a8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a4:	f000 b83a 	b.w	800a91c <_kill_r>
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d00a      	beq.n	800a8c2 <_raise_r+0x4c>
 800a8ac:	1c59      	adds	r1, r3, #1
 800a8ae:	d103      	bne.n	800a8b8 <_raise_r+0x42>
 800a8b0:	2316      	movs	r3, #22
 800a8b2:	6003      	str	r3, [r0, #0]
 800a8b4:	2001      	movs	r0, #1
 800a8b6:	e7e7      	b.n	800a888 <_raise_r+0x12>
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	4798      	blx	r3
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e7e0      	b.n	800a888 <_raise_r+0x12>
	...

0800a8c8 <raise>:
 800a8c8:	4b02      	ldr	r3, [pc, #8]	@ (800a8d4 <raise+0xc>)
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	f7ff bfd2 	b.w	800a876 <_raise_r>
 800a8d2:	bf00      	nop
 800a8d4:	20000188 	.word	0x20000188

0800a8d8 <_fstat_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4d07      	ldr	r5, [pc, #28]	@ (800a8f8 <_fstat_r+0x20>)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	602b      	str	r3, [r5, #0]
 800a8e6:	f7f7 f8d7 	bl	8001a98 <_fstat>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	d102      	bne.n	800a8f4 <_fstat_r+0x1c>
 800a8ee:	682b      	ldr	r3, [r5, #0]
 800a8f0:	b103      	cbz	r3, 800a8f4 <_fstat_r+0x1c>
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
 800a8f6:	bf00      	nop
 800a8f8:	2000065c 	.word	0x2000065c

0800a8fc <_isatty_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d06      	ldr	r5, [pc, #24]	@ (800a918 <_isatty_r+0x1c>)
 800a900:	2300      	movs	r3, #0
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	f7f7 f8d6 	bl	8001ab8 <_isatty>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_isatty_r+0x1a>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_isatty_r+0x1a>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	2000065c 	.word	0x2000065c

0800a91c <_kill_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	@ (800a93c <_kill_r+0x20>)
 800a920:	2300      	movs	r3, #0
 800a922:	4604      	mov	r4, r0
 800a924:	4608      	mov	r0, r1
 800a926:	4611      	mov	r1, r2
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	f7f7 f855 	bl	80019d8 <_kill>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	d102      	bne.n	800a938 <_kill_r+0x1c>
 800a932:	682b      	ldr	r3, [r5, #0]
 800a934:	b103      	cbz	r3, 800a938 <_kill_r+0x1c>
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	bd38      	pop	{r3, r4, r5, pc}
 800a93a:	bf00      	nop
 800a93c:	2000065c 	.word	0x2000065c

0800a940 <_getpid_r>:
 800a940:	f7f7 b842 	b.w	80019c8 <_getpid>

0800a944 <_malloc_usable_size_r>:
 800a944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a948:	1f18      	subs	r0, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	bfbc      	itt	lt
 800a94e:	580b      	ldrlt	r3, [r1, r0]
 800a950:	18c0      	addlt	r0, r0, r3
 800a952:	4770      	bx	lr

0800a954 <_init>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr

0800a960 <_fini>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	bf00      	nop
 800a964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a966:	bc08      	pop	{r3}
 800a968:	469e      	mov	lr, r3
 800a96a:	4770      	bx	lr
